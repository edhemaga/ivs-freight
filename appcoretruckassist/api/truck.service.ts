/**
 * Truckassist API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ApUnit } from '../model/apUnit';
// @ts-ignore
import { Brakes } from '../model/brakes';
// @ts-ignore
import { CreateTagCommand } from '../model/createTagCommand';
// @ts-ignore
import { CreateWithUploadsResponse } from '../model/createWithUploadsResponse';
// @ts-ignore
import { FileResponse } from '../model/fileResponse';
// @ts-ignore
import { FuelType } from '../model/fuelType';
// @ts-ignore
import { GetTruckModalResponse } from '../model/getTruckModalResponse';
// @ts-ignore
import { MultipleChangeTruckStatusCommand } from '../model/multipleChangeTruckStatusCommand';
// @ts-ignore
import { ProblemDetails } from '../model/problemDetails';
// @ts-ignore
import { SortOrder } from '../model/sortOrder';
// @ts-ignore
import { TruckAutocompleteModelResponse } from '../model/truckAutocompleteModelResponse';
// @ts-ignore
import { TruckExpensesResponse } from '../model/truckExpensesResponse';
// @ts-ignore
import { TruckFilterListResponse } from '../model/truckFilterListResponse';
// @ts-ignore
import { TruckFuelConsumptionResponse } from '../model/truckFuelConsumptionResponse';
// @ts-ignore
import { TruckListResponse } from '../model/truckListResponse';
// @ts-ignore
import { TruckMinimalListResponse } from '../model/truckMinimalListResponse';
// @ts-ignore
import { TruckPerformanceResponse } from '../model/truckPerformanceResponse';
// @ts-ignore
import { TruckResponse } from '../model/truckResponse';
// @ts-ignore
import { TruckRevenueResponse } from '../model/truckRevenueResponse';
// @ts-ignore
import { WheelsType } from '../model/wheelsType';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class TruckService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param model 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckAutocompleteModelModelGet(model: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TruckAutocompleteModelResponse>;
    public apiTruckAutocompleteModelModelGet(model: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TruckAutocompleteModelResponse>>;
    public apiTruckAutocompleteModelModelGet(model: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TruckAutocompleteModelResponse>>;
    public apiTruckAutocompleteModelModelGet(model: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (model === null || model === undefined) {
            throw new Error('Required parameter model was null or undefined when calling apiTruckAutocompleteModelModelGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/autocomplete/model/${this.configuration.encodeParam({name: "model", value: model, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<TruckAutocompleteModelResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param truckNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckCheckTrucknumberTruckNumberGet(truckNumber: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<boolean>;
    public apiTruckCheckTrucknumberTruckNumberGet(truckNumber: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<boolean>>;
    public apiTruckCheckTrucknumberTruckNumberGet(truckNumber: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<boolean>>;
    public apiTruckCheckTrucknumberTruckNumberGet(truckNumber: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (truckNumber === null || truckNumber === undefined) {
            throw new Error('Required parameter truckNumber was null or undefined when calling apiTruckCheckTrucknumberTruckNumberGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/check/trucknumber/${this.configuration.encodeParam({name: "truckNumber", value: truckNumber, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<boolean>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param vin 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckCheckVinVinGet(vin: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<boolean>;
    public apiTruckCheckVinVinGet(vin: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<boolean>>;
    public apiTruckCheckVinVinGet(vin: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<boolean>>;
    public apiTruckCheckVinVinGet(vin: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (vin === null || vin === undefined) {
            throw new Error('Required parameter vin was null or undefined when calling apiTruckCheckVinVinGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/check/vin/${this.configuration.encodeParam({name: "vin", value: vin, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<boolean>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param chartTimeDetailPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckExpensesGet(id?: number, chartTimeDetailPages?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TruckExpensesResponse>;
    public apiTruckExpensesGet(id?: number, chartTimeDetailPages?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TruckExpensesResponse>>;
    public apiTruckExpensesGet(id?: number, chartTimeDetailPages?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TruckExpensesResponse>>;
    public apiTruckExpensesGet(id?: number, chartTimeDetailPages?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'Id');
        }
        if (chartTimeDetailPages !== undefined && chartTimeDetailPages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chartTimeDetailPages, 'ChartTimeDetailPages');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/expenses`;
        return this.httpClient.request<TruckExpensesResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckFilesIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<Array<FileResponse>>;
    public apiTruckFilesIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<FileResponse>>>;
    public apiTruckFilesIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<FileResponse>>>;
    public apiTruckFilesIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiTruckFilesIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/files/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<Array<FileResponse>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param active 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckFilterGet(active?: number, pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TruckFilterListResponse>;
    public apiTruckFilterGet(active?: number, pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TruckFilterListResponse>>;
    public apiTruckFilterGet(active?: number, pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TruckFilterListResponse>>;
    public apiTruckFilterGet(active?: number, pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (active !== undefined && active !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>active, 'Active');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/filter`;
        return this.httpClient.request<TruckFilterListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param chartTimeDetailPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckFuelconsumptionGet(id?: number, chartTimeDetailPages?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TruckFuelConsumptionResponse>;
    public apiTruckFuelconsumptionGet(id?: number, chartTimeDetailPages?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TruckFuelConsumptionResponse>>;
    public apiTruckFuelconsumptionGet(id?: number, chartTimeDetailPages?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TruckFuelConsumptionResponse>>;
    public apiTruckFuelconsumptionGet(id?: number, chartTimeDetailPages?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'Id');
        }
        if (chartTimeDetailPages !== undefined && chartTimeDetailPages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chartTimeDetailPages, 'ChartTimeDetailPages');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/fuelconsumption`;
        return this.httpClient.request<TruckFuelConsumptionResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckIdDelete(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiTruckIdDelete(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiTruckIdDelete(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiTruckIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiTruckIdDelete.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TruckResponse>;
    public apiTruckIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TruckResponse>>;
    public apiTruckIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TruckResponse>>;
    public apiTruckIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiTruckIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<TruckResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param truckXls 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckImportPost(truckXls?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<object>;
    public apiTruckImportPost(truckXls?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<object>>;
    public apiTruckImportPost(truckXls?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<object>>;
    public apiTruckImportPost(truckXls?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (truckXls !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckXls', <any>truckXls) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/import`;
        return this.httpClient.request<object>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ids 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckListDelete(ids?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiTruckListDelete(ids?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiTruckListDelete(ids?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiTruckListDelete(ids?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ids) {
            ids.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'Ids');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/list`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param active 
     * @param truckTypes 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param sortOrder 
     * @param sortBy 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckListGet(active?: number, truckTypes?: Array<number>, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TruckListResponse>;
    public apiTruckListGet(active?: number, truckTypes?: Array<number>, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TruckListResponse>>;
    public apiTruckListGet(active?: number, truckTypes?: Array<number>, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TruckListResponse>>;
    public apiTruckListGet(active?: number, truckTypes?: Array<number>, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (active !== undefined && active !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>active, 'Active');
        }
        if (truckTypes) {
            truckTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'TruckTypes');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'SortOrder');
        }
        if (sortBy !== undefined && sortBy !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortBy, 'SortBy');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search2, 'Search2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/list`;
        return this.httpClient.request<TruckListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TruckMinimalListResponse>;
    public apiTruckListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TruckMinimalListResponse>>;
    public apiTruckListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TruckMinimalListResponse>>;
    public apiTruckListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/list/minimal`;
        return this.httpClient.request<TruckMinimalListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckModalGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<GetTruckModalResponse>;
    public apiTruckModalGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<GetTruckModalResponse>>;
    public apiTruckModalGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<GetTruckModalResponse>>;
    public apiTruckModalGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/modal`;
        return this.httpClient.request<GetTruckModalResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param chartTimeDetailPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckPerformanceGet(id?: number, chartTimeDetailPages?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TruckPerformanceResponse>;
    public apiTruckPerformanceGet(id?: number, chartTimeDetailPages?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TruckPerformanceResponse>>;
    public apiTruckPerformanceGet(id?: number, chartTimeDetailPages?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TruckPerformanceResponse>>;
    public apiTruckPerformanceGet(id?: number, chartTimeDetailPages?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'Id');
        }
        if (chartTimeDetailPages !== undefined && chartTimeDetailPages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chartTimeDetailPages, 'ChartTimeDetailPages');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/performance`;
        return this.httpClient.request<TruckPerformanceResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param companyOwned 
     * @param truckNumber 
     * @param truckTypeId 
     * @param vin 
     * @param truckMakeId 
     * @param truckLengthId 
     * @param model 
     * @param year 
     * @param colorId 
     * @param excludeFromIftaFuelTaxReport 
     * @param ownerId 
     * @param commission 
     * @param note 
     * @param purchaseDate 
     * @param purchasePrice 
     * @param truckGrossWeightId 
     * @param volume 
     * @param emptyWeight 
     * @param truckEngineModelId 
     * @param tireSizeId 
     * @param fuelTankSize 
     * @param brakes 
     * @param frontWheels 
     * @param rearWheels 
     * @param transmissionModel 
     * @param fuelType 
     * @param shifter 
     * @param axles 
     * @param fhwaExp 
     * @param insurancePolicy 
     * @param mileage 
     * @param wheelBase 
     * @param engineOilType 
     * @param gearRatio 
     * @param apUnit 
     * @param tollTransponder 
     * @param tollTransponderDeviceNo 
     * @param doubleBunk 
     * @param refrigerator 
     * @param dcInverter 
     * @param headacheRack 
     * @param dashCam 
     * @param blower 
     * @param pto 
     * @param files 
     * @param tags 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckPost(companyOwned?: boolean, truckNumber?: string, truckTypeId?: number, vin?: string, truckMakeId?: number, truckLengthId?: number, model?: string, year?: number, colorId?: number, excludeFromIftaFuelTaxReport?: boolean, ownerId?: number, commission?: number, note?: string, purchaseDate?: string, purchasePrice?: number, truckGrossWeightId?: number, volume?: number, emptyWeight?: number, truckEngineModelId?: number, tireSizeId?: number, fuelTankSize?: number, brakes?: Brakes, frontWheels?: WheelsType, rearWheels?: WheelsType, transmissionModel?: string, fuelType?: FuelType, shifter?: number, axles?: number, fhwaExp?: number, insurancePolicy?: string, mileage?: number, wheelBase?: number, engineOilType?: number, gearRatio?: number, apUnit?: ApUnit, tollTransponder?: number, tollTransponderDeviceNo?: string, doubleBunk?: boolean, refrigerator?: boolean, dcInverter?: boolean, headacheRack?: boolean, dashCam?: boolean, blower?: boolean, pto?: boolean, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<CreateWithUploadsResponse>;
    public apiTruckPost(companyOwned?: boolean, truckNumber?: string, truckTypeId?: number, vin?: string, truckMakeId?: number, truckLengthId?: number, model?: string, year?: number, colorId?: number, excludeFromIftaFuelTaxReport?: boolean, ownerId?: number, commission?: number, note?: string, purchaseDate?: string, purchasePrice?: number, truckGrossWeightId?: number, volume?: number, emptyWeight?: number, truckEngineModelId?: number, tireSizeId?: number, fuelTankSize?: number, brakes?: Brakes, frontWheels?: WheelsType, rearWheels?: WheelsType, transmissionModel?: string, fuelType?: FuelType, shifter?: number, axles?: number, fhwaExp?: number, insurancePolicy?: string, mileage?: number, wheelBase?: number, engineOilType?: number, gearRatio?: number, apUnit?: ApUnit, tollTransponder?: number, tollTransponderDeviceNo?: string, doubleBunk?: boolean, refrigerator?: boolean, dcInverter?: boolean, headacheRack?: boolean, dashCam?: boolean, blower?: boolean, pto?: boolean, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<CreateWithUploadsResponse>>;
    public apiTruckPost(companyOwned?: boolean, truckNumber?: string, truckTypeId?: number, vin?: string, truckMakeId?: number, truckLengthId?: number, model?: string, year?: number, colorId?: number, excludeFromIftaFuelTaxReport?: boolean, ownerId?: number, commission?: number, note?: string, purchaseDate?: string, purchasePrice?: number, truckGrossWeightId?: number, volume?: number, emptyWeight?: number, truckEngineModelId?: number, tireSizeId?: number, fuelTankSize?: number, brakes?: Brakes, frontWheels?: WheelsType, rearWheels?: WheelsType, transmissionModel?: string, fuelType?: FuelType, shifter?: number, axles?: number, fhwaExp?: number, insurancePolicy?: string, mileage?: number, wheelBase?: number, engineOilType?: number, gearRatio?: number, apUnit?: ApUnit, tollTransponder?: number, tollTransponderDeviceNo?: string, doubleBunk?: boolean, refrigerator?: boolean, dcInverter?: boolean, headacheRack?: boolean, dashCam?: boolean, blower?: boolean, pto?: boolean, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<CreateWithUploadsResponse>>;
    public apiTruckPost(companyOwned?: boolean, truckNumber?: string, truckTypeId?: number, vin?: string, truckMakeId?: number, truckLengthId?: number, model?: string, year?: number, colorId?: number, excludeFromIftaFuelTaxReport?: boolean, ownerId?: number, commission?: number, note?: string, purchaseDate?: string, purchasePrice?: number, truckGrossWeightId?: number, volume?: number, emptyWeight?: number, truckEngineModelId?: number, tireSizeId?: number, fuelTankSize?: number, brakes?: Brakes, frontWheels?: WheelsType, rearWheels?: WheelsType, transmissionModel?: string, fuelType?: FuelType, shifter?: number, axles?: number, fhwaExp?: number, insurancePolicy?: string, mileage?: number, wheelBase?: number, engineOilType?: number, gearRatio?: number, apUnit?: ApUnit, tollTransponder?: number, tollTransponderDeviceNo?: string, doubleBunk?: boolean, refrigerator?: boolean, dcInverter?: boolean, headacheRack?: boolean, dashCam?: boolean, blower?: boolean, pto?: boolean, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (companyOwned !== undefined) {
            localVarFormParams = localVarFormParams.append('CompanyOwned', <any>companyOwned) as any || localVarFormParams;
        }
        if (truckNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckNumber', <any>truckNumber) as any || localVarFormParams;
        }
        if (truckTypeId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckTypeId', <any>truckTypeId) as any || localVarFormParams;
        }
        if (vin !== undefined) {
            localVarFormParams = localVarFormParams.append('Vin', <any>vin) as any || localVarFormParams;
        }
        if (truckMakeId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckMakeId', <any>truckMakeId) as any || localVarFormParams;
        }
        if (truckLengthId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckLengthId', <any>truckLengthId) as any || localVarFormParams;
        }
        if (model !== undefined) {
            localVarFormParams = localVarFormParams.append('Model', <any>model) as any || localVarFormParams;
        }
        if (year !== undefined) {
            localVarFormParams = localVarFormParams.append('Year', <any>year) as any || localVarFormParams;
        }
        if (colorId !== undefined) {
            localVarFormParams = localVarFormParams.append('ColorId', <any>colorId) as any || localVarFormParams;
        }
        if (excludeFromIftaFuelTaxReport !== undefined) {
            localVarFormParams = localVarFormParams.append('ExcludeFromIftaFuelTaxReport', <any>excludeFromIftaFuelTaxReport) as any || localVarFormParams;
        }
        if (ownerId !== undefined) {
            localVarFormParams = localVarFormParams.append('OwnerId', <any>ownerId) as any || localVarFormParams;
        }
        if (commission !== undefined) {
            localVarFormParams = localVarFormParams.append('Commission', <any>commission) as any || localVarFormParams;
        }
        if (note !== undefined) {
            localVarFormParams = localVarFormParams.append('Note', <any>note) as any || localVarFormParams;
        }
        if (purchaseDate !== undefined) {
            localVarFormParams = localVarFormParams.append('PurchaseDate', <any>purchaseDate) as any || localVarFormParams;
        }
        if (purchasePrice !== undefined) {
            localVarFormParams = localVarFormParams.append('PurchasePrice', <any>purchasePrice) as any || localVarFormParams;
        }
        if (truckGrossWeightId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckGrossWeightId', <any>truckGrossWeightId) as any || localVarFormParams;
        }
        if (volume !== undefined) {
            localVarFormParams = localVarFormParams.append('Volume', <any>volume) as any || localVarFormParams;
        }
        if (emptyWeight !== undefined) {
            localVarFormParams = localVarFormParams.append('EmptyWeight', <any>emptyWeight) as any || localVarFormParams;
        }
        if (truckEngineModelId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckEngineModelId', <any>truckEngineModelId) as any || localVarFormParams;
        }
        if (tireSizeId !== undefined) {
            localVarFormParams = localVarFormParams.append('TireSizeId', <any>tireSizeId) as any || localVarFormParams;
        }
        if (fuelTankSize !== undefined) {
            localVarFormParams = localVarFormParams.append('FuelTankSize', <any>fuelTankSize) as any || localVarFormParams;
        }
        if (brakes !== undefined) {
            localVarFormParams = localVarFormParams.append('Brakes', <any>brakes) as any || localVarFormParams;
        }
        if (frontWheels !== undefined) {
            localVarFormParams = localVarFormParams.append('FrontWheels', <any>frontWheels) as any || localVarFormParams;
        }
        if (rearWheels !== undefined) {
            localVarFormParams = localVarFormParams.append('RearWheels', <any>rearWheels) as any || localVarFormParams;
        }
        if (transmissionModel !== undefined) {
            localVarFormParams = localVarFormParams.append('TransmissionModel', <any>transmissionModel) as any || localVarFormParams;
        }
        if (fuelType !== undefined) {
            localVarFormParams = localVarFormParams.append('FuelType', <any>fuelType) as any || localVarFormParams;
        }
        if (shifter !== undefined) {
            localVarFormParams = localVarFormParams.append('Shifter', <any>shifter) as any || localVarFormParams;
        }
        if (axles !== undefined) {
            localVarFormParams = localVarFormParams.append('Axles', <any>axles) as any || localVarFormParams;
        }
        if (fhwaExp !== undefined) {
            localVarFormParams = localVarFormParams.append('FhwaExp', <any>fhwaExp) as any || localVarFormParams;
        }
        if (insurancePolicy !== undefined) {
            localVarFormParams = localVarFormParams.append('InsurancePolicy', <any>insurancePolicy) as any || localVarFormParams;
        }
        if (mileage !== undefined) {
            localVarFormParams = localVarFormParams.append('Mileage', <any>mileage) as any || localVarFormParams;
        }
        if (wheelBase !== undefined) {
            localVarFormParams = localVarFormParams.append('WheelBase', <any>wheelBase) as any || localVarFormParams;
        }
        if (engineOilType !== undefined) {
            localVarFormParams = localVarFormParams.append('EngineOilType', <any>engineOilType) as any || localVarFormParams;
        }
        if (gearRatio !== undefined) {
            localVarFormParams = localVarFormParams.append('GearRatio', <any>gearRatio) as any || localVarFormParams;
        }
        if (apUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('ApUnit', <any>apUnit) as any || localVarFormParams;
        }
        if (tollTransponder !== undefined) {
            localVarFormParams = localVarFormParams.append('TollTransponder', <any>tollTransponder) as any || localVarFormParams;
        }
        if (tollTransponderDeviceNo !== undefined) {
            localVarFormParams = localVarFormParams.append('TollTransponderDeviceNo', <any>tollTransponderDeviceNo) as any || localVarFormParams;
        }
        if (doubleBunk !== undefined) {
            localVarFormParams = localVarFormParams.append('DoubleBunk', <any>doubleBunk) as any || localVarFormParams;
        }
        if (refrigerator !== undefined) {
            localVarFormParams = localVarFormParams.append('Refrigerator', <any>refrigerator) as any || localVarFormParams;
        }
        if (dcInverter !== undefined) {
            localVarFormParams = localVarFormParams.append('DcInverter', <any>dcInverter) as any || localVarFormParams;
        }
        if (headacheRack !== undefined) {
            localVarFormParams = localVarFormParams.append('HeadacheRack', <any>headacheRack) as any || localVarFormParams;
        }
        if (dashCam !== undefined) {
            localVarFormParams = localVarFormParams.append('DashCam', <any>dashCam) as any || localVarFormParams;
        }
        if (blower !== undefined) {
            localVarFormParams = localVarFormParams.append('Blower', <any>blower) as any || localVarFormParams;
        }
        if (pto !== undefined) {
            localVarFormParams = localVarFormParams.append('Pto', <any>pto) as any || localVarFormParams;
        }
        if (files) {
            files.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Files', <any>element) as any || localVarFormParams;
            })
        }
        if (tags) {
            tags.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Tags', <any>element) as any || localVarFormParams;
            })
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck`;
        return this.httpClient.request<CreateWithUploadsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param companyOwned 
     * @param truckNumber 
     * @param truckTypeId 
     * @param vin 
     * @param truckMakeId 
     * @param truckLengthId 
     * @param model 
     * @param year 
     * @param colorId 
     * @param excludeFromIftaFuelTaxReport 
     * @param ownerId 
     * @param commission 
     * @param note 
     * @param purchaseDate 
     * @param purchasePrice 
     * @param truckGrossWeightId 
     * @param volume 
     * @param emptyWeight 
     * @param truckEngineModelId 
     * @param tireSizeId 
     * @param fuelTankSize 
     * @param brakes 
     * @param frontWheels 
     * @param rearWheels 
     * @param transmissionModel 
     * @param fuelType 
     * @param shifter 
     * @param axles 
     * @param insurancePolicy 
     * @param mileage 
     * @param wheelBase 
     * @param fhwaExp 
     * @param engineOilType 
     * @param gearRatio 
     * @param apUnit 
     * @param tollTransponder 
     * @param tollTransponderDeviceNo 
     * @param doubleBunk 
     * @param refrigerator 
     * @param dcInverter 
     * @param headacheRack 
     * @param dashCam 
     * @param blower 
     * @param pto 
     * @param files 
     * @param tags 
     * @param filesForDeleteIds 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckPut(id?: number, companyOwned?: boolean, truckNumber?: string, truckTypeId?: number, vin?: string, truckMakeId?: number, truckLengthId?: number, model?: string, year?: number, colorId?: number, excludeFromIftaFuelTaxReport?: boolean, ownerId?: number, commission?: number, note?: string, purchaseDate?: string, purchasePrice?: number, truckGrossWeightId?: number, volume?: number, emptyWeight?: number, truckEngineModelId?: number, tireSizeId?: number, fuelTankSize?: number, brakes?: Brakes, frontWheels?: WheelsType, rearWheels?: WheelsType, transmissionModel?: string, fuelType?: FuelType, shifter?: number, axles?: number, insurancePolicy?: string, mileage?: number, wheelBase?: number, fhwaExp?: number, engineOilType?: number, gearRatio?: number, apUnit?: ApUnit, tollTransponder?: number, tollTransponderDeviceNo?: string, doubleBunk?: boolean, refrigerator?: boolean, dcInverter?: boolean, headacheRack?: boolean, dashCam?: boolean, blower?: boolean, pto?: boolean, files?: Array<Blob>, tags?: Array<CreateTagCommand>, filesForDeleteIds?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<CreateWithUploadsResponse>;
    public apiTruckPut(id?: number, companyOwned?: boolean, truckNumber?: string, truckTypeId?: number, vin?: string, truckMakeId?: number, truckLengthId?: number, model?: string, year?: number, colorId?: number, excludeFromIftaFuelTaxReport?: boolean, ownerId?: number, commission?: number, note?: string, purchaseDate?: string, purchasePrice?: number, truckGrossWeightId?: number, volume?: number, emptyWeight?: number, truckEngineModelId?: number, tireSizeId?: number, fuelTankSize?: number, brakes?: Brakes, frontWheels?: WheelsType, rearWheels?: WheelsType, transmissionModel?: string, fuelType?: FuelType, shifter?: number, axles?: number, insurancePolicy?: string, mileage?: number, wheelBase?: number, fhwaExp?: number, engineOilType?: number, gearRatio?: number, apUnit?: ApUnit, tollTransponder?: number, tollTransponderDeviceNo?: string, doubleBunk?: boolean, refrigerator?: boolean, dcInverter?: boolean, headacheRack?: boolean, dashCam?: boolean, blower?: boolean, pto?: boolean, files?: Array<Blob>, tags?: Array<CreateTagCommand>, filesForDeleteIds?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<CreateWithUploadsResponse>>;
    public apiTruckPut(id?: number, companyOwned?: boolean, truckNumber?: string, truckTypeId?: number, vin?: string, truckMakeId?: number, truckLengthId?: number, model?: string, year?: number, colorId?: number, excludeFromIftaFuelTaxReport?: boolean, ownerId?: number, commission?: number, note?: string, purchaseDate?: string, purchasePrice?: number, truckGrossWeightId?: number, volume?: number, emptyWeight?: number, truckEngineModelId?: number, tireSizeId?: number, fuelTankSize?: number, brakes?: Brakes, frontWheels?: WheelsType, rearWheels?: WheelsType, transmissionModel?: string, fuelType?: FuelType, shifter?: number, axles?: number, insurancePolicy?: string, mileage?: number, wheelBase?: number, fhwaExp?: number, engineOilType?: number, gearRatio?: number, apUnit?: ApUnit, tollTransponder?: number, tollTransponderDeviceNo?: string, doubleBunk?: boolean, refrigerator?: boolean, dcInverter?: boolean, headacheRack?: boolean, dashCam?: boolean, blower?: boolean, pto?: boolean, files?: Array<Blob>, tags?: Array<CreateTagCommand>, filesForDeleteIds?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<CreateWithUploadsResponse>>;
    public apiTruckPut(id?: number, companyOwned?: boolean, truckNumber?: string, truckTypeId?: number, vin?: string, truckMakeId?: number, truckLengthId?: number, model?: string, year?: number, colorId?: number, excludeFromIftaFuelTaxReport?: boolean, ownerId?: number, commission?: number, note?: string, purchaseDate?: string, purchasePrice?: number, truckGrossWeightId?: number, volume?: number, emptyWeight?: number, truckEngineModelId?: number, tireSizeId?: number, fuelTankSize?: number, brakes?: Brakes, frontWheels?: WheelsType, rearWheels?: WheelsType, transmissionModel?: string, fuelType?: FuelType, shifter?: number, axles?: number, insurancePolicy?: string, mileage?: number, wheelBase?: number, fhwaExp?: number, engineOilType?: number, gearRatio?: number, apUnit?: ApUnit, tollTransponder?: number, tollTransponderDeviceNo?: string, doubleBunk?: boolean, refrigerator?: boolean, dcInverter?: boolean, headacheRack?: boolean, dashCam?: boolean, blower?: boolean, pto?: boolean, files?: Array<Blob>, tags?: Array<CreateTagCommand>, filesForDeleteIds?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (id !== undefined) {
            localVarFormParams = localVarFormParams.append('Id', <any>id) as any || localVarFormParams;
        }
        if (companyOwned !== undefined) {
            localVarFormParams = localVarFormParams.append('CompanyOwned', <any>companyOwned) as any || localVarFormParams;
        }
        if (truckNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckNumber', <any>truckNumber) as any || localVarFormParams;
        }
        if (truckTypeId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckTypeId', <any>truckTypeId) as any || localVarFormParams;
        }
        if (vin !== undefined) {
            localVarFormParams = localVarFormParams.append('Vin', <any>vin) as any || localVarFormParams;
        }
        if (truckMakeId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckMakeId', <any>truckMakeId) as any || localVarFormParams;
        }
        if (truckLengthId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckLengthId', <any>truckLengthId) as any || localVarFormParams;
        }
        if (model !== undefined) {
            localVarFormParams = localVarFormParams.append('Model', <any>model) as any || localVarFormParams;
        }
        if (year !== undefined) {
            localVarFormParams = localVarFormParams.append('Year', <any>year) as any || localVarFormParams;
        }
        if (colorId !== undefined) {
            localVarFormParams = localVarFormParams.append('ColorId', <any>colorId) as any || localVarFormParams;
        }
        if (excludeFromIftaFuelTaxReport !== undefined) {
            localVarFormParams = localVarFormParams.append('ExcludeFromIftaFuelTaxReport', <any>excludeFromIftaFuelTaxReport) as any || localVarFormParams;
        }
        if (ownerId !== undefined) {
            localVarFormParams = localVarFormParams.append('OwnerId', <any>ownerId) as any || localVarFormParams;
        }
        if (commission !== undefined) {
            localVarFormParams = localVarFormParams.append('Commission', <any>commission) as any || localVarFormParams;
        }
        if (note !== undefined) {
            localVarFormParams = localVarFormParams.append('Note', <any>note) as any || localVarFormParams;
        }
        if (purchaseDate !== undefined) {
            localVarFormParams = localVarFormParams.append('PurchaseDate', <any>purchaseDate) as any || localVarFormParams;
        }
        if (purchasePrice !== undefined) {
            localVarFormParams = localVarFormParams.append('PurchasePrice', <any>purchasePrice) as any || localVarFormParams;
        }
        if (truckGrossWeightId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckGrossWeightId', <any>truckGrossWeightId) as any || localVarFormParams;
        }
        if (volume !== undefined) {
            localVarFormParams = localVarFormParams.append('Volume', <any>volume) as any || localVarFormParams;
        }
        if (emptyWeight !== undefined) {
            localVarFormParams = localVarFormParams.append('EmptyWeight', <any>emptyWeight) as any || localVarFormParams;
        }
        if (truckEngineModelId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckEngineModelId', <any>truckEngineModelId) as any || localVarFormParams;
        }
        if (tireSizeId !== undefined) {
            localVarFormParams = localVarFormParams.append('TireSizeId', <any>tireSizeId) as any || localVarFormParams;
        }
        if (fuelTankSize !== undefined) {
            localVarFormParams = localVarFormParams.append('FuelTankSize', <any>fuelTankSize) as any || localVarFormParams;
        }
        if (brakes !== undefined) {
            localVarFormParams = localVarFormParams.append('Brakes', <any>brakes) as any || localVarFormParams;
        }
        if (frontWheels !== undefined) {
            localVarFormParams = localVarFormParams.append('FrontWheels', <any>frontWheels) as any || localVarFormParams;
        }
        if (rearWheels !== undefined) {
            localVarFormParams = localVarFormParams.append('RearWheels', <any>rearWheels) as any || localVarFormParams;
        }
        if (transmissionModel !== undefined) {
            localVarFormParams = localVarFormParams.append('TransmissionModel', <any>transmissionModel) as any || localVarFormParams;
        }
        if (fuelType !== undefined) {
            localVarFormParams = localVarFormParams.append('FuelType', <any>fuelType) as any || localVarFormParams;
        }
        if (shifter !== undefined) {
            localVarFormParams = localVarFormParams.append('Shifter', <any>shifter) as any || localVarFormParams;
        }
        if (axles !== undefined) {
            localVarFormParams = localVarFormParams.append('Axles', <any>axles) as any || localVarFormParams;
        }
        if (insurancePolicy !== undefined) {
            localVarFormParams = localVarFormParams.append('InsurancePolicy', <any>insurancePolicy) as any || localVarFormParams;
        }
        if (mileage !== undefined) {
            localVarFormParams = localVarFormParams.append('Mileage', <any>mileage) as any || localVarFormParams;
        }
        if (wheelBase !== undefined) {
            localVarFormParams = localVarFormParams.append('WheelBase', <any>wheelBase) as any || localVarFormParams;
        }
        if (fhwaExp !== undefined) {
            localVarFormParams = localVarFormParams.append('FhwaExp', <any>fhwaExp) as any || localVarFormParams;
        }
        if (engineOilType !== undefined) {
            localVarFormParams = localVarFormParams.append('EngineOilType', <any>engineOilType) as any || localVarFormParams;
        }
        if (gearRatio !== undefined) {
            localVarFormParams = localVarFormParams.append('GearRatio', <any>gearRatio) as any || localVarFormParams;
        }
        if (apUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('ApUnit', <any>apUnit) as any || localVarFormParams;
        }
        if (tollTransponder !== undefined) {
            localVarFormParams = localVarFormParams.append('TollTransponder', <any>tollTransponder) as any || localVarFormParams;
        }
        if (tollTransponderDeviceNo !== undefined) {
            localVarFormParams = localVarFormParams.append('TollTransponderDeviceNo', <any>tollTransponderDeviceNo) as any || localVarFormParams;
        }
        if (doubleBunk !== undefined) {
            localVarFormParams = localVarFormParams.append('DoubleBunk', <any>doubleBunk) as any || localVarFormParams;
        }
        if (refrigerator !== undefined) {
            localVarFormParams = localVarFormParams.append('Refrigerator', <any>refrigerator) as any || localVarFormParams;
        }
        if (dcInverter !== undefined) {
            localVarFormParams = localVarFormParams.append('DcInverter', <any>dcInverter) as any || localVarFormParams;
        }
        if (headacheRack !== undefined) {
            localVarFormParams = localVarFormParams.append('HeadacheRack', <any>headacheRack) as any || localVarFormParams;
        }
        if (dashCam !== undefined) {
            localVarFormParams = localVarFormParams.append('DashCam', <any>dashCam) as any || localVarFormParams;
        }
        if (blower !== undefined) {
            localVarFormParams = localVarFormParams.append('Blower', <any>blower) as any || localVarFormParams;
        }
        if (pto !== undefined) {
            localVarFormParams = localVarFormParams.append('Pto', <any>pto) as any || localVarFormParams;
        }
        if (files) {
            files.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Files', <any>element) as any || localVarFormParams;
            })
        }
        if (tags) {
            tags.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Tags', <any>element) as any || localVarFormParams;
            })
        }
        if (filesForDeleteIds) {
            filesForDeleteIds.forEach((element) => {
                localVarFormParams = localVarFormParams.append('FilesForDeleteIds', <any>element) as any || localVarFormParams;
            })
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck`;
        return this.httpClient.request<CreateWithUploadsResponse>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param chartTimeDetailPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckRevenueGet(id?: number, chartTimeDetailPages?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TruckRevenueResponse>;
    public apiTruckRevenueGet(id?: number, chartTimeDetailPages?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TruckRevenueResponse>>;
    public apiTruckRevenueGet(id?: number, chartTimeDetailPages?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TruckRevenueResponse>>;
    public apiTruckRevenueGet(id?: number, chartTimeDetailPages?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'Id');
        }
        if (chartTimeDetailPages !== undefined && chartTimeDetailPages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chartTimeDetailPages, 'ChartTimeDetailPages');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/revenue`;
        return this.httpClient.request<TruckRevenueResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckStatusIdPut(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiTruckStatusIdPut(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiTruckStatusIdPut(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiTruckStatusIdPut(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiTruckStatusIdPut.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/status/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param multipleChangeTruckStatusCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiTruckStatusListPut(multipleChangeTruckStatusCommand?: MultipleChangeTruckStatusCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiTruckStatusListPut(multipleChangeTruckStatusCommand?: MultipleChangeTruckStatusCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiTruckStatusListPut(multipleChangeTruckStatusCommand?: MultipleChangeTruckStatusCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiTruckStatusListPut(multipleChangeTruckStatusCommand?: MultipleChangeTruckStatusCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/truck/status/list`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: multipleChangeTruckStatusCommand,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
