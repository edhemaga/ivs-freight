/**
 * Truckassist API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { BrokerAvailableCreditCommand } from '../model/brokerAvailableCreditCommand';
// @ts-ignore
import { BrokerAvailableCreditResponse } from '../model/brokerAvailableCreditResponse';
// @ts-ignore
import { BrokerByIdResponse } from '../model/brokerByIdResponse';
// @ts-ignore
import { BrokerContactCommand } from '../model/brokerContactCommand';
// @ts-ignore
import { BrokerFilterListResponse } from '../model/brokerFilterListResponse';
// @ts-ignore
import { BrokerInvoiceAgeingResponse } from '../model/brokerInvoiceAgeingResponse';
// @ts-ignore
import { BrokerLoadsResponse } from '../model/brokerLoadsResponse';
// @ts-ignore
import { BrokerMileageRateResponse } from '../model/brokerMileageRateResponse';
// @ts-ignore
import { BrokerMinimalListResponse } from '../model/brokerMinimalListResponse';
// @ts-ignore
import { BrokerModalResponse } from '../model/brokerModalResponse';
// @ts-ignore
import { BrokerPaidInvoiceResponse } from '../model/brokerPaidInvoiceResponse';
// @ts-ignore
import { BrokerPaymentHistoryResponse } from '../model/brokerPaymentHistoryResponse';
// @ts-ignore
import { CreateWithUploadsResponse } from '../model/createWithUploadsResponse';
// @ts-ignore
import { CreditType } from '../model/creditType';
// @ts-ignore
import { FileResponse } from '../model/fileResponse';
// @ts-ignore
import { GetBrokerListResponse } from '../model/getBrokerListResponse';
// @ts-ignore
import { LoadSortBy } from '../model/loadSortBy';
// @ts-ignore
import { MapMarkerListResponse } from '../model/mapMarkerListResponse';
// @ts-ignore
import { MultipleChangeBanFlagCommand } from '../model/multipleChangeBanFlagCommand';
// @ts-ignore
import { MultipleChangeDnuFlagCommand } from '../model/multipleChangeDnuFlagCommand';
// @ts-ignore
import { ProblemDetails } from '../model/problemDetails';
// @ts-ignore
import { SortOrder } from '../model/sortOrder';
// @ts-ignore
import { StatusSetMultipleBrokerCommand } from '../model/statusSetMultipleBrokerCommand';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class BrokerService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param brokerAvailableCreditCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerAvailablecreditPut(brokerAvailableCreditCommand?: BrokerAvailableCreditCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<BrokerAvailableCreditResponse>;
    public apiBrokerAvailablecreditPut(brokerAvailableCreditCommand?: BrokerAvailableCreditCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<BrokerAvailableCreditResponse>>;
    public apiBrokerAvailablecreditPut(brokerAvailableCreditCommand?: BrokerAvailableCreditCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<BrokerAvailableCreditResponse>>;
    public apiBrokerAvailablecreditPut(brokerAvailableCreditCommand?: BrokerAvailableCreditCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/availablecredit`;
        return this.httpClient.request<BrokerAvailableCreditResponse>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: brokerAvailableCreditCommand,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerBanIdPut(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiBrokerBanIdPut(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiBrokerBanIdPut(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiBrokerBanIdPut(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiBrokerBanIdPut.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/ban/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param multipleChangeBanFlagCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerBanListPut(multipleChangeBanFlagCommand?: MultipleChangeBanFlagCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiBrokerBanListPut(multipleChangeBanFlagCommand?: MultipleChangeBanFlagCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiBrokerBanListPut(multipleChangeBanFlagCommand?: MultipleChangeBanFlagCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiBrokerBanListPut(multipleChangeBanFlagCommand?: MultipleChangeBanFlagCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/ban/list`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: multipleChangeBanFlagCommand,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ein 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerCheckEinEinGet(ein: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<boolean>;
    public apiBrokerCheckEinEinGet(ein: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<boolean>>;
    public apiBrokerCheckEinEinGet(ein: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<boolean>>;
    public apiBrokerCheckEinEinGet(ein: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (ein === null || ein === undefined) {
            throw new Error('Required parameter ein was null or undefined when calling apiBrokerCheckEinEinGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/check/ein/${this.configuration.encodeParam({name: "ein", value: ein, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<boolean>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param mcNumber 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerCheckMcnumberMcNumberGet(mcNumber: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<boolean>;
    public apiBrokerCheckMcnumberMcNumberGet(mcNumber: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<boolean>>;
    public apiBrokerCheckMcnumberMcNumberGet(mcNumber: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<boolean>>;
    public apiBrokerCheckMcnumberMcNumberGet(mcNumber: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (mcNumber === null || mcNumber === undefined) {
            throw new Error('Required parameter mcNumber was null or undefined when calling apiBrokerCheckMcnumberMcNumberGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/check/mcnumber/${this.configuration.encodeParam({name: "mcNumber", value: mcNumber, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<boolean>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerCheckNameNameGet(name: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<boolean>;
    public apiBrokerCheckNameNameGet(name: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<boolean>>;
    public apiBrokerCheckNameNameGet(name: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<boolean>>;
    public apiBrokerCheckNameNameGet(name: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling apiBrokerCheckNameNameGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/check/name/${this.configuration.encodeParam({name: "name", value: name, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<boolean>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerContactIdDelete(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiBrokerContactIdDelete(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiBrokerContactIdDelete(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiBrokerContactIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiBrokerContactIdDelete.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/contact/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerDnuIdPut(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiBrokerDnuIdPut(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiBrokerDnuIdPut(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiBrokerDnuIdPut(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiBrokerDnuIdPut.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/dnu/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param multipleChangeDnuFlagCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerDnuListPut(multipleChangeDnuFlagCommand?: MultipleChangeDnuFlagCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiBrokerDnuListPut(multipleChangeDnuFlagCommand?: MultipleChangeDnuFlagCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiBrokerDnuListPut(multipleChangeDnuFlagCommand?: MultipleChangeDnuFlagCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiBrokerDnuListPut(multipleChangeDnuFlagCommand?: MultipleChangeDnuFlagCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/dnu/list`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: multipleChangeDnuFlagCommand,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerFilesIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<Array<FileResponse>>;
    public apiBrokerFilesIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<FileResponse>>>;
    public apiBrokerFilesIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<FileResponse>>>;
    public apiBrokerFilesIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiBrokerFilesIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/files/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<Array<FileResponse>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerFilterGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<BrokerFilterListResponse>;
    public apiBrokerFilterGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<BrokerFilterListResponse>>;
    public apiBrokerFilterGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<BrokerFilterListResponse>>;
    public apiBrokerFilterGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/filter`;
        return this.httpClient.request<BrokerFilterListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerIdDelete(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiBrokerIdDelete(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiBrokerIdDelete(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiBrokerIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiBrokerIdDelete.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<BrokerByIdResponse>;
    public apiBrokerIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<BrokerByIdResponse>>;
    public apiBrokerIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<BrokerByIdResponse>>;
    public apiBrokerIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiBrokerIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<BrokerByIdResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param brokerXls 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerImportPost(brokerXls?: Blob, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<object>;
    public apiBrokerImportPost(brokerXls?: Blob, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<object>>;
    public apiBrokerImportPost(brokerXls?: Blob, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<object>>;
    public apiBrokerImportPost(brokerXls?: Blob, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (brokerXls !== undefined) {
            localVarFormParams = localVarFormParams.append('BrokerXls', <any>brokerXls) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/import`;
        return this.httpClient.request<object>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param isPaid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerInvoiceageingGet(id?: number, isPaid?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<BrokerInvoiceAgeingResponse>;
    public apiBrokerInvoiceageingGet(id?: number, isPaid?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<BrokerInvoiceAgeingResponse>>;
    public apiBrokerInvoiceageingGet(id?: number, isPaid?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<BrokerInvoiceAgeingResponse>>;
    public apiBrokerInvoiceageingGet(id?: number, isPaid?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'Id');
        }
        if (isPaid !== undefined && isPaid !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isPaid, 'IsPaid');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/invoiceageing`;
        return this.httpClient.request<BrokerInvoiceAgeingResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ids 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerListDelete(ids?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiBrokerListDelete(ids?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiBrokerListDelete(ids?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiBrokerListDelete(ids?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ids) {
            ids.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'Ids');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/list`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ban 
     * @param dnu 
     * @param status 
     * @param invoiceAgeingFrom 
     * @param invoiceAgeingTo 
     * @param availableCreditFrom 
     * @param availableCreditTo 
     * @param revenueFrom 
     * @param revenueTo 
     * @param _long 
     * @param lat 
     * @param distance 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param sortOrder 
     * @param sortBy 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerListGet(ban?: number, dnu?: number, status?: number, invoiceAgeingFrom?: number, invoiceAgeingTo?: number, availableCreditFrom?: number, availableCreditTo?: number, revenueFrom?: number, revenueTo?: number, _long?: number, lat?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<GetBrokerListResponse>;
    public apiBrokerListGet(ban?: number, dnu?: number, status?: number, invoiceAgeingFrom?: number, invoiceAgeingTo?: number, availableCreditFrom?: number, availableCreditTo?: number, revenueFrom?: number, revenueTo?: number, _long?: number, lat?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<GetBrokerListResponse>>;
    public apiBrokerListGet(ban?: number, dnu?: number, status?: number, invoiceAgeingFrom?: number, invoiceAgeingTo?: number, availableCreditFrom?: number, availableCreditTo?: number, revenueFrom?: number, revenueTo?: number, _long?: number, lat?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<GetBrokerListResponse>>;
    public apiBrokerListGet(ban?: number, dnu?: number, status?: number, invoiceAgeingFrom?: number, invoiceAgeingTo?: number, availableCreditFrom?: number, availableCreditTo?: number, revenueFrom?: number, revenueTo?: number, _long?: number, lat?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ban !== undefined && ban !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ban, 'Ban');
        }
        if (dnu !== undefined && dnu !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dnu, 'Dnu');
        }
        if (status !== undefined && status !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>status, 'Status');
        }
        if (invoiceAgeingFrom !== undefined && invoiceAgeingFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>invoiceAgeingFrom, 'InvoiceAgeingFrom');
        }
        if (invoiceAgeingTo !== undefined && invoiceAgeingTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>invoiceAgeingTo, 'InvoiceAgeingTo');
        }
        if (availableCreditFrom !== undefined && availableCreditFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>availableCreditFrom, 'AvailableCreditFrom');
        }
        if (availableCreditTo !== undefined && availableCreditTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>availableCreditTo, 'AvailableCreditTo');
        }
        if (revenueFrom !== undefined && revenueFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>revenueFrom, 'RevenueFrom');
        }
        if (revenueTo !== undefined && revenueTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>revenueTo, 'RevenueTo');
        }
        if (_long !== undefined && _long !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>_long, 'Long');
        }
        if (lat !== undefined && lat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lat, 'Lat');
        }
        if (distance !== undefined && distance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>distance, 'Distance');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'SortOrder');
        }
        if (sortBy !== undefined && sortBy !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortBy, 'SortBy');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search2, 'Search2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/list`;
        return this.httpClient.request<GetBrokerListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<BrokerMinimalListResponse>;
    public apiBrokerListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<BrokerMinimalListResponse>>;
    public apiBrokerListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<BrokerMinimalListResponse>>;
    public apiBrokerListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/list/minimal`;
        return this.httpClient.request<BrokerMinimalListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param loadType 
     * @param statusType 
     * @param status 
     * @param dispatcherIds 
     * @param dispatcherId 
     * @param dispatchId 
     * @param brokerId 
     * @param shipperId 
     * @param loadId 
     * @param dateFrom 
     * @param dateTo 
     * @param revenueFrom 
     * @param revenueTo 
     * @param truckId 
     * @param rateFrom 
     * @param rateTo 
     * @param paidFrom 
     * @param paidTo 
     * @param dueFrom 
     * @param dueTo 
     * @param pickup 
     * @param delivery 
     * @param longitude 
     * @param latitude 
     * @param distance 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param sortOrder 
     * @param sortBy 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerLoadsGet(loadType?: number, statusType?: number, status?: Array<number>, dispatcherIds?: Array<number>, dispatcherId?: number, dispatchId?: number, brokerId?: number, shipperId?: number, loadId?: number, dateFrom?: string, dateTo?: string, revenueFrom?: number, revenueTo?: number, truckId?: number, rateFrom?: number, rateTo?: number, paidFrom?: number, paidTo?: number, dueFrom?: number, dueTo?: number, pickup?: boolean, delivery?: boolean, longitude?: number, latitude?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: LoadSortBy, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<BrokerLoadsResponse>;
    public apiBrokerLoadsGet(loadType?: number, statusType?: number, status?: Array<number>, dispatcherIds?: Array<number>, dispatcherId?: number, dispatchId?: number, brokerId?: number, shipperId?: number, loadId?: number, dateFrom?: string, dateTo?: string, revenueFrom?: number, revenueTo?: number, truckId?: number, rateFrom?: number, rateTo?: number, paidFrom?: number, paidTo?: number, dueFrom?: number, dueTo?: number, pickup?: boolean, delivery?: boolean, longitude?: number, latitude?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: LoadSortBy, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<BrokerLoadsResponse>>;
    public apiBrokerLoadsGet(loadType?: number, statusType?: number, status?: Array<number>, dispatcherIds?: Array<number>, dispatcherId?: number, dispatchId?: number, brokerId?: number, shipperId?: number, loadId?: number, dateFrom?: string, dateTo?: string, revenueFrom?: number, revenueTo?: number, truckId?: number, rateFrom?: number, rateTo?: number, paidFrom?: number, paidTo?: number, dueFrom?: number, dueTo?: number, pickup?: boolean, delivery?: boolean, longitude?: number, latitude?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: LoadSortBy, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<BrokerLoadsResponse>>;
    public apiBrokerLoadsGet(loadType?: number, statusType?: number, status?: Array<number>, dispatcherIds?: Array<number>, dispatcherId?: number, dispatchId?: number, brokerId?: number, shipperId?: number, loadId?: number, dateFrom?: string, dateTo?: string, revenueFrom?: number, revenueTo?: number, truckId?: number, rateFrom?: number, rateTo?: number, paidFrom?: number, paidTo?: number, dueFrom?: number, dueTo?: number, pickup?: boolean, delivery?: boolean, longitude?: number, latitude?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: LoadSortBy, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (loadType !== undefined && loadType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>loadType, 'LoadType');
        }
        if (statusType !== undefined && statusType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>statusType, 'StatusType');
        }
        if (status) {
            status.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'Status');
            })
        }
        if (dispatcherIds) {
            dispatcherIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'DispatcherIds');
            })
        }
        if (dispatcherId !== undefined && dispatcherId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dispatcherId, 'DispatcherId');
        }
        if (dispatchId !== undefined && dispatchId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dispatchId, 'DispatchId');
        }
        if (brokerId !== undefined && brokerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>brokerId, 'BrokerId');
        }
        if (shipperId !== undefined && shipperId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>shipperId, 'ShipperId');
        }
        if (loadId !== undefined && loadId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>loadId, 'LoadId');
        }
        if (dateFrom !== undefined && dateFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateFrom, 'DateFrom');
        }
        if (dateTo !== undefined && dateTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateTo, 'DateTo');
        }
        if (revenueFrom !== undefined && revenueFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>revenueFrom, 'RevenueFrom');
        }
        if (revenueTo !== undefined && revenueTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>revenueTo, 'RevenueTo');
        }
        if (truckId !== undefined && truckId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>truckId, 'TruckId');
        }
        if (rateFrom !== undefined && rateFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rateFrom, 'RateFrom');
        }
        if (rateTo !== undefined && rateTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rateTo, 'RateTo');
        }
        if (paidFrom !== undefined && paidFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>paidFrom, 'PaidFrom');
        }
        if (paidTo !== undefined && paidTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>paidTo, 'PaidTo');
        }
        if (dueFrom !== undefined && dueFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dueFrom, 'DueFrom');
        }
        if (dueTo !== undefined && dueTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dueTo, 'DueTo');
        }
        if (pickup !== undefined && pickup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pickup, 'Pickup');
        }
        if (delivery !== undefined && delivery !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>delivery, 'Delivery');
        }
        if (longitude !== undefined && longitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>longitude, 'Longitude');
        }
        if (latitude !== undefined && latitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>latitude, 'Latitude');
        }
        if (distance !== undefined && distance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>distance, 'Distance');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'SortOrder');
        }
        if (sortBy !== undefined && sortBy !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortBy, 'SortBy');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search2, 'Search2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/loads`;
        return this.httpClient.request<BrokerLoadsResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerMapGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<MapMarkerListResponse>;
    public apiBrokerMapGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<MapMarkerListResponse>>;
    public apiBrokerMapGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<MapMarkerListResponse>>;
    public apiBrokerMapGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/map`;
        return this.httpClient.request<MapMarkerListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param chartTimeDetailPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerMileageratehistoryGet(id?: number, chartTimeDetailPages?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<BrokerMileageRateResponse>;
    public apiBrokerMileageratehistoryGet(id?: number, chartTimeDetailPages?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<BrokerMileageRateResponse>>;
    public apiBrokerMileageratehistoryGet(id?: number, chartTimeDetailPages?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<BrokerMileageRateResponse>>;
    public apiBrokerMileageratehistoryGet(id?: number, chartTimeDetailPages?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'Id');
        }
        if (chartTimeDetailPages !== undefined && chartTimeDetailPages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chartTimeDetailPages, 'ChartTimeDetailPages');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/mileageratehistory`;
        return this.httpClient.request<BrokerMileageRateResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerModalGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<BrokerModalResponse>;
    public apiBrokerModalGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<BrokerModalResponse>>;
    public apiBrokerModalGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<BrokerModalResponse>>;
    public apiBrokerModalGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/modal`;
        return this.httpClient.request<BrokerModalResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param chartTimeDetailPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerPaidinvoiceGet(id?: number, chartTimeDetailPages?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<BrokerPaidInvoiceResponse>;
    public apiBrokerPaidinvoiceGet(id?: number, chartTimeDetailPages?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<BrokerPaidInvoiceResponse>>;
    public apiBrokerPaidinvoiceGet(id?: number, chartTimeDetailPages?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<BrokerPaidInvoiceResponse>>;
    public apiBrokerPaidinvoiceGet(id?: number, chartTimeDetailPages?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'Id');
        }
        if (chartTimeDetailPages !== undefined && chartTimeDetailPages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chartTimeDetailPages, 'ChartTimeDetailPages');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/paidinvoice`;
        return this.httpClient.request<BrokerPaidInvoiceResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param chartTimeDetailPages 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerPaymenthistoryGet(id?: number, chartTimeDetailPages?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<BrokerPaymentHistoryResponse>;
    public apiBrokerPaymenthistoryGet(id?: number, chartTimeDetailPages?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<BrokerPaymentHistoryResponse>>;
    public apiBrokerPaymenthistoryGet(id?: number, chartTimeDetailPages?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<BrokerPaymentHistoryResponse>>;
    public apiBrokerPaymenthistoryGet(id?: number, chartTimeDetailPages?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'Id');
        }
        if (chartTimeDetailPages !== undefined && chartTimeDetailPages !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>chartTimeDetailPages, 'ChartTimeDetailPages');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/paymenthistory`;
        return this.httpClient.request<BrokerPaymentHistoryResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param businessName 
     * @param dbaName 
     * @param mcNumber 
     * @param ein 
     * @param email 
     * @param phone 
     * @param mainAddressCity 
     * @param mainAddressState 
     * @param mainAddressCounty 
     * @param mainAddressAddress 
     * @param mainAddressStreet 
     * @param mainAddressStreetNumber 
     * @param mainAddressCountry 
     * @param mainAddressZipCode 
     * @param mainAddressStateShortName 
     * @param mainAddressAddressUnit 
     * @param billingAddressCity 
     * @param billingAddressState 
     * @param billingAddressCounty 
     * @param billingAddressAddress 
     * @param billingAddressStreet 
     * @param billingAddressStreetNumber 
     * @param billingAddressCountry 
     * @param billingAddressZipCode 
     * @param billingAddressStateShortName 
     * @param billingAddressAddressUnit 
     * @param mainPoBoxCity 
     * @param mainPoBoxState 
     * @param mainPoBoxZipCode 
     * @param mainPoBoxPoBox 
     * @param billingPoBoxCity 
     * @param billingPoBoxState 
     * @param billingPoBoxZipCode 
     * @param billingPoBoxPoBox 
     * @param isCheckedBillingAddress 
     * @param isCredit 
     * @param creditType 
     * @param creditLimit 
     * @param availableCredit 
     * @param payTerm 
     * @param note 
     * @param longitude 
     * @param latitude 
     * @param brokerContacts 
     * @param files 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerPost(businessName?: string, dbaName?: string, mcNumber?: string, ein?: string, email?: string, phone?: string, mainAddressCity?: string, mainAddressState?: string, mainAddressCounty?: string, mainAddressAddress?: string, mainAddressStreet?: string, mainAddressStreetNumber?: string, mainAddressCountry?: string, mainAddressZipCode?: string, mainAddressStateShortName?: string, mainAddressAddressUnit?: string, billingAddressCity?: string, billingAddressState?: string, billingAddressCounty?: string, billingAddressAddress?: string, billingAddressStreet?: string, billingAddressStreetNumber?: string, billingAddressCountry?: string, billingAddressZipCode?: string, billingAddressStateShortName?: string, billingAddressAddressUnit?: string, mainPoBoxCity?: string, mainPoBoxState?: string, mainPoBoxZipCode?: string, mainPoBoxPoBox?: string, billingPoBoxCity?: string, billingPoBoxState?: string, billingPoBoxZipCode?: string, billingPoBoxPoBox?: string, isCheckedBillingAddress?: boolean, isCredit?: boolean, creditType?: CreditType, creditLimit?: number, availableCredit?: number, payTerm?: number, note?: string, longitude?: number, latitude?: number, brokerContacts?: Array<BrokerContactCommand>, files?: Array<Blob>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<CreateWithUploadsResponse>;
    public apiBrokerPost(businessName?: string, dbaName?: string, mcNumber?: string, ein?: string, email?: string, phone?: string, mainAddressCity?: string, mainAddressState?: string, mainAddressCounty?: string, mainAddressAddress?: string, mainAddressStreet?: string, mainAddressStreetNumber?: string, mainAddressCountry?: string, mainAddressZipCode?: string, mainAddressStateShortName?: string, mainAddressAddressUnit?: string, billingAddressCity?: string, billingAddressState?: string, billingAddressCounty?: string, billingAddressAddress?: string, billingAddressStreet?: string, billingAddressStreetNumber?: string, billingAddressCountry?: string, billingAddressZipCode?: string, billingAddressStateShortName?: string, billingAddressAddressUnit?: string, mainPoBoxCity?: string, mainPoBoxState?: string, mainPoBoxZipCode?: string, mainPoBoxPoBox?: string, billingPoBoxCity?: string, billingPoBoxState?: string, billingPoBoxZipCode?: string, billingPoBoxPoBox?: string, isCheckedBillingAddress?: boolean, isCredit?: boolean, creditType?: CreditType, creditLimit?: number, availableCredit?: number, payTerm?: number, note?: string, longitude?: number, latitude?: number, brokerContacts?: Array<BrokerContactCommand>, files?: Array<Blob>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<CreateWithUploadsResponse>>;
    public apiBrokerPost(businessName?: string, dbaName?: string, mcNumber?: string, ein?: string, email?: string, phone?: string, mainAddressCity?: string, mainAddressState?: string, mainAddressCounty?: string, mainAddressAddress?: string, mainAddressStreet?: string, mainAddressStreetNumber?: string, mainAddressCountry?: string, mainAddressZipCode?: string, mainAddressStateShortName?: string, mainAddressAddressUnit?: string, billingAddressCity?: string, billingAddressState?: string, billingAddressCounty?: string, billingAddressAddress?: string, billingAddressStreet?: string, billingAddressStreetNumber?: string, billingAddressCountry?: string, billingAddressZipCode?: string, billingAddressStateShortName?: string, billingAddressAddressUnit?: string, mainPoBoxCity?: string, mainPoBoxState?: string, mainPoBoxZipCode?: string, mainPoBoxPoBox?: string, billingPoBoxCity?: string, billingPoBoxState?: string, billingPoBoxZipCode?: string, billingPoBoxPoBox?: string, isCheckedBillingAddress?: boolean, isCredit?: boolean, creditType?: CreditType, creditLimit?: number, availableCredit?: number, payTerm?: number, note?: string, longitude?: number, latitude?: number, brokerContacts?: Array<BrokerContactCommand>, files?: Array<Blob>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<CreateWithUploadsResponse>>;
    public apiBrokerPost(businessName?: string, dbaName?: string, mcNumber?: string, ein?: string, email?: string, phone?: string, mainAddressCity?: string, mainAddressState?: string, mainAddressCounty?: string, mainAddressAddress?: string, mainAddressStreet?: string, mainAddressStreetNumber?: string, mainAddressCountry?: string, mainAddressZipCode?: string, mainAddressStateShortName?: string, mainAddressAddressUnit?: string, billingAddressCity?: string, billingAddressState?: string, billingAddressCounty?: string, billingAddressAddress?: string, billingAddressStreet?: string, billingAddressStreetNumber?: string, billingAddressCountry?: string, billingAddressZipCode?: string, billingAddressStateShortName?: string, billingAddressAddressUnit?: string, mainPoBoxCity?: string, mainPoBoxState?: string, mainPoBoxZipCode?: string, mainPoBoxPoBox?: string, billingPoBoxCity?: string, billingPoBoxState?: string, billingPoBoxZipCode?: string, billingPoBoxPoBox?: string, isCheckedBillingAddress?: boolean, isCredit?: boolean, creditType?: CreditType, creditLimit?: number, availableCredit?: number, payTerm?: number, note?: string, longitude?: number, latitude?: number, brokerContacts?: Array<BrokerContactCommand>, files?: Array<Blob>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (businessName !== undefined) {
            localVarFormParams = localVarFormParams.append('BusinessName', <any>businessName) as any || localVarFormParams;
        }
        if (dbaName !== undefined) {
            localVarFormParams = localVarFormParams.append('DbaName', <any>dbaName) as any || localVarFormParams;
        }
        if (mcNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('McNumber', <any>mcNumber) as any || localVarFormParams;
        }
        if (ein !== undefined) {
            localVarFormParams = localVarFormParams.append('Ein', <any>ein) as any || localVarFormParams;
        }
        if (email !== undefined) {
            localVarFormParams = localVarFormParams.append('Email', <any>email) as any || localVarFormParams;
        }
        if (phone !== undefined) {
            localVarFormParams = localVarFormParams.append('Phone', <any>phone) as any || localVarFormParams;
        }
        if (mainAddressCity !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.City', <any>mainAddressCity) as any || localVarFormParams;
        }
        if (mainAddressState !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.State', <any>mainAddressState) as any || localVarFormParams;
        }
        if (mainAddressCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.County', <any>mainAddressCounty) as any || localVarFormParams;
        }
        if (mainAddressAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.Address', <any>mainAddressAddress) as any || localVarFormParams;
        }
        if (mainAddressStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.Street', <any>mainAddressStreet) as any || localVarFormParams;
        }
        if (mainAddressStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.StreetNumber', <any>mainAddressStreetNumber) as any || localVarFormParams;
        }
        if (mainAddressCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.Country', <any>mainAddressCountry) as any || localVarFormParams;
        }
        if (mainAddressZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.ZipCode', <any>mainAddressZipCode) as any || localVarFormParams;
        }
        if (mainAddressStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.StateShortName', <any>mainAddressStateShortName) as any || localVarFormParams;
        }
        if (mainAddressAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.AddressUnit', <any>mainAddressAddressUnit) as any || localVarFormParams;
        }
        if (billingAddressCity !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.City', <any>billingAddressCity) as any || localVarFormParams;
        }
        if (billingAddressState !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.State', <any>billingAddressState) as any || localVarFormParams;
        }
        if (billingAddressCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.County', <any>billingAddressCounty) as any || localVarFormParams;
        }
        if (billingAddressAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.Address', <any>billingAddressAddress) as any || localVarFormParams;
        }
        if (billingAddressStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.Street', <any>billingAddressStreet) as any || localVarFormParams;
        }
        if (billingAddressStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.StreetNumber', <any>billingAddressStreetNumber) as any || localVarFormParams;
        }
        if (billingAddressCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.Country', <any>billingAddressCountry) as any || localVarFormParams;
        }
        if (billingAddressZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.ZipCode', <any>billingAddressZipCode) as any || localVarFormParams;
        }
        if (billingAddressStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.StateShortName', <any>billingAddressStateShortName) as any || localVarFormParams;
        }
        if (billingAddressAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.AddressUnit', <any>billingAddressAddressUnit) as any || localVarFormParams;
        }
        if (mainPoBoxCity !== undefined) {
            localVarFormParams = localVarFormParams.append('MainPoBox.City', <any>mainPoBoxCity) as any || localVarFormParams;
        }
        if (mainPoBoxState !== undefined) {
            localVarFormParams = localVarFormParams.append('MainPoBox.State', <any>mainPoBoxState) as any || localVarFormParams;
        }
        if (mainPoBoxZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('MainPoBox.ZipCode', <any>mainPoBoxZipCode) as any || localVarFormParams;
        }
        if (mainPoBoxPoBox !== undefined) {
            localVarFormParams = localVarFormParams.append('MainPoBox.PoBox', <any>mainPoBoxPoBox) as any || localVarFormParams;
        }
        if (billingPoBoxCity !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingPoBox.City', <any>billingPoBoxCity) as any || localVarFormParams;
        }
        if (billingPoBoxState !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingPoBox.State', <any>billingPoBoxState) as any || localVarFormParams;
        }
        if (billingPoBoxZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingPoBox.ZipCode', <any>billingPoBoxZipCode) as any || localVarFormParams;
        }
        if (billingPoBoxPoBox !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingPoBox.PoBox', <any>billingPoBoxPoBox) as any || localVarFormParams;
        }
        if (isCheckedBillingAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('IsCheckedBillingAddress', <any>isCheckedBillingAddress) as any || localVarFormParams;
        }
        if (isCredit !== undefined) {
            localVarFormParams = localVarFormParams.append('IsCredit', <any>isCredit) as any || localVarFormParams;
        }
        if (creditType !== undefined) {
            localVarFormParams = localVarFormParams.append('CreditType', <any>creditType) as any || localVarFormParams;
        }
        if (creditLimit !== undefined) {
            localVarFormParams = localVarFormParams.append('CreditLimit', <any>creditLimit) as any || localVarFormParams;
        }
        if (availableCredit !== undefined) {
            localVarFormParams = localVarFormParams.append('AvailableCredit', <any>availableCredit) as any || localVarFormParams;
        }
        if (payTerm !== undefined) {
            localVarFormParams = localVarFormParams.append('PayTerm', <any>payTerm) as any || localVarFormParams;
        }
        if (note !== undefined) {
            localVarFormParams = localVarFormParams.append('Note', <any>note) as any || localVarFormParams;
        }
        if (longitude !== undefined) {
            localVarFormParams = localVarFormParams.append('Longitude', <any>longitude) as any || localVarFormParams;
        }
        if (latitude !== undefined) {
            localVarFormParams = localVarFormParams.append('Latitude', <any>latitude) as any || localVarFormParams;
        }
        if (brokerContacts) {
            brokerContacts.forEach((element) => {
                localVarFormParams = localVarFormParams.append('BrokerContacts', <any>element) as any || localVarFormParams;
            })
        }
        if (files) {
            files.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Files', <any>element) as any || localVarFormParams;
            })
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker`;
        return this.httpClient.request<CreateWithUploadsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param businessName 
     * @param dbaName 
     * @param mcNumber 
     * @param ein 
     * @param email 
     * @param phone 
     * @param mainAddressCity 
     * @param mainAddressState 
     * @param mainAddressCounty 
     * @param mainAddressAddress 
     * @param mainAddressStreet 
     * @param mainAddressStreetNumber 
     * @param mainAddressCountry 
     * @param mainAddressZipCode 
     * @param mainAddressStateShortName 
     * @param mainAddressAddressUnit 
     * @param billingAddressCity 
     * @param billingAddressState 
     * @param billingAddressCounty 
     * @param billingAddressAddress 
     * @param billingAddressStreet 
     * @param billingAddressStreetNumber 
     * @param billingAddressCountry 
     * @param billingAddressZipCode 
     * @param billingAddressStateShortName 
     * @param billingAddressAddressUnit 
     * @param mainPoBoxCity 
     * @param mainPoBoxState 
     * @param mainPoBoxZipCode 
     * @param mainPoBoxPoBox 
     * @param billingPoBoxCity 
     * @param billingPoBoxState 
     * @param billingPoBoxZipCode 
     * @param billingPoBoxPoBox 
     * @param creditLimit 
     * @param availableCredit 
     * @param creditType 
     * @param payTerm 
     * @param note 
     * @param isCheckedBillingAddress 
     * @param longitude 
     * @param latitude 
     * @param brokerContacts 
     * @param files 
     * @param filesForDeleteIds 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerPut(id?: number, businessName?: string, dbaName?: string, mcNumber?: string, ein?: string, email?: string, phone?: string, mainAddressCity?: string, mainAddressState?: string, mainAddressCounty?: string, mainAddressAddress?: string, mainAddressStreet?: string, mainAddressStreetNumber?: string, mainAddressCountry?: string, mainAddressZipCode?: string, mainAddressStateShortName?: string, mainAddressAddressUnit?: string, billingAddressCity?: string, billingAddressState?: string, billingAddressCounty?: string, billingAddressAddress?: string, billingAddressStreet?: string, billingAddressStreetNumber?: string, billingAddressCountry?: string, billingAddressZipCode?: string, billingAddressStateShortName?: string, billingAddressAddressUnit?: string, mainPoBoxCity?: string, mainPoBoxState?: string, mainPoBoxZipCode?: string, mainPoBoxPoBox?: string, billingPoBoxCity?: string, billingPoBoxState?: string, billingPoBoxZipCode?: string, billingPoBoxPoBox?: string, creditLimit?: number, availableCredit?: number, creditType?: CreditType, payTerm?: number, note?: string, isCheckedBillingAddress?: boolean, longitude?: number, latitude?: number, brokerContacts?: Array<BrokerContactCommand>, files?: Array<Blob>, filesForDeleteIds?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<CreateWithUploadsResponse>;
    public apiBrokerPut(id?: number, businessName?: string, dbaName?: string, mcNumber?: string, ein?: string, email?: string, phone?: string, mainAddressCity?: string, mainAddressState?: string, mainAddressCounty?: string, mainAddressAddress?: string, mainAddressStreet?: string, mainAddressStreetNumber?: string, mainAddressCountry?: string, mainAddressZipCode?: string, mainAddressStateShortName?: string, mainAddressAddressUnit?: string, billingAddressCity?: string, billingAddressState?: string, billingAddressCounty?: string, billingAddressAddress?: string, billingAddressStreet?: string, billingAddressStreetNumber?: string, billingAddressCountry?: string, billingAddressZipCode?: string, billingAddressStateShortName?: string, billingAddressAddressUnit?: string, mainPoBoxCity?: string, mainPoBoxState?: string, mainPoBoxZipCode?: string, mainPoBoxPoBox?: string, billingPoBoxCity?: string, billingPoBoxState?: string, billingPoBoxZipCode?: string, billingPoBoxPoBox?: string, creditLimit?: number, availableCredit?: number, creditType?: CreditType, payTerm?: number, note?: string, isCheckedBillingAddress?: boolean, longitude?: number, latitude?: number, brokerContacts?: Array<BrokerContactCommand>, files?: Array<Blob>, filesForDeleteIds?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<CreateWithUploadsResponse>>;
    public apiBrokerPut(id?: number, businessName?: string, dbaName?: string, mcNumber?: string, ein?: string, email?: string, phone?: string, mainAddressCity?: string, mainAddressState?: string, mainAddressCounty?: string, mainAddressAddress?: string, mainAddressStreet?: string, mainAddressStreetNumber?: string, mainAddressCountry?: string, mainAddressZipCode?: string, mainAddressStateShortName?: string, mainAddressAddressUnit?: string, billingAddressCity?: string, billingAddressState?: string, billingAddressCounty?: string, billingAddressAddress?: string, billingAddressStreet?: string, billingAddressStreetNumber?: string, billingAddressCountry?: string, billingAddressZipCode?: string, billingAddressStateShortName?: string, billingAddressAddressUnit?: string, mainPoBoxCity?: string, mainPoBoxState?: string, mainPoBoxZipCode?: string, mainPoBoxPoBox?: string, billingPoBoxCity?: string, billingPoBoxState?: string, billingPoBoxZipCode?: string, billingPoBoxPoBox?: string, creditLimit?: number, availableCredit?: number, creditType?: CreditType, payTerm?: number, note?: string, isCheckedBillingAddress?: boolean, longitude?: number, latitude?: number, brokerContacts?: Array<BrokerContactCommand>, files?: Array<Blob>, filesForDeleteIds?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<CreateWithUploadsResponse>>;
    public apiBrokerPut(id?: number, businessName?: string, dbaName?: string, mcNumber?: string, ein?: string, email?: string, phone?: string, mainAddressCity?: string, mainAddressState?: string, mainAddressCounty?: string, mainAddressAddress?: string, mainAddressStreet?: string, mainAddressStreetNumber?: string, mainAddressCountry?: string, mainAddressZipCode?: string, mainAddressStateShortName?: string, mainAddressAddressUnit?: string, billingAddressCity?: string, billingAddressState?: string, billingAddressCounty?: string, billingAddressAddress?: string, billingAddressStreet?: string, billingAddressStreetNumber?: string, billingAddressCountry?: string, billingAddressZipCode?: string, billingAddressStateShortName?: string, billingAddressAddressUnit?: string, mainPoBoxCity?: string, mainPoBoxState?: string, mainPoBoxZipCode?: string, mainPoBoxPoBox?: string, billingPoBoxCity?: string, billingPoBoxState?: string, billingPoBoxZipCode?: string, billingPoBoxPoBox?: string, creditLimit?: number, availableCredit?: number, creditType?: CreditType, payTerm?: number, note?: string, isCheckedBillingAddress?: boolean, longitude?: number, latitude?: number, brokerContacts?: Array<BrokerContactCommand>, files?: Array<Blob>, filesForDeleteIds?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (id !== undefined) {
            localVarFormParams = localVarFormParams.append('Id', <any>id) as any || localVarFormParams;
        }
        if (businessName !== undefined) {
            localVarFormParams = localVarFormParams.append('BusinessName', <any>businessName) as any || localVarFormParams;
        }
        if (dbaName !== undefined) {
            localVarFormParams = localVarFormParams.append('DbaName', <any>dbaName) as any || localVarFormParams;
        }
        if (mcNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('McNumber', <any>mcNumber) as any || localVarFormParams;
        }
        if (ein !== undefined) {
            localVarFormParams = localVarFormParams.append('Ein', <any>ein) as any || localVarFormParams;
        }
        if (email !== undefined) {
            localVarFormParams = localVarFormParams.append('Email', <any>email) as any || localVarFormParams;
        }
        if (phone !== undefined) {
            localVarFormParams = localVarFormParams.append('Phone', <any>phone) as any || localVarFormParams;
        }
        if (mainAddressCity !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.City', <any>mainAddressCity) as any || localVarFormParams;
        }
        if (mainAddressState !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.State', <any>mainAddressState) as any || localVarFormParams;
        }
        if (mainAddressCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.County', <any>mainAddressCounty) as any || localVarFormParams;
        }
        if (mainAddressAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.Address', <any>mainAddressAddress) as any || localVarFormParams;
        }
        if (mainAddressStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.Street', <any>mainAddressStreet) as any || localVarFormParams;
        }
        if (mainAddressStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.StreetNumber', <any>mainAddressStreetNumber) as any || localVarFormParams;
        }
        if (mainAddressCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.Country', <any>mainAddressCountry) as any || localVarFormParams;
        }
        if (mainAddressZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.ZipCode', <any>mainAddressZipCode) as any || localVarFormParams;
        }
        if (mainAddressStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.StateShortName', <any>mainAddressStateShortName) as any || localVarFormParams;
        }
        if (mainAddressAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('MainAddress.AddressUnit', <any>mainAddressAddressUnit) as any || localVarFormParams;
        }
        if (billingAddressCity !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.City', <any>billingAddressCity) as any || localVarFormParams;
        }
        if (billingAddressState !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.State', <any>billingAddressState) as any || localVarFormParams;
        }
        if (billingAddressCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.County', <any>billingAddressCounty) as any || localVarFormParams;
        }
        if (billingAddressAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.Address', <any>billingAddressAddress) as any || localVarFormParams;
        }
        if (billingAddressStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.Street', <any>billingAddressStreet) as any || localVarFormParams;
        }
        if (billingAddressStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.StreetNumber', <any>billingAddressStreetNumber) as any || localVarFormParams;
        }
        if (billingAddressCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.Country', <any>billingAddressCountry) as any || localVarFormParams;
        }
        if (billingAddressZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.ZipCode', <any>billingAddressZipCode) as any || localVarFormParams;
        }
        if (billingAddressStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.StateShortName', <any>billingAddressStateShortName) as any || localVarFormParams;
        }
        if (billingAddressAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingAddress.AddressUnit', <any>billingAddressAddressUnit) as any || localVarFormParams;
        }
        if (mainPoBoxCity !== undefined) {
            localVarFormParams = localVarFormParams.append('MainPoBox.City', <any>mainPoBoxCity) as any || localVarFormParams;
        }
        if (mainPoBoxState !== undefined) {
            localVarFormParams = localVarFormParams.append('MainPoBox.State', <any>mainPoBoxState) as any || localVarFormParams;
        }
        if (mainPoBoxZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('MainPoBox.ZipCode', <any>mainPoBoxZipCode) as any || localVarFormParams;
        }
        if (mainPoBoxPoBox !== undefined) {
            localVarFormParams = localVarFormParams.append('MainPoBox.PoBox', <any>mainPoBoxPoBox) as any || localVarFormParams;
        }
        if (billingPoBoxCity !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingPoBox.City', <any>billingPoBoxCity) as any || localVarFormParams;
        }
        if (billingPoBoxState !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingPoBox.State', <any>billingPoBoxState) as any || localVarFormParams;
        }
        if (billingPoBoxZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingPoBox.ZipCode', <any>billingPoBoxZipCode) as any || localVarFormParams;
        }
        if (billingPoBoxPoBox !== undefined) {
            localVarFormParams = localVarFormParams.append('BillingPoBox.PoBox', <any>billingPoBoxPoBox) as any || localVarFormParams;
        }
        if (creditLimit !== undefined) {
            localVarFormParams = localVarFormParams.append('CreditLimit', <any>creditLimit) as any || localVarFormParams;
        }
        if (availableCredit !== undefined) {
            localVarFormParams = localVarFormParams.append('AvailableCredit', <any>availableCredit) as any || localVarFormParams;
        }
        if (creditType !== undefined) {
            localVarFormParams = localVarFormParams.append('CreditType', <any>creditType) as any || localVarFormParams;
        }
        if (payTerm !== undefined) {
            localVarFormParams = localVarFormParams.append('PayTerm', <any>payTerm) as any || localVarFormParams;
        }
        if (note !== undefined) {
            localVarFormParams = localVarFormParams.append('Note', <any>note) as any || localVarFormParams;
        }
        if (isCheckedBillingAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('IsCheckedBillingAddress', <any>isCheckedBillingAddress) as any || localVarFormParams;
        }
        if (longitude !== undefined) {
            localVarFormParams = localVarFormParams.append('Longitude', <any>longitude) as any || localVarFormParams;
        }
        if (latitude !== undefined) {
            localVarFormParams = localVarFormParams.append('Latitude', <any>latitude) as any || localVarFormParams;
        }
        if (brokerContacts) {
            brokerContacts.forEach((element) => {
                localVarFormParams = localVarFormParams.append('BrokerContacts', <any>element) as any || localVarFormParams;
            })
        }
        if (files) {
            files.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Files', <any>element) as any || localVarFormParams;
            })
        }
        if (filesForDeleteIds) {
            filesForDeleteIds.forEach((element) => {
                localVarFormParams = localVarFormParams.append('FilesForDeleteIds', <any>element) as any || localVarFormParams;
            })
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker`;
        return this.httpClient.request<CreateWithUploadsResponse>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerStatusIdPut(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiBrokerStatusIdPut(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiBrokerStatusIdPut(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiBrokerStatusIdPut(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiBrokerStatusIdPut.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/status/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param statusSetMultipleBrokerCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBrokerStatusListPut(statusSetMultipleBrokerCommand?: StatusSetMultipleBrokerCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiBrokerStatusListPut(statusSetMultipleBrokerCommand?: StatusSetMultipleBrokerCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiBrokerStatusListPut(statusSetMultipleBrokerCommand?: StatusSetMultipleBrokerCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiBrokerStatusListPut(statusSetMultipleBrokerCommand?: StatusSetMultipleBrokerCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/broker/status/list`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: statusSetMultipleBrokerCommand,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
