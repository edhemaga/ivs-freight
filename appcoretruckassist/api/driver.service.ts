/**
 * Truckassist API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { CreateOffDutyLocationCommand } from 'appcoretruckassist/model/createOffDutyLocationCommand';
import { CreateWithUploadsResponse } from '../model/models';
import { DriverListResponse } from '../model/models';
import { DriverMinimalListResponse } from '../model/models';
import { DriverResponse } from '../model/models';
import { FileResponse } from '../model/models';
import { FleetType } from '../model/models';
import { GetDriverModalResponse } from '../model/models';
import { OwnerType } from 'appcoretruckassist/model/ownerType';
import { ProblemDetails } from '../model/models';
import { StatusSetMultipleDriverCommand } from '../model/models';
import { UpdateOffDutyLocationCommand } from 'appcoretruckassist/model/updateOffDutyLocationCommand';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class DriverService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param email 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverCheckEmailEmailGet(email: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<boolean>;
    public apiDriverCheckEmailEmailGet(email: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<boolean>>;
    public apiDriverCheckEmailEmailGet(email: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<boolean>>;
    public apiDriverCheckEmailEmailGet(email: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling apiDriverCheckEmailEmailGet.');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<boolean>(`${this.configuration.basePath}/api/driver/check/email/${encodeURIComponent(String(email))}`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ssn 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverCheckSsnSsnGet(ssn: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<boolean>;
    public apiDriverCheckSsnSsnGet(ssn: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<boolean>>;
    public apiDriverCheckSsnSsnGet(ssn: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<boolean>>;
    public apiDriverCheckSsnSsnGet(ssn: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {
        if (ssn === null || ssn === undefined) {
            throw new Error('Required parameter ssn was null or undefined when calling apiDriverCheckSsnSsnGet.');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<boolean>(`${this.configuration.basePath}/api/driver/check/ssn/${encodeURIComponent(String(ssn))}`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverFilesIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<Array<FileResponse>>;
    public apiDriverFilesIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<Array<FileResponse>>>;
    public apiDriverFilesIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<Array<FileResponse>>>;
    public apiDriverFilesIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiDriverFilesIdGet.');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<FileResponse>>(`${this.configuration.basePath}/api/driver/files/${encodeURIComponent(String(id))}`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverIdDelete(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any>;
    public apiDriverIdDelete(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<any>>;
    public apiDriverIdDelete(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<any>>;
    public apiDriverIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiDriverIdDelete.');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/driver/${encodeURIComponent(String(id))}`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<DriverResponse>;
    public apiDriverIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<DriverResponse>>;
    public apiDriverIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<DriverResponse>>;
    public apiDriverIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiDriverIdGet.');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<DriverResponse>(`${this.configuration.basePath}/api/driver/${encodeURIComponent(String(id))}`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ids 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverListDelete(ids?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any>;
    public apiDriverListDelete(ids?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<any>>;
    public apiDriverListDelete(ids?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<any>>;
    public apiDriverListDelete(ids?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (ids) {
            ids.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'Ids');
            })
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/driver/list`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param active 
     * @param _long 
     * @param lat 
     * @param distance 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverListGet(active?: number, _long?: number, lat?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<DriverListResponse>;
    public apiDriverListGet(active?: number, _long?: number, lat?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<DriverListResponse>>;
    public apiDriverListGet(active?: number, _long?: number, lat?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<DriverListResponse>>;
    public apiDriverListGet(active?: number, _long?: number, lat?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (active !== undefined && active !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>active, 'Active');
        }
        if (_long !== undefined && _long !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_long, 'Long');
        }
        if (lat !== undefined && lat !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>lat, 'Lat');
        }
        if (distance !== undefined && distance !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>distance, 'Distance');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>sort, 'Sort');
        }
        if (search !== undefined && search !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>search2, 'Search2');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<DriverListResponse>(`${this.configuration.basePath}/api/driver/list`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<DriverMinimalListResponse>;
    public apiDriverListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<DriverMinimalListResponse>>;
    public apiDriverListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<DriverMinimalListResponse>>;
    public apiDriverListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (pageIndex !== undefined && pageIndex !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>companyId, 'CompanyId');
        }
        if (search !== undefined && search !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>search, 'Search');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<DriverMinimalListResponse>(`${this.configuration.basePath}/api/driver/list/minimal`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverModalGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<GetDriverModalResponse>;
    public apiDriverModalGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<GetDriverModalResponse>>;
    public apiDriverModalGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<GetDriverModalResponse>>;
    public apiDriverModalGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<GetDriverModalResponse>(`${this.configuration.basePath}/api/driver/modal`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param firstName 
     * @param lastName 
     * @param phone 
     * @param email 
     * @param addressCity 
     * @param addressState 
     * @param addressCounty 
     * @param addressAddress 
     * @param addressStreet 
     * @param addressStreetNumber 
     * @param addressCountry 
     * @param addressZipCode 
     * @param addressStateShortName 
     * @param addressAddressUnit 
     * @param dateOfBirth 
     * @param ssn 
     * @param mvrExpiration 
     * @param bankId 
     * @param account 
     * @param routing 
     * @param payType 
     * @param useTruckAssistAch 
     * @param soloEmptyMile 
     * @param soloLoadedMile 
     * @param soloPerStop 
     * @param teamEmptyMile 
     * @param teamLoadedMile 
     * @param teamPerStop 
     * @param fleetType 
     * @param soloDriver 
     * @param teamDriver 
     * @param perMileSolo 
     * @param perMileTeam 
     * @param commissionSolo 
     * @param commissionTeam 
     * @param soloFlatRate 
     * @param teamFlatRate 
     * @param isOwner 
     * @param ownerId 
     * @param ownerType 
     * @param ein 
     * @param bussinesName 
     * @param offDutyLocations 
     * @param emergencyContactName 
     * @param emergencyContactPhone 
     * @param emergencyContactRelationship 
     * @param note 
     * @param avatar 
     * @param twic 
     * @param twicExpDate 
     * @param fuelCard 
     * @param generalMailNotification 
     * @param generalPushNotification 
     * @param generalSmsNotification 
     * @param payrollMailNotification 
     * @param payrollPushNotification 
     * @param payrollSmsNotification 
     * @param files 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverPost(firstName?: string, lastName?: string, phone?: string, email?: string, addressCity?: string, addressState?: string, addressCounty?: string, addressAddress?: string, addressStreet?: string, addressStreetNumber?: string, addressCountry?: string, addressZipCode?: string, addressStateShortName?: string, addressAddressUnit?: string, dateOfBirth?: string, ssn?: string, mvrExpiration?: number, bankId?: number, account?: string, routing?: string, payType?: number, useTruckAssistAch?: boolean, soloEmptyMile?: number, soloLoadedMile?: number, soloPerStop?: number, teamEmptyMile?: number, teamLoadedMile?: number, teamPerStop?: number, fleetType?: FleetType, soloDriver?: boolean, teamDriver?: boolean, perMileSolo?: number, perMileTeam?: number, commissionSolo?: number, commissionTeam?: number, soloFlatRate?: number, teamFlatRate?: number, isOwner?: boolean, ownerId?: number, ownerType?: OwnerType, ein?: string, bussinesName?: string, offDutyLocations?: Array<CreateOffDutyLocationCommand>, emergencyContactName?: string, emergencyContactPhone?: string, emergencyContactRelationship?: string, note?: string, avatar?: string, twic?: boolean, twicExpDate?: string, fuelCard?: string, generalMailNotification?: boolean, generalPushNotification?: boolean, generalSmsNotification?: boolean, payrollMailNotification?: boolean, payrollPushNotification?: boolean, payrollSmsNotification?: boolean, files?: Array<Blob>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<CreateWithUploadsResponse>;
    public apiDriverPost(firstName?: string, lastName?: string, phone?: string, email?: string, addressCity?: string, addressState?: string, addressCounty?: string, addressAddress?: string, addressStreet?: string, addressStreetNumber?: string, addressCountry?: string, addressZipCode?: string, addressStateShortName?: string, addressAddressUnit?: string, dateOfBirth?: string, ssn?: string, mvrExpiration?: number, bankId?: number, account?: string, routing?: string, payType?: number, useTruckAssistAch?: boolean, soloEmptyMile?: number, soloLoadedMile?: number, soloPerStop?: number, teamEmptyMile?: number, teamLoadedMile?: number, teamPerStop?: number, fleetType?: FleetType, soloDriver?: boolean, teamDriver?: boolean, perMileSolo?: number, perMileTeam?: number, commissionSolo?: number, commissionTeam?: number, soloFlatRate?: number, teamFlatRate?: number, isOwner?: boolean, ownerId?: number, ownerType?: OwnerType, ein?: string, bussinesName?: string, offDutyLocations?: Array<CreateOffDutyLocationCommand>, emergencyContactName?: string, emergencyContactPhone?: string, emergencyContactRelationship?: string, note?: string, avatar?: string, twic?: boolean, twicExpDate?: string, fuelCard?: string, generalMailNotification?: boolean, generalPushNotification?: boolean, generalSmsNotification?: boolean, payrollMailNotification?: boolean, payrollPushNotification?: boolean, payrollSmsNotification?: boolean, files?: Array<Blob>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<CreateWithUploadsResponse>>;
    public apiDriverPost(firstName?: string, lastName?: string, phone?: string, email?: string, addressCity?: string, addressState?: string, addressCounty?: string, addressAddress?: string, addressStreet?: string, addressStreetNumber?: string, addressCountry?: string, addressZipCode?: string, addressStateShortName?: string, addressAddressUnit?: string, dateOfBirth?: string, ssn?: string, mvrExpiration?: number, bankId?: number, account?: string, routing?: string, payType?: number, useTruckAssistAch?: boolean, soloEmptyMile?: number, soloLoadedMile?: number, soloPerStop?: number, teamEmptyMile?: number, teamLoadedMile?: number, teamPerStop?: number, fleetType?: FleetType, soloDriver?: boolean, teamDriver?: boolean, perMileSolo?: number, perMileTeam?: number, commissionSolo?: number, commissionTeam?: number, soloFlatRate?: number, teamFlatRate?: number, isOwner?: boolean, ownerId?: number, ownerType?: OwnerType, ein?: string, bussinesName?: string, offDutyLocations?: Array<CreateOffDutyLocationCommand>, emergencyContactName?: string, emergencyContactPhone?: string, emergencyContactRelationship?: string, note?: string, avatar?: string, twic?: boolean, twicExpDate?: string, fuelCard?: string, generalMailNotification?: boolean, generalPushNotification?: boolean, generalSmsNotification?: boolean, payrollMailNotification?: boolean, payrollPushNotification?: boolean, payrollSmsNotification?: boolean, files?: Array<Blob>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<CreateWithUploadsResponse>>;
    public apiDriverPost(firstName?: string, lastName?: string, phone?: string, email?: string, addressCity?: string, addressState?: string, addressCounty?: string, addressAddress?: string, addressStreet?: string, addressStreetNumber?: string, addressCountry?: string, addressZipCode?: string, addressStateShortName?: string, addressAddressUnit?: string, dateOfBirth?: string, ssn?: string, mvrExpiration?: number, bankId?: number, account?: string, routing?: string, payType?: number, useTruckAssistAch?: boolean, soloEmptyMile?: number, soloLoadedMile?: number, soloPerStop?: number, teamEmptyMile?: number, teamLoadedMile?: number, teamPerStop?: number, fleetType?: FleetType, soloDriver?: boolean, teamDriver?: boolean, perMileSolo?: number, perMileTeam?: number, commissionSolo?: number, commissionTeam?: number, soloFlatRate?: number, teamFlatRate?: number, isOwner?: boolean, ownerId?: number, ownerType?: OwnerType, ein?: string, bussinesName?: string, offDutyLocations?: Array<CreateOffDutyLocationCommand>, emergencyContactName?: string, emergencyContactPhone?: string, emergencyContactRelationship?: string, note?: string, avatar?: string, twic?: boolean, twicExpDate?: string, fuelCard?: string, generalMailNotification?: boolean, generalPushNotification?: boolean, generalSmsNotification?: boolean, payrollMailNotification?: boolean, payrollPushNotification?: boolean, payrollSmsNotification?: boolean, files?: Array<Blob>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: this.encoder});
        }

        if (firstName !== undefined) {
            formParams = formParams.append('FirstName', <any>firstName) as any || formParams;
        }
        if (lastName !== undefined) {
            formParams = formParams.append('LastName', <any>lastName) as any || formParams;
        }
        if (phone !== undefined) {
            formParams = formParams.append('Phone', <any>phone) as any || formParams;
        }
        if (email !== undefined) {
            formParams = formParams.append('Email', <any>email) as any || formParams;
        }
        if (addressCity !== undefined) {
            formParams = formParams.append('Address.City', <any>addressCity) as any || formParams;
        }
        if (addressState !== undefined) {
            formParams = formParams.append('Address.State', <any>addressState) as any || formParams;
        }
        if (addressCounty !== undefined) {
            formParams = formParams.append('Address.County', <any>addressCounty) as any || formParams;
        }
        if (addressAddress !== undefined) {
            formParams = formParams.append('Address.Address', <any>addressAddress) as any || formParams;
        }
        if (addressStreet !== undefined) {
            formParams = formParams.append('Address.Street', <any>addressStreet) as any || formParams;
        }
        if (addressStreetNumber !== undefined) {
            formParams = formParams.append('Address.StreetNumber', <any>addressStreetNumber) as any || formParams;
        }
        if (addressCountry !== undefined) {
            formParams = formParams.append('Address.Country', <any>addressCountry) as any || formParams;
        }
        if (addressZipCode !== undefined) {
            formParams = formParams.append('Address.ZipCode', <any>addressZipCode) as any || formParams;
        }
        if (addressStateShortName !== undefined) {
            formParams = formParams.append('Address.StateShortName', <any>addressStateShortName) as any || formParams;
        }
        if (addressAddressUnit !== undefined) {
            formParams = formParams.append('Address.AddressUnit', <any>addressAddressUnit) as any || formParams;
        }
        if (dateOfBirth !== undefined) {
            formParams = formParams.append('DateOfBirth', <any>dateOfBirth) as any || formParams;
        }
        if (ssn !== undefined) {
            formParams = formParams.append('Ssn', <any>ssn) as any || formParams;
        }
        if (mvrExpiration !== undefined) {
            formParams = formParams.append('MvrExpiration', <any>mvrExpiration) as any || formParams;
        }
        if (bankId !== undefined) {
            formParams = formParams.append('BankId', <any>bankId) as any || formParams;
        }
        if (account !== undefined) {
            formParams = formParams.append('Account', <any>account) as any || formParams;
        }
        if (routing !== undefined) {
            formParams = formParams.append('Routing', <any>routing) as any || formParams;
        }
        if (payType !== undefined) {
            formParams = formParams.append('PayType', <any>payType) as any || formParams;
        }
        if (useTruckAssistAch !== undefined) {
            formParams = formParams.append('UseTruckAssistAch', <any>useTruckAssistAch) as any || formParams;
        }
        if (soloEmptyMile !== undefined) {
            formParams = formParams.append('Solo.EmptyMile', <any>soloEmptyMile) as any || formParams;
        }
        if (soloLoadedMile !== undefined) {
            formParams = formParams.append('Solo.LoadedMile', <any>soloLoadedMile) as any || formParams;
        }
        if (soloPerStop !== undefined) {
            formParams = formParams.append('Solo.PerStop', <any>soloPerStop) as any || formParams;
        }
        if (teamEmptyMile !== undefined) {
            formParams = formParams.append('Team.EmptyMile', <any>teamEmptyMile) as any || formParams;
        }
        if (teamLoadedMile !== undefined) {
            formParams = formParams.append('Team.LoadedMile', <any>teamLoadedMile) as any || formParams;
        }
        if (teamPerStop !== undefined) {
            formParams = formParams.append('Team.PerStop', <any>teamPerStop) as any || formParams;
        }
        if (fleetType !== undefined) {
            formParams = formParams.append('FleetType', <any>fleetType) as any || formParams;
        }
        if (soloDriver !== undefined) {
            formParams = formParams.append('SoloDriver', <any>soloDriver) as any || formParams;
        }
        if (teamDriver !== undefined) {
            formParams = formParams.append('TeamDriver', <any>teamDriver) as any || formParams;
        }
        if (perMileSolo !== undefined) {
            formParams = formParams.append('PerMileSolo', <any>perMileSolo) as any || formParams;
        }
        if (perMileTeam !== undefined) {
            formParams = formParams.append('PerMileTeam', <any>perMileTeam) as any || formParams;
        }
        if (commissionSolo !== undefined) {
            formParams = formParams.append('CommissionSolo', <any>commissionSolo) as any || formParams;
        }
        if (commissionTeam !== undefined) {
            formParams = formParams.append('CommissionTeam', <any>commissionTeam) as any || formParams;
        }
        if (soloFlatRate !== undefined) {
            formParams = formParams.append('SoloFlatRate', <any>soloFlatRate) as any || formParams;
        }
        if (teamFlatRate !== undefined) {
            formParams = formParams.append('TeamFlatRate', <any>teamFlatRate) as any || formParams;
        }
        if (isOwner !== undefined) {
            formParams = formParams.append('IsOwner', <any>isOwner) as any || formParams;
        }
        if (ownerId !== undefined) {
            formParams = formParams.append('OwnerId', <any>ownerId) as any || formParams;
        }
        if (ownerType !== undefined) {
            formParams = formParams.append('OwnerType', <any>ownerType) as any || formParams;
        }
        if (ein !== undefined) {
            formParams = formParams.append('Ein', <any>ein) as any || formParams;
        }
        if (bussinesName !== undefined) {
            formParams = formParams.append('BussinesName', <any>bussinesName) as any || formParams;
        }
        if (offDutyLocations) {
            if (useForm) {
                offDutyLocations.forEach((element) => {
                    formParams = formParams.append('OffDutyLocations', <any>element) as any || formParams;
            })
            } else {
                formParams = formParams.append('OffDutyLocations', offDutyLocations.join(COLLECTION_FORMATS['csv'])) as any || formParams;
            }
        }
        if (emergencyContactName !== undefined) {
            formParams = formParams.append('EmergencyContactName', <any>emergencyContactName) as any || formParams;
        }
        if (emergencyContactPhone !== undefined) {
            formParams = formParams.append('EmergencyContactPhone', <any>emergencyContactPhone) as any || formParams;
        }
        if (emergencyContactRelationship !== undefined) {
            formParams = formParams.append('EmergencyContactRelationship', <any>emergencyContactRelationship) as any || formParams;
        }
        if (note !== undefined) {
            formParams = formParams.append('Note', <any>note) as any || formParams;
        }
        if (avatar !== undefined) {
            formParams = formParams.append('Avatar', <any>avatar) as any || formParams;
        }
        if (twic !== undefined) {
            formParams = formParams.append('Twic', <any>twic) as any || formParams;
        }
        if (twicExpDate !== undefined) {
            formParams = formParams.append('TwicExpDate', <any>twicExpDate) as any || formParams;
        }
        if (fuelCard !== undefined) {
            formParams = formParams.append('FuelCard', <any>fuelCard) as any || formParams;
        }
        if (generalMailNotification !== undefined) {
            formParams = formParams.append('General.MailNotification', <any>generalMailNotification) as any || formParams;
        }
        if (generalPushNotification !== undefined) {
            formParams = formParams.append('General.PushNotification', <any>generalPushNotification) as any || formParams;
        }
        if (generalSmsNotification !== undefined) {
            formParams = formParams.append('General.SmsNotification', <any>generalSmsNotification) as any || formParams;
        }
        if (payrollMailNotification !== undefined) {
            formParams = formParams.append('Payroll.MailNotification', <any>payrollMailNotification) as any || formParams;
        }
        if (payrollPushNotification !== undefined) {
            formParams = formParams.append('Payroll.PushNotification', <any>payrollPushNotification) as any || formParams;
        }
        if (payrollSmsNotification !== undefined) {
            formParams = formParams.append('Payroll.SmsNotification', <any>payrollSmsNotification) as any || formParams;
        }
        if (files) {
            if (useForm) {
                files.forEach((element) => {
                    formParams = formParams.append('Files', <any>element) as any || formParams;
            })
            } else {
                formParams = formParams.append('Files', files.join(COLLECTION_FORMATS['csv'])) as any || formParams;
            }
        }

        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.post<CreateWithUploadsResponse>(`${this.configuration.basePath}/api/driver`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param firstName 
     * @param lastName 
     * @param phone 
     * @param email 
     * @param addressCity 
     * @param addressState 
     * @param addressCounty 
     * @param addressAddress 
     * @param addressStreet 
     * @param addressStreetNumber 
     * @param addressCountry 
     * @param addressZipCode 
     * @param addressStateShortName 
     * @param addressAddressUnit 
     * @param dateOfBirth 
     * @param ssn 
     * @param mvrExpiration 
     * @param bankId 
     * @param account 
     * @param routing 
     * @param payType 
     * @param useTruckAssistAch 
     * @param soloEmptyMile 
     * @param soloLoadedMile 
     * @param soloPerStop 
     * @param teamEmptyMile 
     * @param teamLoadedMile 
     * @param teamPerStop 
     * @param fleetType 
     * @param soloDriver 
     * @param teamDriver 
     * @param commissionSolo 
     * @param commissionTeam 
     * @param perMileSolo 
     * @param perMileTeam 
     * @param soloFlatRate 
     * @param teamFlatRate 
     * @param ownerId 
     * @param isOwner 
     * @param ownerType 
     * @param ein 
     * @param bussinesName 
     * @param offDutyLocations 
     * @param emergencyContactName 
     * @param emergencyContactPhone 
     * @param emergencyContactRelationship 
     * @param note 
     * @param avatar 
     * @param twic 
     * @param twicExpDate 
     * @param fuelCard 
     * @param generalMailNotification 
     * @param generalPushNotification 
     * @param generalSmsNotification 
     * @param payrollMailNotification 
     * @param payrollPushNotification 
     * @param payrollSmsNotification 
     * @param files 
     * @param filesForDeleteIds 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverPut(id?: number, firstName?: string, lastName?: string, phone?: string, email?: string, addressCity?: string, addressState?: string, addressCounty?: string, addressAddress?: string, addressStreet?: string, addressStreetNumber?: string, addressCountry?: string, addressZipCode?: string, addressStateShortName?: string, addressAddressUnit?: string, dateOfBirth?: string, ssn?: string, mvrExpiration?: number, bankId?: number, account?: string, routing?: string, payType?: number, useTruckAssistAch?: boolean, soloEmptyMile?: number, soloLoadedMile?: number, soloPerStop?: number, teamEmptyMile?: number, teamLoadedMile?: number, teamPerStop?: number, fleetType?: FleetType, soloDriver?: boolean, teamDriver?: boolean, commissionSolo?: number, commissionTeam?: number, perMileSolo?: number, perMileTeam?: number, soloFlatRate?: number, teamFlatRate?: number, ownerId?: number, isOwner?: boolean, ownerType?: OwnerType, ein?: string, bussinesName?: string, offDutyLocations?: Array<UpdateOffDutyLocationCommand>, emergencyContactName?: string, emergencyContactPhone?: string, emergencyContactRelationship?: string, note?: string, avatar?: string, twic?: boolean, twicExpDate?: string, fuelCard?: string, generalMailNotification?: boolean, generalPushNotification?: boolean, generalSmsNotification?: boolean, payrollMailNotification?: boolean, payrollPushNotification?: boolean, payrollSmsNotification?: boolean, files?: Array<Blob>, filesForDeleteIds?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<CreateWithUploadsResponse>;
    public apiDriverPut(id?: number, firstName?: string, lastName?: string, phone?: string, email?: string, addressCity?: string, addressState?: string, addressCounty?: string, addressAddress?: string, addressStreet?: string, addressStreetNumber?: string, addressCountry?: string, addressZipCode?: string, addressStateShortName?: string, addressAddressUnit?: string, dateOfBirth?: string, ssn?: string, mvrExpiration?: number, bankId?: number, account?: string, routing?: string, payType?: number, useTruckAssistAch?: boolean, soloEmptyMile?: number, soloLoadedMile?: number, soloPerStop?: number, teamEmptyMile?: number, teamLoadedMile?: number, teamPerStop?: number, fleetType?: FleetType, soloDriver?: boolean, teamDriver?: boolean, commissionSolo?: number, commissionTeam?: number, perMileSolo?: number, perMileTeam?: number, soloFlatRate?: number, teamFlatRate?: number, ownerId?: number, isOwner?: boolean, ownerType?: OwnerType, ein?: string, bussinesName?: string, offDutyLocations?: Array<UpdateOffDutyLocationCommand>, emergencyContactName?: string, emergencyContactPhone?: string, emergencyContactRelationship?: string, note?: string, avatar?: string, twic?: boolean, twicExpDate?: string, fuelCard?: string, generalMailNotification?: boolean, generalPushNotification?: boolean, generalSmsNotification?: boolean, payrollMailNotification?: boolean, payrollPushNotification?: boolean, payrollSmsNotification?: boolean, files?: Array<Blob>, filesForDeleteIds?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<CreateWithUploadsResponse>>;
    public apiDriverPut(id?: number, firstName?: string, lastName?: string, phone?: string, email?: string, addressCity?: string, addressState?: string, addressCounty?: string, addressAddress?: string, addressStreet?: string, addressStreetNumber?: string, addressCountry?: string, addressZipCode?: string, addressStateShortName?: string, addressAddressUnit?: string, dateOfBirth?: string, ssn?: string, mvrExpiration?: number, bankId?: number, account?: string, routing?: string, payType?: number, useTruckAssistAch?: boolean, soloEmptyMile?: number, soloLoadedMile?: number, soloPerStop?: number, teamEmptyMile?: number, teamLoadedMile?: number, teamPerStop?: number, fleetType?: FleetType, soloDriver?: boolean, teamDriver?: boolean, commissionSolo?: number, commissionTeam?: number, perMileSolo?: number, perMileTeam?: number, soloFlatRate?: number, teamFlatRate?: number, ownerId?: number, isOwner?: boolean, ownerType?: OwnerType, ein?: string, bussinesName?: string, offDutyLocations?: Array<UpdateOffDutyLocationCommand>, emergencyContactName?: string, emergencyContactPhone?: string, emergencyContactRelationship?: string, note?: string, avatar?: string, twic?: boolean, twicExpDate?: string, fuelCard?: string, generalMailNotification?: boolean, generalPushNotification?: boolean, generalSmsNotification?: boolean, payrollMailNotification?: boolean, payrollPushNotification?: boolean, payrollSmsNotification?: boolean, files?: Array<Blob>, filesForDeleteIds?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<CreateWithUploadsResponse>>;
    public apiDriverPut(id?: number, firstName?: string, lastName?: string, phone?: string, email?: string, addressCity?: string, addressState?: string, addressCounty?: string, addressAddress?: string, addressStreet?: string, addressStreetNumber?: string, addressCountry?: string, addressZipCode?: string, addressStateShortName?: string, addressAddressUnit?: string, dateOfBirth?: string, ssn?: string, mvrExpiration?: number, bankId?: number, account?: string, routing?: string, payType?: number, useTruckAssistAch?: boolean, soloEmptyMile?: number, soloLoadedMile?: number, soloPerStop?: number, teamEmptyMile?: number, teamLoadedMile?: number, teamPerStop?: number, fleetType?: FleetType, soloDriver?: boolean, teamDriver?: boolean, commissionSolo?: number, commissionTeam?: number, perMileSolo?: number, perMileTeam?: number, soloFlatRate?: number, teamFlatRate?: number, ownerId?: number, isOwner?: boolean, ownerType?: OwnerType, ein?: string, bussinesName?: string, offDutyLocations?: Array<UpdateOffDutyLocationCommand>, emergencyContactName?: string, emergencyContactPhone?: string, emergencyContactRelationship?: string, note?: string, avatar?: string, twic?: boolean, twicExpDate?: string, fuelCard?: string, generalMailNotification?: boolean, generalPushNotification?: boolean, generalSmsNotification?: boolean, payrollMailNotification?: boolean, payrollPushNotification?: boolean, payrollSmsNotification?: boolean, files?: Array<Blob>, filesForDeleteIds?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: this.encoder});
        }

        if (id !== undefined) {
            formParams = formParams.append('Id', <any>id) as any || formParams;
        }
        if (firstName !== undefined) {
            formParams = formParams.append('FirstName', <any>firstName) as any || formParams;
        }
        if (lastName !== undefined) {
            formParams = formParams.append('LastName', <any>lastName) as any || formParams;
        }
        if (phone !== undefined) {
            formParams = formParams.append('Phone', <any>phone) as any || formParams;
        }
        if (email !== undefined) {
            formParams = formParams.append('Email', <any>email) as any || formParams;
        }
        if (addressCity !== undefined) {
            formParams = formParams.append('Address.City', <any>addressCity) as any || formParams;
        }
        if (addressState !== undefined) {
            formParams = formParams.append('Address.State', <any>addressState) as any || formParams;
        }
        if (addressCounty !== undefined) {
            formParams = formParams.append('Address.County', <any>addressCounty) as any || formParams;
        }
        if (addressAddress !== undefined) {
            formParams = formParams.append('Address.Address', <any>addressAddress) as any || formParams;
        }
        if (addressStreet !== undefined) {
            formParams = formParams.append('Address.Street', <any>addressStreet) as any || formParams;
        }
        if (addressStreetNumber !== undefined) {
            formParams = formParams.append('Address.StreetNumber', <any>addressStreetNumber) as any || formParams;
        }
        if (addressCountry !== undefined) {
            formParams = formParams.append('Address.Country', <any>addressCountry) as any || formParams;
        }
        if (addressZipCode !== undefined) {
            formParams = formParams.append('Address.ZipCode', <any>addressZipCode) as any || formParams;
        }
        if (addressStateShortName !== undefined) {
            formParams = formParams.append('Address.StateShortName', <any>addressStateShortName) as any || formParams;
        }
        if (addressAddressUnit !== undefined) {
            formParams = formParams.append('Address.AddressUnit', <any>addressAddressUnit) as any || formParams;
        }
        if (dateOfBirth !== undefined) {
            formParams = formParams.append('DateOfBirth', <any>dateOfBirth) as any || formParams;
        }
        if (ssn !== undefined) {
            formParams = formParams.append('Ssn', <any>ssn) as any || formParams;
        }
        if (mvrExpiration !== undefined) {
            formParams = formParams.append('MvrExpiration', <any>mvrExpiration) as any || formParams;
        }
        if (bankId !== undefined) {
            formParams = formParams.append('BankId', <any>bankId) as any || formParams;
        }
        if (account !== undefined) {
            formParams = formParams.append('Account', <any>account) as any || formParams;
        }
        if (routing !== undefined) {
            formParams = formParams.append('Routing', <any>routing) as any || formParams;
        }
        if (payType !== undefined) {
            formParams = formParams.append('PayType', <any>payType) as any || formParams;
        }
        if (useTruckAssistAch !== undefined) {
            formParams = formParams.append('UseTruckAssistAch', <any>useTruckAssistAch) as any || formParams;
        }
        if (soloEmptyMile !== undefined) {
            formParams = formParams.append('Solo.EmptyMile', <any>soloEmptyMile) as any || formParams;
        }
        if (soloLoadedMile !== undefined) {
            formParams = formParams.append('Solo.LoadedMile', <any>soloLoadedMile) as any || formParams;
        }
        if (soloPerStop !== undefined) {
            formParams = formParams.append('Solo.PerStop', <any>soloPerStop) as any || formParams;
        }
        if (teamEmptyMile !== undefined) {
            formParams = formParams.append('Team.EmptyMile', <any>teamEmptyMile) as any || formParams;
        }
        if (teamLoadedMile !== undefined) {
            formParams = formParams.append('Team.LoadedMile', <any>teamLoadedMile) as any || formParams;
        }
        if (teamPerStop !== undefined) {
            formParams = formParams.append('Team.PerStop', <any>teamPerStop) as any || formParams;
        }
        if (fleetType !== undefined) {
            formParams = formParams.append('FleetType', <any>fleetType) as any || formParams;
        }
        if (soloDriver !== undefined) {
            formParams = formParams.append('SoloDriver', <any>soloDriver) as any || formParams;
        }
        if (teamDriver !== undefined) {
            formParams = formParams.append('TeamDriver', <any>teamDriver) as any || formParams;
        }
        if (commissionSolo !== undefined) {
            formParams = formParams.append('CommissionSolo', <any>commissionSolo) as any || formParams;
        }
        if (commissionTeam !== undefined) {
            formParams = formParams.append('CommissionTeam', <any>commissionTeam) as any || formParams;
        }
        if (perMileSolo !== undefined) {
            formParams = formParams.append('PerMileSolo', <any>perMileSolo) as any || formParams;
        }
        if (perMileTeam !== undefined) {
            formParams = formParams.append('PerMileTeam', <any>perMileTeam) as any || formParams;
        }
        if (soloFlatRate !== undefined) {
            formParams = formParams.append('SoloFlatRate', <any>soloFlatRate) as any || formParams;
        }
        if (teamFlatRate !== undefined) {
            formParams = formParams.append('TeamFlatRate', <any>teamFlatRate) as any || formParams;
        }
        if (ownerId !== undefined) {
            formParams = formParams.append('OwnerId', <any>ownerId) as any || formParams;
        }
        if (isOwner !== undefined) {
            formParams = formParams.append('IsOwner', <any>isOwner) as any || formParams;
        }
        if (ownerType !== undefined) {
            formParams = formParams.append('OwnerType', <any>ownerType) as any || formParams;
        }
        if (ein !== undefined) {
            formParams = formParams.append('Ein', <any>ein) as any || formParams;
        }
        if (bussinesName !== undefined) {
            formParams = formParams.append('BussinesName', <any>bussinesName) as any || formParams;
        }
        if (offDutyLocations) {
            if (useForm) {
                offDutyLocations.forEach((element) => {
                    formParams = formParams.append('OffDutyLocations', <any>element) as any || formParams;
            })
            } else {
                formParams = formParams.append('OffDutyLocations', offDutyLocations.join(COLLECTION_FORMATS['csv'])) as any || formParams;
            }
        }
        if (emergencyContactName !== undefined) {
            formParams = formParams.append('EmergencyContactName', <any>emergencyContactName) as any || formParams;
        }
        if (emergencyContactPhone !== undefined) {
            formParams = formParams.append('EmergencyContactPhone', <any>emergencyContactPhone) as any || formParams;
        }
        if (emergencyContactRelationship !== undefined) {
            formParams = formParams.append('EmergencyContactRelationship', <any>emergencyContactRelationship) as any || formParams;
        }
        if (note !== undefined) {
            formParams = formParams.append('Note', <any>note) as any || formParams;
        }
        if (avatar !== undefined) {
            formParams = formParams.append('Avatar', <any>avatar) as any || formParams;
        }
        if (twic !== undefined) {
            formParams = formParams.append('Twic', <any>twic) as any || formParams;
        }
        if (twicExpDate !== undefined) {
            formParams = formParams.append('TwicExpDate', <any>twicExpDate) as any || formParams;
        }
        if (fuelCard !== undefined) {
            formParams = formParams.append('FuelCard', <any>fuelCard) as any || formParams;
        }
        if (generalMailNotification !== undefined) {
            formParams = formParams.append('General.MailNotification', <any>generalMailNotification) as any || formParams;
        }
        if (generalPushNotification !== undefined) {
            formParams = formParams.append('General.PushNotification', <any>generalPushNotification) as any || formParams;
        }
        if (generalSmsNotification !== undefined) {
            formParams = formParams.append('General.SmsNotification', <any>generalSmsNotification) as any || formParams;
        }
        if (payrollMailNotification !== undefined) {
            formParams = formParams.append('Payroll.MailNotification', <any>payrollMailNotification) as any || formParams;
        }
        if (payrollPushNotification !== undefined) {
            formParams = formParams.append('Payroll.PushNotification', <any>payrollPushNotification) as any || formParams;
        }
        if (payrollSmsNotification !== undefined) {
            formParams = formParams.append('Payroll.SmsNotification', <any>payrollSmsNotification) as any || formParams;
        }
        if (files) {
            if (useForm) {
                files.forEach((element) => {
                    formParams = formParams.append('Files', <any>element) as any || formParams;
            })
            } else {
                formParams = formParams.append('Files', files.join(COLLECTION_FORMATS['csv'])) as any || formParams;
            }
        }
        if (filesForDeleteIds) {
            if (useForm) {
                filesForDeleteIds.forEach((element) => {
                    formParams = formParams.append('FilesForDeleteIds', <any>element) as any || formParams;
            })
            } else {
                formParams = formParams.append('FilesForDeleteIds', filesForDeleteIds.join(COLLECTION_FORMATS['csv'])) as any || formParams;
            }
        }

        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.put<CreateWithUploadsResponse>(`${this.configuration.basePath}/api/driver`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverStatusIdPut(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any>;
    public apiDriverStatusIdPut(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<any>>;
    public apiDriverStatusIdPut(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<any>>;
    public apiDriverStatusIdPut(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiDriverStatusIdPut.');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.put<any>(`${this.configuration.basePath}/api/driver/status/${encodeURIComponent(String(id))}`,
            null,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param statusSetMultipleDriverCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDriverStatusListPut(statusSetMultipleDriverCommand?: StatusSetMultipleDriverCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any>;
    public apiDriverStatusListPut(statusSetMultipleDriverCommand?: StatusSetMultipleDriverCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpResponse<any>>;
    public apiDriverStatusListPut(statusSetMultipleDriverCommand?: StatusSetMultipleDriverCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<HttpEvent<any>>;
    public apiDriverStatusListPut(statusSetMultipleDriverCommand?: StatusSetMultipleDriverCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json'}): Observable<any> {

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (bearer) required
        credential = this.configuration.lookupCredential('bearer');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.put<any>(`${this.configuration.basePath}/api/driver/status/list`,
            statusSetMultipleDriverCommand,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
