/**
 * Truckassist API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AccidentByStateListResponse } from '../model/accidentByStateListResponse';
// @ts-ignore
import { ByStateReportType } from '../model/byStateReportType';
// @ts-ignore
import { CompanyDurationResponse } from '../model/companyDurationResponse';
// @ts-ignore
import { DashboardTopReportType } from '../model/dashboardTopReportType';
// @ts-ignore
import { FuelByStateListResponse } from '../model/fuelByStateListResponse';
// @ts-ignore
import { GpsType } from '../model/gpsType';
// @ts-ignore
import { LiveTrackingLiteResponse } from '../model/liveTrackingLiteResponse';
// @ts-ignore
import { LoadStopType } from '../model/loadStopType';
// @ts-ignore
import { PerformanceResponse } from '../model/performanceResponse';
// @ts-ignore
import { PickupDeliveryByStateListResponse } from '../model/pickupDeliveryByStateListResponse';
// @ts-ignore
import { ProblemDetails } from '../model/problemDetails';
// @ts-ignore
import { RepairByStateListResponse } from '../model/repairByStateListResponse';
// @ts-ignore
import { RoadsideByStateListResponse } from '../model/roadsideByStateListResponse';
// @ts-ignore
import { SortOrder } from '../model/sortOrder';
// @ts-ignore
import { SubintervalType } from '../model/subintervalType';
// @ts-ignore
import { TimeInterval } from '../model/timeInterval';
// @ts-ignore
import { TopBrokersListResponse } from '../model/topBrokersListResponse';
// @ts-ignore
import { TopDispatchersListResponse } from '../model/topDispatchersListResponse';
// @ts-ignore
import { TopDriverListResponse } from '../model/topDriverListResponse';
// @ts-ignore
import { TopFuelStopListResponse } from '../model/topFuelStopListResponse';
// @ts-ignore
import { TopOwnerListResponse } from '../model/topOwnerListResponse';
// @ts-ignore
import { TopRepairShopListResponse } from '../model/topRepairShopListResponse';
// @ts-ignore
import { TopShipperListResponse } from '../model/topShipperListResponse';
// @ts-ignore
import { TopTruckListResponse } from '../model/topTruckListResponse';
// @ts-ignore
import { ViolationByStateListResponse } from '../model/violationByStateListResponse';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class DashboardService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardAccidentbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<AccidentByStateListResponse>;
    public apiDashboardAccidentbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<AccidentByStateListResponse>>;
    public apiDashboardAccidentbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<AccidentByStateListResponse>>;
    public apiDashboardAccidentbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/accidentbystate`;
        return this.httpClient.request<AccidentByStateListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param request 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardCompanydurationGet(request?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<CompanyDurationResponse>;
    public apiDashboardCompanydurationGet(request?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<CompanyDurationResponse>>;
    public apiDashboardCompanydurationGet(request?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<CompanyDurationResponse>>;
    public apiDashboardCompanydurationGet(request?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (request !== undefined && request !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>request, 'request');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/companyduration`;
        return this.httpClient.request<CompanyDurationResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardFuelbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<FuelByStateListResponse>;
    public apiDashboardFuelbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<FuelByStateListResponse>>;
    public apiDashboardFuelbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<FuelByStateListResponse>>;
    public apiDashboardFuelbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/fuelbystate`;
        return this.httpClient.request<FuelByStateListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardPerformanceGet(timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<PerformanceResponse>;
    public apiDashboardPerformanceGet(timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<PerformanceResponse>>;
    public apiDashboardPerformanceGet(timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<PerformanceResponse>>;
    public apiDashboardPerformanceGet(timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/performance`;
        return this.httpClient.request<PerformanceResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param loadStopType 
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardPickupdeliverybystateGet(loadStopType?: LoadStopType, reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<PickupDeliveryByStateListResponse>;
    public apiDashboardPickupdeliverybystateGet(loadStopType?: LoadStopType, reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<PickupDeliveryByStateListResponse>>;
    public apiDashboardPickupdeliverybystateGet(loadStopType?: LoadStopType, reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<PickupDeliveryByStateListResponse>>;
    public apiDashboardPickupdeliverybystateGet(loadStopType?: LoadStopType, reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (loadStopType !== undefined && loadStopType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>loadStopType, 'LoadStopType');
        }
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/pickupdeliverybystate`;
        return this.httpClient.request<PickupDeliveryByStateListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardRepairbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<RepairByStateListResponse>;
    public apiDashboardRepairbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<RepairByStateListResponse>>;
    public apiDashboardRepairbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<RepairByStateListResponse>>;
    public apiDashboardRepairbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/repairbystate`;
        return this.httpClient.request<RepairByStateListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardRoadsidebystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<RoadsideByStateListResponse>;
    public apiDashboardRoadsidebystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<RoadsideByStateListResponse>>;
    public apiDashboardRoadsidebystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<RoadsideByStateListResponse>>;
    public apiDashboardRoadsidebystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/roadsidebystate`;
        return this.httpClient.request<RoadsideByStateListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param unassigned 
     * @param deviceId 
     * @param type 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param sortOrder 
     * @param sortBy 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardTelematicsDataGet(unassigned?: boolean, deviceId?: string, type?: GpsType, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<LiveTrackingLiteResponse>;
    public apiDashboardTelematicsDataGet(unassigned?: boolean, deviceId?: string, type?: GpsType, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<LiveTrackingLiteResponse>>;
    public apiDashboardTelematicsDataGet(unassigned?: boolean, deviceId?: string, type?: GpsType, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<LiveTrackingLiteResponse>>;
    public apiDashboardTelematicsDataGet(unassigned?: boolean, deviceId?: string, type?: GpsType, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, sortOrder?: SortOrder, sortBy?: object, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (unassigned !== undefined && unassigned !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>unassigned, 'Unassigned');
        }
        if (deviceId !== undefined && deviceId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>deviceId, 'DeviceId');
        }
        if (type !== undefined && type !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>type, 'Type');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }
        if (sortOrder !== undefined && sortOrder !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortOrder, 'SortOrder');
        }
        if (sortBy !== undefined && sortBy !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortBy, 'SortBy');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search2, 'Search2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/telematics/data`;
        return this.httpClient.request<LiveTrackingLiteResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardTopbrokersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TopBrokersListResponse>;
    public apiDashboardTopbrokersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TopBrokersListResponse>>;
    public apiDashboardTopbrokersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TopBrokersListResponse>>;
    public apiDashboardTopbrokersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/topbrokers`;
        return this.httpClient.request<TopBrokersListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardTopdispatchersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TopDispatchersListResponse>;
    public apiDashboardTopdispatchersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TopDispatchersListResponse>>;
    public apiDashboardTopdispatchersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TopDispatchersListResponse>>;
    public apiDashboardTopdispatchersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/topdispatchers`;
        return this.httpClient.request<TopDispatchersListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardTopdriversGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TopDriverListResponse>;
    public apiDashboardTopdriversGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TopDriverListResponse>>;
    public apiDashboardTopdriversGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TopDriverListResponse>>;
    public apiDashboardTopdriversGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/topdrivers`;
        return this.httpClient.request<TopDriverListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardTopfuelstopsGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TopFuelStopListResponse>;
    public apiDashboardTopfuelstopsGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TopFuelStopListResponse>>;
    public apiDashboardTopfuelstopsGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TopFuelStopListResponse>>;
    public apiDashboardTopfuelstopsGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/topfuelstops`;
        return this.httpClient.request<TopFuelStopListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardTopownersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TopOwnerListResponse>;
    public apiDashboardTopownersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TopOwnerListResponse>>;
    public apiDashboardTopownersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TopOwnerListResponse>>;
    public apiDashboardTopownersGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/topowners`;
        return this.httpClient.request<TopOwnerListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardToprepairshopGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TopRepairShopListResponse>;
    public apiDashboardToprepairshopGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TopRepairShopListResponse>>;
    public apiDashboardToprepairshopGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TopRepairShopListResponse>>;
    public apiDashboardToprepairshopGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/toprepairshop`;
        return this.httpClient.request<TopRepairShopListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardTopshippersGet(searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TopShipperListResponse>;
    public apiDashboardTopshippersGet(searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TopShipperListResponse>>;
    public apiDashboardTopshippersGet(searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TopShipperListResponse>>;
    public apiDashboardTopshippersGet(searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/topshippers`;
        return this.httpClient.request<TopShipperListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardToptrucksGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<TopTruckListResponse>;
    public apiDashboardToptrucksGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<TopTruckListResponse>>;
    public apiDashboardToptrucksGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<TopTruckListResponse>>;
    public apiDashboardToptrucksGet(reportType?: DashboardTopReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/toptrucks`;
        return this.httpClient.request<TopTruckListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param reportType 
     * @param searchTerms 
     * @param pageIndex 
     * @param pageSize 
     * @param showMore 
     * @param timeInterval 
     * @param startDate 
     * @param endDate 
     * @param subintervalType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiDashboardViolationbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<ViolationByStateListResponse>;
    public apiDashboardViolationbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<ViolationByStateListResponse>>;
    public apiDashboardViolationbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<ViolationByStateListResponse>>;
    public apiDashboardViolationbystateGet(reportType?: ByStateReportType, searchTerms?: Array<string>, pageIndex?: number, pageSize?: number, showMore?: boolean, timeInterval?: TimeInterval, startDate?: string, endDate?: string, subintervalType?: SubintervalType, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reportType !== undefined && reportType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reportType, 'ReportType');
        }
        if (searchTerms) {
            searchTerms.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'SearchTerms');
            })
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (showMore !== undefined && showMore !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showMore, 'ShowMore');
        }
        if (timeInterval !== undefined && timeInterval !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeInterval, 'TimeInterval');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'StartDate');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'EndDate');
        }
        if (subintervalType !== undefined && subintervalType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>subintervalType, 'SubintervalType');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/dashboard/violationbystate`;
        return this.httpClient.request<ViolationByStateListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
