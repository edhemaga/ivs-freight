/**
 * Truckassist API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AssignLoadModalResponse } from '../model/assignLoadModalResponse';
// @ts-ignore
import { AssignedLoadListResponse } from '../model/assignedLoadListResponse';
// @ts-ignore
import { CreateLoadTemplateCommand } from '../model/createLoadTemplateCommand';
// @ts-ignore
import { CreateResponse } from '../model/createResponse';
// @ts-ignore
import { CreateTagCommand } from '../model/createTagCommand';
// @ts-ignore
import { CreateWithUploadsResponse } from '../model/createWithUploadsResponse';
// @ts-ignore
import { DispatcherFilterResponse } from '../model/dispatcherFilterResponse';
// @ts-ignore
import { FileResponse } from '../model/fileResponse';
// @ts-ignore
import { GetHazardousMaterialDropdownModalQuery } from '../model/getHazardousMaterialDropdownModalQuery';
// @ts-ignore
import { HazardousMaterialResponse } from '../model/hazardousMaterialResponse';
// @ts-ignore
import { LoadBillingAdditionalCommand } from '../model/loadBillingAdditionalCommand';
// @ts-ignore
import { LoadListLoadStopResponse } from '../model/loadListLoadStopResponse';
// @ts-ignore
import { LoadListResponse } from '../model/loadListResponse';
// @ts-ignore
import { LoadMinimalListResponse } from '../model/loadMinimalListResponse';
// @ts-ignore
import { LoadMobileListResponse } from '../model/loadMobileListResponse';
// @ts-ignore
import { LoadModalResponse } from '../model/loadModalResponse';
// @ts-ignore
import { LoadPaymentPayCommand } from '../model/loadPaymentPayCommand';
// @ts-ignore
import { LoadPossibleStatusesResponse } from '../model/loadPossibleStatusesResponse';
// @ts-ignore
import { LoadResponse } from '../model/loadResponse';
// @ts-ignore
import { LoadStatus } from '../model/loadStatus';
// @ts-ignore
import { LoadStatusHistoryCommand } from '../model/loadStatusHistoryCommand';
// @ts-ignore
import { LoadStatusType } from '../model/loadStatusType';
// @ts-ignore
import { LoadStopCommand } from '../model/loadStopCommand';
// @ts-ignore
import { LoadStopItemAutocompleteDescriptionResponse } from '../model/loadStopItemAutocompleteDescriptionResponse';
// @ts-ignore
import { LoadTemplateListResponse } from '../model/loadTemplateListResponse';
// @ts-ignore
import { LoadTemplateResponse } from '../model/loadTemplateResponse';
// @ts-ignore
import { LoadType } from '../model/loadType';
// @ts-ignore
import { ProblemDetails } from '../model/problemDetails';
// @ts-ignore
import { RevertLoadStatusCommand } from '../model/revertLoadStatusCommand';
// @ts-ignore
import { UpdateLoadStatusCommand } from '../model/updateLoadStatusCommand';
// @ts-ignore
import { UpdateLoadTemplateCommand } from '../model/updateLoadTemplateCommand';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class LoadService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param loadStatusType 
     * @param isTemplate 
     * @param searchString 
     * @param sort 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadDispatcherFilterGet(loadStatusType?: LoadStatusType, isTemplate?: boolean, searchString?: string, sort?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<Array<DispatcherFilterResponse>>;
    public apiLoadDispatcherFilterGet(loadStatusType?: LoadStatusType, isTemplate?: boolean, searchString?: string, sort?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<DispatcherFilterResponse>>>;
    public apiLoadDispatcherFilterGet(loadStatusType?: LoadStatusType, isTemplate?: boolean, searchString?: string, sort?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<DispatcherFilterResponse>>>;
    public apiLoadDispatcherFilterGet(loadStatusType?: LoadStatusType, isTemplate?: boolean, searchString?: string, sort?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (loadStatusType !== undefined && loadStatusType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>loadStatusType, 'LoadStatusType');
        }
        if (isTemplate !== undefined && isTemplate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isTemplate, 'IsTemplate');
        }
        if (searchString !== undefined && searchString !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>searchString, 'SearchString');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/dispatcher/filter`;
        return this.httpClient.request<Array<DispatcherFilterResponse>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadFilesIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<Array<FileResponse>>;
    public apiLoadFilesIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<FileResponse>>>;
    public apiLoadFilesIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<FileResponse>>>;
    public apiLoadFilesIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiLoadFilesIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/files/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<Array<FileResponse>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param getHazardousMaterialDropdownModalQuery 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadHazardousmaterialModalGet(getHazardousMaterialDropdownModalQuery?: GetHazardousMaterialDropdownModalQuery, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<Array<HazardousMaterialResponse>>;
    public apiLoadHazardousmaterialModalGet(getHazardousMaterialDropdownModalQuery?: GetHazardousMaterialDropdownModalQuery, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<HazardousMaterialResponse>>>;
    public apiLoadHazardousmaterialModalGet(getHazardousMaterialDropdownModalQuery?: GetHazardousMaterialDropdownModalQuery, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<HazardousMaterialResponse>>>;
    public apiLoadHazardousmaterialModalGet(getHazardousMaterialDropdownModalQuery?: GetHazardousMaterialDropdownModalQuery, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/hazardousmaterial/modal`;
        return this.httpClient.request<Array<HazardousMaterialResponse>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: getHazardousMaterialDropdownModalQuery,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadIdDelete(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiLoadIdDelete(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiLoadIdDelete(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiLoadIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiLoadIdDelete.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<LoadResponse>;
    public apiLoadIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<LoadResponse>>;
    public apiLoadIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<LoadResponse>>;
    public apiLoadIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiLoadIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<LoadResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param dispatchId 
     * @param truckType 
     * @param trailerType 
     * @param _long 
     * @param lat 
     * @param distance 
     * @param dispatcherId 
     * @param dateFrom 
     * @param dateTo 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadListAssignedGet(dispatchId?: number, truckType?: number, trailerType?: number, _long?: number, lat?: number, distance?: number, dispatcherId?: number, dateFrom?: string, dateTo?: string, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<AssignedLoadListResponse>;
    public apiLoadListAssignedGet(dispatchId?: number, truckType?: number, trailerType?: number, _long?: number, lat?: number, distance?: number, dispatcherId?: number, dateFrom?: string, dateTo?: string, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<AssignedLoadListResponse>>;
    public apiLoadListAssignedGet(dispatchId?: number, truckType?: number, trailerType?: number, _long?: number, lat?: number, distance?: number, dispatcherId?: number, dateFrom?: string, dateTo?: string, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<AssignedLoadListResponse>>;
    public apiLoadListAssignedGet(dispatchId?: number, truckType?: number, trailerType?: number, _long?: number, lat?: number, distance?: number, dispatcherId?: number, dateFrom?: string, dateTo?: string, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (dispatchId !== undefined && dispatchId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dispatchId, 'DispatchId');
        }
        if (truckType !== undefined && truckType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>truckType, 'TruckType');
        }
        if (trailerType !== undefined && trailerType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>trailerType, 'TrailerType');
        }
        if (_long !== undefined && _long !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>_long, 'Long');
        }
        if (lat !== undefined && lat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lat, 'Lat');
        }
        if (distance !== undefined && distance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>distance, 'Distance');
        }
        if (dispatcherId !== undefined && dispatcherId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dispatcherId, 'DispatcherId');
        }
        if (dateFrom !== undefined && dateFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateFrom, 'DateFrom');
        }
        if (dateTo !== undefined && dateTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateTo, 'DateTo');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search2, 'Search2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/list/assigned`;
        return this.httpClient.request<AssignedLoadListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ids 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadListDelete(ids?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiLoadListDelete(ids?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiLoadListDelete(ids?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiLoadListDelete(ids?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ids) {
            ids.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'Ids');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/list`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param loadType 
     * @param statusType 
     * @param status 
     * @param dispatcherIds 
     * @param dispatcherId 
     * @param dispatchId 
     * @param brokerId 
     * @param shipperId 
     * @param loadId 
     * @param dateFrom 
     * @param dateTo 
     * @param revenueFrom 
     * @param revenueTo 
     * @param truckId 
     * @param rateFrom 
     * @param rateTo 
     * @param paidFrom 
     * @param paidTo 
     * @param dueFrom 
     * @param dueTo 
     * @param pickup 
     * @param delivery 
     * @param longitude 
     * @param latitude 
     * @param distance 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadListGet(loadType?: number, statusType?: number, status?: Array<number>, dispatcherIds?: Array<number>, dispatcherId?: number, dispatchId?: number, brokerId?: number, shipperId?: number, loadId?: number, dateFrom?: string, dateTo?: string, revenueFrom?: number, revenueTo?: number, truckId?: number, rateFrom?: number, rateTo?: number, paidFrom?: number, paidTo?: number, dueFrom?: number, dueTo?: number, pickup?: boolean, delivery?: boolean, longitude?: number, latitude?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<LoadListResponse>;
    public apiLoadListGet(loadType?: number, statusType?: number, status?: Array<number>, dispatcherIds?: Array<number>, dispatcherId?: number, dispatchId?: number, brokerId?: number, shipperId?: number, loadId?: number, dateFrom?: string, dateTo?: string, revenueFrom?: number, revenueTo?: number, truckId?: number, rateFrom?: number, rateTo?: number, paidFrom?: number, paidTo?: number, dueFrom?: number, dueTo?: number, pickup?: boolean, delivery?: boolean, longitude?: number, latitude?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<LoadListResponse>>;
    public apiLoadListGet(loadType?: number, statusType?: number, status?: Array<number>, dispatcherIds?: Array<number>, dispatcherId?: number, dispatchId?: number, brokerId?: number, shipperId?: number, loadId?: number, dateFrom?: string, dateTo?: string, revenueFrom?: number, revenueTo?: number, truckId?: number, rateFrom?: number, rateTo?: number, paidFrom?: number, paidTo?: number, dueFrom?: number, dueTo?: number, pickup?: boolean, delivery?: boolean, longitude?: number, latitude?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<LoadListResponse>>;
    public apiLoadListGet(loadType?: number, statusType?: number, status?: Array<number>, dispatcherIds?: Array<number>, dispatcherId?: number, dispatchId?: number, brokerId?: number, shipperId?: number, loadId?: number, dateFrom?: string, dateTo?: string, revenueFrom?: number, revenueTo?: number, truckId?: number, rateFrom?: number, rateTo?: number, paidFrom?: number, paidTo?: number, dueFrom?: number, dueTo?: number, pickup?: boolean, delivery?: boolean, longitude?: number, latitude?: number, distance?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (loadType !== undefined && loadType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>loadType, 'LoadType');
        }
        if (statusType !== undefined && statusType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>statusType, 'StatusType');
        }
        if (status) {
            status.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'Status');
            })
        }
        if (dispatcherIds) {
            dispatcherIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'DispatcherIds');
            })
        }
        if (dispatcherId !== undefined && dispatcherId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dispatcherId, 'DispatcherId');
        }
        if (dispatchId !== undefined && dispatchId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dispatchId, 'DispatchId');
        }
        if (brokerId !== undefined && brokerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>brokerId, 'BrokerId');
        }
        if (shipperId !== undefined && shipperId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>shipperId, 'ShipperId');
        }
        if (loadId !== undefined && loadId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>loadId, 'LoadId');
        }
        if (dateFrom !== undefined && dateFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateFrom, 'DateFrom');
        }
        if (dateTo !== undefined && dateTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateTo, 'DateTo');
        }
        if (revenueFrom !== undefined && revenueFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>revenueFrom, 'RevenueFrom');
        }
        if (revenueTo !== undefined && revenueTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>revenueTo, 'RevenueTo');
        }
        if (truckId !== undefined && truckId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>truckId, 'TruckId');
        }
        if (rateFrom !== undefined && rateFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rateFrom, 'RateFrom');
        }
        if (rateTo !== undefined && rateTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rateTo, 'RateTo');
        }
        if (paidFrom !== undefined && paidFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>paidFrom, 'PaidFrom');
        }
        if (paidTo !== undefined && paidTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>paidTo, 'PaidTo');
        }
        if (dueFrom !== undefined && dueFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dueFrom, 'DueFrom');
        }
        if (dueTo !== undefined && dueTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dueTo, 'DueTo');
        }
        if (pickup !== undefined && pickup !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pickup, 'Pickup');
        }
        if (delivery !== undefined && delivery !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>delivery, 'Delivery');
        }
        if (longitude !== undefined && longitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>longitude, 'Longitude');
        }
        if (latitude !== undefined && latitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>latitude, 'Latitude');
        }
        if (distance !== undefined && distance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>distance, 'Distance');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search2, 'Search2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/list`;
        return this.httpClient.request<LoadListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadListLoadstopIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<LoadListLoadStopResponse>;
    public apiLoadListLoadstopIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<LoadListLoadStopResponse>>;
    public apiLoadListLoadstopIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<LoadListLoadStopResponse>>;
    public apiLoadListLoadstopIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiLoadListLoadstopIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/list/loadstop/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<LoadListLoadStopResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<LoadMinimalListResponse>;
    public apiLoadListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<LoadMinimalListResponse>>;
    public apiLoadListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<LoadMinimalListResponse>>;
    public apiLoadListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/list/minimal`;
        return this.httpClient.request<LoadMinimalListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadListStatusIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<LoadPossibleStatusesResponse>;
    public apiLoadListStatusIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<LoadPossibleStatusesResponse>>;
    public apiLoadListStatusIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<LoadPossibleStatusesResponse>>;
    public apiLoadListStatusIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiLoadListStatusIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/list/status/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<LoadPossibleStatusesResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadMobileListGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<LoadMobileListResponse>;
    public apiLoadMobileListGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<LoadMobileListResponse>>;
    public apiLoadMobileListGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<LoadMobileListResponse>>;
    public apiLoadMobileListGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/mobile/list`;
        return this.httpClient.request<LoadMobileListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param dispatchId 
     * @param truckType 
     * @param trailerType 
     * @param _long 
     * @param lat 
     * @param distance 
     * @param dispatcherId 
     * @param dateFrom 
     * @param dateTo 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadModalAssignGet(dispatchId?: number, truckType?: number, trailerType?: number, _long?: number, lat?: number, distance?: number, dispatcherId?: number, dateFrom?: string, dateTo?: string, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<AssignLoadModalResponse>;
    public apiLoadModalAssignGet(dispatchId?: number, truckType?: number, trailerType?: number, _long?: number, lat?: number, distance?: number, dispatcherId?: number, dateFrom?: string, dateTo?: string, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<AssignLoadModalResponse>>;
    public apiLoadModalAssignGet(dispatchId?: number, truckType?: number, trailerType?: number, _long?: number, lat?: number, distance?: number, dispatcherId?: number, dateFrom?: string, dateTo?: string, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<AssignLoadModalResponse>>;
    public apiLoadModalAssignGet(dispatchId?: number, truckType?: number, trailerType?: number, _long?: number, lat?: number, distance?: number, dispatcherId?: number, dateFrom?: string, dateTo?: string, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (dispatchId !== undefined && dispatchId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dispatchId, 'DispatchId');
        }
        if (truckType !== undefined && truckType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>truckType, 'TruckType');
        }
        if (trailerType !== undefined && trailerType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>trailerType, 'TrailerType');
        }
        if (_long !== undefined && _long !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>_long, 'Long');
        }
        if (lat !== undefined && lat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lat, 'Lat');
        }
        if (distance !== undefined && distance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>distance, 'Distance');
        }
        if (dispatcherId !== undefined && dispatcherId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dispatcherId, 'DispatcherId');
        }
        if (dateFrom !== undefined && dateFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateFrom, 'DateFrom');
        }
        if (dateTo !== undefined && dateTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateTo, 'DateTo');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search2, 'Search2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/modal/assign`;
        return this.httpClient.request<AssignLoadModalResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadModalGet(id?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<LoadModalResponse>;
    public apiLoadModalGet(id?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<LoadModalResponse>>;
    public apiLoadModalGet(id?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<LoadModalResponse>>;
    public apiLoadModalGet(id?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'Id');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/modal`;
        return this.httpClient.request<LoadModalResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param type 
     * @param loadNumber 
     * @param loadTemplateId 
     * @param dispatcherId 
     * @param companyId 
     * @param dispatchId 
     * @param dateCreated 
     * @param brokerId 
     * @param brokerContactId 
     * @param referenceNumber 
     * @param generalCommodity 
     * @param weight 
     * @param loadRequirementsId 
     * @param loadRequirementsTruckTypeId 
     * @param loadRequirementsTrailerTypeId 
     * @param loadRequirementsDoorType 
     * @param loadRequirementsSuspension 
     * @param loadRequirementsTrailerLengthId 
     * @param loadRequirementsYear 
     * @param loadRequirementsLiftgate 
     * @param loadRequirementsDriverMessage 
     * @param note 
     * @param baseRate 
     * @param adjustedRate 
     * @param driverRate 
     * @param advancePay 
     * @param emptyMiles 
     * @param totalMiles 
     * @param totalHours 
     * @param totalMinutes 
     * @param additionalBillingRates 
     * @param stops 
     * @param pays 
     * @param files 
     * @param tags 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadPost(type?: LoadType, loadNumber?: string, loadTemplateId?: number, dispatcherId?: number, companyId?: number, dispatchId?: number, dateCreated?: string, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, driverRate?: number, advancePay?: number, emptyMiles?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, stops?: Array<LoadStopCommand>, pays?: Array<LoadPaymentPayCommand>, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<CreateWithUploadsResponse>;
    public apiLoadPost(type?: LoadType, loadNumber?: string, loadTemplateId?: number, dispatcherId?: number, companyId?: number, dispatchId?: number, dateCreated?: string, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, driverRate?: number, advancePay?: number, emptyMiles?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, stops?: Array<LoadStopCommand>, pays?: Array<LoadPaymentPayCommand>, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<CreateWithUploadsResponse>>;
    public apiLoadPost(type?: LoadType, loadNumber?: string, loadTemplateId?: number, dispatcherId?: number, companyId?: number, dispatchId?: number, dateCreated?: string, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, driverRate?: number, advancePay?: number, emptyMiles?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, stops?: Array<LoadStopCommand>, pays?: Array<LoadPaymentPayCommand>, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<CreateWithUploadsResponse>>;
    public apiLoadPost(type?: LoadType, loadNumber?: string, loadTemplateId?: number, dispatcherId?: number, companyId?: number, dispatchId?: number, dateCreated?: string, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, driverRate?: number, advancePay?: number, emptyMiles?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, stops?: Array<LoadStopCommand>, pays?: Array<LoadPaymentPayCommand>, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (type !== undefined) {
            localVarFormParams = localVarFormParams.append('Type', <any>type) as any || localVarFormParams;
        }
        if (loadNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadNumber', <any>loadNumber) as any || localVarFormParams;
        }
        if (loadTemplateId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadTemplateId', <any>loadTemplateId) as any || localVarFormParams;
        }
        if (dispatcherId !== undefined) {
            localVarFormParams = localVarFormParams.append('DispatcherId', <any>dispatcherId) as any || localVarFormParams;
        }
        if (companyId !== undefined) {
            localVarFormParams = localVarFormParams.append('CompanyId', <any>companyId) as any || localVarFormParams;
        }
        if (dispatchId !== undefined) {
            localVarFormParams = localVarFormParams.append('DispatchId', <any>dispatchId) as any || localVarFormParams;
        }
        if (dateCreated !== undefined) {
            localVarFormParams = localVarFormParams.append('DateCreated', <any>dateCreated) as any || localVarFormParams;
        }
        if (brokerId !== undefined) {
            localVarFormParams = localVarFormParams.append('BrokerId', <any>brokerId) as any || localVarFormParams;
        }
        if (brokerContactId !== undefined) {
            localVarFormParams = localVarFormParams.append('BrokerContactId', <any>brokerContactId) as any || localVarFormParams;
        }
        if (referenceNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('ReferenceNumber', <any>referenceNumber) as any || localVarFormParams;
        }
        if (generalCommodity !== undefined) {
            localVarFormParams = localVarFormParams.append('GeneralCommodity', <any>generalCommodity) as any || localVarFormParams;
        }
        if (weight !== undefined) {
            localVarFormParams = localVarFormParams.append('Weight', <any>weight) as any || localVarFormParams;
        }
        if (loadRequirementsId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Id', <any>loadRequirementsId) as any || localVarFormParams;
        }
        if (loadRequirementsTruckTypeId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.TruckTypeId', <any>loadRequirementsTruckTypeId) as any || localVarFormParams;
        }
        if (loadRequirementsTrailerTypeId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.TrailerTypeId', <any>loadRequirementsTrailerTypeId) as any || localVarFormParams;
        }
        if (loadRequirementsDoorType !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.DoorType', <any>loadRequirementsDoorType) as any || localVarFormParams;
        }
        if (loadRequirementsSuspension !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Suspension', <any>loadRequirementsSuspension) as any || localVarFormParams;
        }
        if (loadRequirementsTrailerLengthId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.TrailerLengthId', <any>loadRequirementsTrailerLengthId) as any || localVarFormParams;
        }
        if (loadRequirementsYear !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Year', <any>loadRequirementsYear) as any || localVarFormParams;
        }
        if (loadRequirementsLiftgate !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Liftgate', <any>loadRequirementsLiftgate) as any || localVarFormParams;
        }
        if (loadRequirementsDriverMessage !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.DriverMessage', <any>loadRequirementsDriverMessage) as any || localVarFormParams;
        }
        if (note !== undefined) {
            localVarFormParams = localVarFormParams.append('Note', <any>note) as any || localVarFormParams;
        }
        if (baseRate !== undefined) {
            localVarFormParams = localVarFormParams.append('BaseRate', <any>baseRate) as any || localVarFormParams;
        }
        if (adjustedRate !== undefined) {
            localVarFormParams = localVarFormParams.append('AdjustedRate', <any>adjustedRate) as any || localVarFormParams;
        }
        if (driverRate !== undefined) {
            localVarFormParams = localVarFormParams.append('DriverRate', <any>driverRate) as any || localVarFormParams;
        }
        if (advancePay !== undefined) {
            localVarFormParams = localVarFormParams.append('AdvancePay', <any>advancePay) as any || localVarFormParams;
        }
        if (emptyMiles !== undefined) {
            localVarFormParams = localVarFormParams.append('EmptyMiles', <any>emptyMiles) as any || localVarFormParams;
        }
        if (totalMiles !== undefined) {
            localVarFormParams = localVarFormParams.append('TotalMiles', <any>totalMiles) as any || localVarFormParams;
        }
        if (totalHours !== undefined) {
            localVarFormParams = localVarFormParams.append('TotalHours', <any>totalHours) as any || localVarFormParams;
        }
        if (totalMinutes !== undefined) {
            localVarFormParams = localVarFormParams.append('TotalMinutes', <any>totalMinutes) as any || localVarFormParams;
        }
        if (additionalBillingRates) {
            additionalBillingRates.forEach((element) => {
                localVarFormParams = localVarFormParams.append('AdditionalBillingRates', <any>element) as any || localVarFormParams;
            })
        }
        if (stops) {
            stops.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Stops', <any>element) as any || localVarFormParams;
            })
        }
        if (pays) {
            pays.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Pays', <any>element) as any || localVarFormParams;
            })
        }
        if (files) {
            files.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Files', <any>element) as any || localVarFormParams;
            })
        }
        if (tags) {
            tags.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Tags', <any>element) as any || localVarFormParams;
            })
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load`;
        return this.httpClient.request<CreateWithUploadsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param dispatcherId 
     * @param dateCreated 
     * @param status 
     * @param dispatchId 
     * @param brokerId 
     * @param brokerContactId 
     * @param referenceNumber 
     * @param generalCommodity 
     * @param weight 
     * @param loadRequirementsId 
     * @param loadRequirementsTruckTypeId 
     * @param loadRequirementsTrailerTypeId 
     * @param loadRequirementsDoorType 
     * @param loadRequirementsSuspension 
     * @param loadRequirementsTrailerLengthId 
     * @param loadRequirementsYear 
     * @param loadRequirementsLiftgate 
     * @param loadRequirementsDriverMessage 
     * @param note 
     * @param baseRate 
     * @param adjustedRate 
     * @param revisedRate 
     * @param tonuRate 
     * @param driverRate 
     * @param totalMiles 
     * @param totalHours 
     * @param totalMinutes 
     * @param invoicedDate 
     * @param additionalBillingRates 
     * @param pays 
     * @param stops 
     * @param splitLoadPreviousStopOrder 
     * @param splitLoadNextStopOrder 
     * @param splitLoadSplitDate 
     * @param splitLoadSplitTime 
     * @param splitLoadSplitLocationCity 
     * @param splitLoadSplitLocationState 
     * @param splitLoadSplitLocationCounty 
     * @param splitLoadSplitLocationAddress 
     * @param splitLoadSplitLocationStreet 
     * @param splitLoadSplitLocationStreetNumber 
     * @param splitLoadSplitLocationCountry 
     * @param splitLoadSplitLocationZipCode 
     * @param splitLoadSplitLocationStateShortName 
     * @param splitLoadSplitLocationAddressUnit 
     * @param splitLoadNewDispatchId 
     * @param splitLoadRateFirstLoad 
     * @param splitLoadRateSecondLoad 
     * @param splitLoadFirstLegMiles 
     * @param splitLoadSecondLegMiles 
     * @param files 
     * @param tags 
     * @param filesForDeleteIds 
     * @param statusHistory 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadPut(id?: number, dispatcherId?: number, dateCreated?: string, status?: LoadStatus, dispatchId?: number, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, revisedRate?: number, tonuRate?: number, driverRate?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, invoicedDate?: string, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, pays?: Array<LoadPaymentPayCommand>, stops?: Array<LoadStopCommand>, splitLoadPreviousStopOrder?: number, splitLoadNextStopOrder?: number, splitLoadSplitDate?: string, splitLoadSplitTime?: string, splitLoadSplitLocationCity?: string, splitLoadSplitLocationState?: string, splitLoadSplitLocationCounty?: string, splitLoadSplitLocationAddress?: string, splitLoadSplitLocationStreet?: string, splitLoadSplitLocationStreetNumber?: string, splitLoadSplitLocationCountry?: string, splitLoadSplitLocationZipCode?: string, splitLoadSplitLocationStateShortName?: string, splitLoadSplitLocationAddressUnit?: string, splitLoadNewDispatchId?: number, splitLoadRateFirstLoad?: number, splitLoadRateSecondLoad?: number, splitLoadFirstLegMiles?: number, splitLoadSecondLegMiles?: number, files?: Array<Blob>, tags?: Array<CreateTagCommand>, filesForDeleteIds?: Array<number>, statusHistory?: Array<LoadStatusHistoryCommand>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<CreateWithUploadsResponse>;
    public apiLoadPut(id?: number, dispatcherId?: number, dateCreated?: string, status?: LoadStatus, dispatchId?: number, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, revisedRate?: number, tonuRate?: number, driverRate?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, invoicedDate?: string, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, pays?: Array<LoadPaymentPayCommand>, stops?: Array<LoadStopCommand>, splitLoadPreviousStopOrder?: number, splitLoadNextStopOrder?: number, splitLoadSplitDate?: string, splitLoadSplitTime?: string, splitLoadSplitLocationCity?: string, splitLoadSplitLocationState?: string, splitLoadSplitLocationCounty?: string, splitLoadSplitLocationAddress?: string, splitLoadSplitLocationStreet?: string, splitLoadSplitLocationStreetNumber?: string, splitLoadSplitLocationCountry?: string, splitLoadSplitLocationZipCode?: string, splitLoadSplitLocationStateShortName?: string, splitLoadSplitLocationAddressUnit?: string, splitLoadNewDispatchId?: number, splitLoadRateFirstLoad?: number, splitLoadRateSecondLoad?: number, splitLoadFirstLegMiles?: number, splitLoadSecondLegMiles?: number, files?: Array<Blob>, tags?: Array<CreateTagCommand>, filesForDeleteIds?: Array<number>, statusHistory?: Array<LoadStatusHistoryCommand>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<CreateWithUploadsResponse>>;
    public apiLoadPut(id?: number, dispatcherId?: number, dateCreated?: string, status?: LoadStatus, dispatchId?: number, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, revisedRate?: number, tonuRate?: number, driverRate?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, invoicedDate?: string, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, pays?: Array<LoadPaymentPayCommand>, stops?: Array<LoadStopCommand>, splitLoadPreviousStopOrder?: number, splitLoadNextStopOrder?: number, splitLoadSplitDate?: string, splitLoadSplitTime?: string, splitLoadSplitLocationCity?: string, splitLoadSplitLocationState?: string, splitLoadSplitLocationCounty?: string, splitLoadSplitLocationAddress?: string, splitLoadSplitLocationStreet?: string, splitLoadSplitLocationStreetNumber?: string, splitLoadSplitLocationCountry?: string, splitLoadSplitLocationZipCode?: string, splitLoadSplitLocationStateShortName?: string, splitLoadSplitLocationAddressUnit?: string, splitLoadNewDispatchId?: number, splitLoadRateFirstLoad?: number, splitLoadRateSecondLoad?: number, splitLoadFirstLegMiles?: number, splitLoadSecondLegMiles?: number, files?: Array<Blob>, tags?: Array<CreateTagCommand>, filesForDeleteIds?: Array<number>, statusHistory?: Array<LoadStatusHistoryCommand>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<CreateWithUploadsResponse>>;
    public apiLoadPut(id?: number, dispatcherId?: number, dateCreated?: string, status?: LoadStatus, dispatchId?: number, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, revisedRate?: number, tonuRate?: number, driverRate?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, invoicedDate?: string, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, pays?: Array<LoadPaymentPayCommand>, stops?: Array<LoadStopCommand>, splitLoadPreviousStopOrder?: number, splitLoadNextStopOrder?: number, splitLoadSplitDate?: string, splitLoadSplitTime?: string, splitLoadSplitLocationCity?: string, splitLoadSplitLocationState?: string, splitLoadSplitLocationCounty?: string, splitLoadSplitLocationAddress?: string, splitLoadSplitLocationStreet?: string, splitLoadSplitLocationStreetNumber?: string, splitLoadSplitLocationCountry?: string, splitLoadSplitLocationZipCode?: string, splitLoadSplitLocationStateShortName?: string, splitLoadSplitLocationAddressUnit?: string, splitLoadNewDispatchId?: number, splitLoadRateFirstLoad?: number, splitLoadRateSecondLoad?: number, splitLoadFirstLegMiles?: number, splitLoadSecondLegMiles?: number, files?: Array<Blob>, tags?: Array<CreateTagCommand>, filesForDeleteIds?: Array<number>, statusHistory?: Array<LoadStatusHistoryCommand>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (id !== undefined) {
            localVarFormParams = localVarFormParams.append('Id', <any>id) as any || localVarFormParams;
        }
        if (dispatcherId !== undefined) {
            localVarFormParams = localVarFormParams.append('DispatcherId', <any>dispatcherId) as any || localVarFormParams;
        }
        if (dateCreated !== undefined) {
            localVarFormParams = localVarFormParams.append('DateCreated', <any>dateCreated) as any || localVarFormParams;
        }
        if (status !== undefined) {
            localVarFormParams = localVarFormParams.append('Status', <any>status) as any || localVarFormParams;
        }
        if (dispatchId !== undefined) {
            localVarFormParams = localVarFormParams.append('DispatchId', <any>dispatchId) as any || localVarFormParams;
        }
        if (brokerId !== undefined) {
            localVarFormParams = localVarFormParams.append('BrokerId', <any>brokerId) as any || localVarFormParams;
        }
        if (brokerContactId !== undefined) {
            localVarFormParams = localVarFormParams.append('BrokerContactId', <any>brokerContactId) as any || localVarFormParams;
        }
        if (referenceNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('ReferenceNumber', <any>referenceNumber) as any || localVarFormParams;
        }
        if (generalCommodity !== undefined) {
            localVarFormParams = localVarFormParams.append('GeneralCommodity', <any>generalCommodity) as any || localVarFormParams;
        }
        if (weight !== undefined) {
            localVarFormParams = localVarFormParams.append('Weight', <any>weight) as any || localVarFormParams;
        }
        if (loadRequirementsId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Id', <any>loadRequirementsId) as any || localVarFormParams;
        }
        if (loadRequirementsTruckTypeId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.TruckTypeId', <any>loadRequirementsTruckTypeId) as any || localVarFormParams;
        }
        if (loadRequirementsTrailerTypeId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.TrailerTypeId', <any>loadRequirementsTrailerTypeId) as any || localVarFormParams;
        }
        if (loadRequirementsDoorType !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.DoorType', <any>loadRequirementsDoorType) as any || localVarFormParams;
        }
        if (loadRequirementsSuspension !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Suspension', <any>loadRequirementsSuspension) as any || localVarFormParams;
        }
        if (loadRequirementsTrailerLengthId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.TrailerLengthId', <any>loadRequirementsTrailerLengthId) as any || localVarFormParams;
        }
        if (loadRequirementsYear !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Year', <any>loadRequirementsYear) as any || localVarFormParams;
        }
        if (loadRequirementsLiftgate !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Liftgate', <any>loadRequirementsLiftgate) as any || localVarFormParams;
        }
        if (loadRequirementsDriverMessage !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.DriverMessage', <any>loadRequirementsDriverMessage) as any || localVarFormParams;
        }
        if (note !== undefined) {
            localVarFormParams = localVarFormParams.append('Note', <any>note) as any || localVarFormParams;
        }
        if (baseRate !== undefined) {
            localVarFormParams = localVarFormParams.append('BaseRate', <any>baseRate) as any || localVarFormParams;
        }
        if (adjustedRate !== undefined) {
            localVarFormParams = localVarFormParams.append('AdjustedRate', <any>adjustedRate) as any || localVarFormParams;
        }
        if (revisedRate !== undefined) {
            localVarFormParams = localVarFormParams.append('RevisedRate', <any>revisedRate) as any || localVarFormParams;
        }
        if (tonuRate !== undefined) {
            localVarFormParams = localVarFormParams.append('TonuRate', <any>tonuRate) as any || localVarFormParams;
        }
        if (driverRate !== undefined) {
            localVarFormParams = localVarFormParams.append('DriverRate', <any>driverRate) as any || localVarFormParams;
        }
        if (totalMiles !== undefined) {
            localVarFormParams = localVarFormParams.append('TotalMiles', <any>totalMiles) as any || localVarFormParams;
        }
        if (totalHours !== undefined) {
            localVarFormParams = localVarFormParams.append('TotalHours', <any>totalHours) as any || localVarFormParams;
        }
        if (totalMinutes !== undefined) {
            localVarFormParams = localVarFormParams.append('TotalMinutes', <any>totalMinutes) as any || localVarFormParams;
        }
        if (invoicedDate !== undefined) {
            localVarFormParams = localVarFormParams.append('InvoicedDate', <any>invoicedDate) as any || localVarFormParams;
        }
        if (additionalBillingRates) {
            additionalBillingRates.forEach((element) => {
                localVarFormParams = localVarFormParams.append('AdditionalBillingRates', <any>element) as any || localVarFormParams;
            })
        }
        if (pays) {
            pays.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Pays', <any>element) as any || localVarFormParams;
            })
        }
        if (stops) {
            stops.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Stops', <any>element) as any || localVarFormParams;
            })
        }
        if (splitLoadPreviousStopOrder !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.PreviousStopOrder', <any>splitLoadPreviousStopOrder) as any || localVarFormParams;
        }
        if (splitLoadNextStopOrder !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.NextStopOrder', <any>splitLoadNextStopOrder) as any || localVarFormParams;
        }
        if (splitLoadSplitDate !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitDate', <any>splitLoadSplitDate) as any || localVarFormParams;
        }
        if (splitLoadSplitTime !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitTime', <any>splitLoadSplitTime) as any || localVarFormParams;
        }
        if (splitLoadSplitLocationCity !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitLocation.City', <any>splitLoadSplitLocationCity) as any || localVarFormParams;
        }
        if (splitLoadSplitLocationState !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitLocation.State', <any>splitLoadSplitLocationState) as any || localVarFormParams;
        }
        if (splitLoadSplitLocationCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitLocation.County', <any>splitLoadSplitLocationCounty) as any || localVarFormParams;
        }
        if (splitLoadSplitLocationAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitLocation.Address', <any>splitLoadSplitLocationAddress) as any || localVarFormParams;
        }
        if (splitLoadSplitLocationStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitLocation.Street', <any>splitLoadSplitLocationStreet) as any || localVarFormParams;
        }
        if (splitLoadSplitLocationStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitLocation.StreetNumber', <any>splitLoadSplitLocationStreetNumber) as any || localVarFormParams;
        }
        if (splitLoadSplitLocationCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitLocation.Country', <any>splitLoadSplitLocationCountry) as any || localVarFormParams;
        }
        if (splitLoadSplitLocationZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitLocation.ZipCode', <any>splitLoadSplitLocationZipCode) as any || localVarFormParams;
        }
        if (splitLoadSplitLocationStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitLocation.StateShortName', <any>splitLoadSplitLocationStateShortName) as any || localVarFormParams;
        }
        if (splitLoadSplitLocationAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SplitLocation.AddressUnit', <any>splitLoadSplitLocationAddressUnit) as any || localVarFormParams;
        }
        if (splitLoadNewDispatchId !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.NewDispatchId', <any>splitLoadNewDispatchId) as any || localVarFormParams;
        }
        if (splitLoadRateFirstLoad !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.RateFirstLoad', <any>splitLoadRateFirstLoad) as any || localVarFormParams;
        }
        if (splitLoadRateSecondLoad !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.RateSecondLoad', <any>splitLoadRateSecondLoad) as any || localVarFormParams;
        }
        if (splitLoadFirstLegMiles !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.FirstLegMiles', <any>splitLoadFirstLegMiles) as any || localVarFormParams;
        }
        if (splitLoadSecondLegMiles !== undefined) {
            localVarFormParams = localVarFormParams.append('SplitLoad.SecondLegMiles', <any>splitLoadSecondLegMiles) as any || localVarFormParams;
        }
        if (files) {
            files.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Files', <any>element) as any || localVarFormParams;
            })
        }
        if (tags) {
            tags.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Tags', <any>element) as any || localVarFormParams;
            })
        }
        if (filesForDeleteIds) {
            filesForDeleteIds.forEach((element) => {
                localVarFormParams = localVarFormParams.append('FilesForDeleteIds', <any>element) as any || localVarFormParams;
            })
        }
        if (statusHistory) {
            statusHistory.forEach((element) => {
                localVarFormParams = localVarFormParams.append('StatusHistory', <any>element) as any || localVarFormParams;
            })
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load`;
        return this.httpClient.request<CreateWithUploadsResponse>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param type 
     * @param loadNumber 
     * @param loadTemplateId 
     * @param dispatcherId 
     * @param companyId 
     * @param dispatchId 
     * @param dateCreated 
     * @param brokerId 
     * @param brokerContactId 
     * @param referenceNumber 
     * @param generalCommodity 
     * @param weight 
     * @param loadRequirementsId 
     * @param loadRequirementsTruckTypeId 
     * @param loadRequirementsTrailerTypeId 
     * @param loadRequirementsDoorType 
     * @param loadRequirementsSuspension 
     * @param loadRequirementsTrailerLengthId 
     * @param loadRequirementsYear 
     * @param loadRequirementsLiftgate 
     * @param loadRequirementsDriverMessage 
     * @param note 
     * @param baseRate 
     * @param adjustedRate 
     * @param driverRate 
     * @param advancePay 
     * @param emptyMiles 
     * @param totalMiles 
     * @param totalHours 
     * @param totalMinutes 
     * @param additionalBillingRates 
     * @param stops 
     * @param pays 
     * @param files 
     * @param tags 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadSaveasclosedPost(type?: LoadType, loadNumber?: string, loadTemplateId?: number, dispatcherId?: number, companyId?: number, dispatchId?: number, dateCreated?: string, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, driverRate?: number, advancePay?: number, emptyMiles?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, stops?: Array<LoadStopCommand>, pays?: Array<LoadPaymentPayCommand>, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<CreateWithUploadsResponse>;
    public apiLoadSaveasclosedPost(type?: LoadType, loadNumber?: string, loadTemplateId?: number, dispatcherId?: number, companyId?: number, dispatchId?: number, dateCreated?: string, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, driverRate?: number, advancePay?: number, emptyMiles?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, stops?: Array<LoadStopCommand>, pays?: Array<LoadPaymentPayCommand>, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<CreateWithUploadsResponse>>;
    public apiLoadSaveasclosedPost(type?: LoadType, loadNumber?: string, loadTemplateId?: number, dispatcherId?: number, companyId?: number, dispatchId?: number, dateCreated?: string, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, driverRate?: number, advancePay?: number, emptyMiles?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, stops?: Array<LoadStopCommand>, pays?: Array<LoadPaymentPayCommand>, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<CreateWithUploadsResponse>>;
    public apiLoadSaveasclosedPost(type?: LoadType, loadNumber?: string, loadTemplateId?: number, dispatcherId?: number, companyId?: number, dispatchId?: number, dateCreated?: string, brokerId?: number, brokerContactId?: number, referenceNumber?: string, generalCommodity?: number, weight?: number, loadRequirementsId?: number, loadRequirementsTruckTypeId?: number, loadRequirementsTrailerTypeId?: number, loadRequirementsDoorType?: number, loadRequirementsSuspension?: number, loadRequirementsTrailerLengthId?: number, loadRequirementsYear?: number, loadRequirementsLiftgate?: boolean, loadRequirementsDriverMessage?: string, note?: string, baseRate?: number, adjustedRate?: number, driverRate?: number, advancePay?: number, emptyMiles?: number, totalMiles?: number, totalHours?: number, totalMinutes?: number, additionalBillingRates?: Array<LoadBillingAdditionalCommand>, stops?: Array<LoadStopCommand>, pays?: Array<LoadPaymentPayCommand>, files?: Array<Blob>, tags?: Array<CreateTagCommand>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (type !== undefined) {
            localVarFormParams = localVarFormParams.append('Type', <any>type) as any || localVarFormParams;
        }
        if (loadNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadNumber', <any>loadNumber) as any || localVarFormParams;
        }
        if (loadTemplateId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadTemplateId', <any>loadTemplateId) as any || localVarFormParams;
        }
        if (dispatcherId !== undefined) {
            localVarFormParams = localVarFormParams.append('DispatcherId', <any>dispatcherId) as any || localVarFormParams;
        }
        if (companyId !== undefined) {
            localVarFormParams = localVarFormParams.append('CompanyId', <any>companyId) as any || localVarFormParams;
        }
        if (dispatchId !== undefined) {
            localVarFormParams = localVarFormParams.append('DispatchId', <any>dispatchId) as any || localVarFormParams;
        }
        if (dateCreated !== undefined) {
            localVarFormParams = localVarFormParams.append('DateCreated', <any>dateCreated) as any || localVarFormParams;
        }
        if (brokerId !== undefined) {
            localVarFormParams = localVarFormParams.append('BrokerId', <any>brokerId) as any || localVarFormParams;
        }
        if (brokerContactId !== undefined) {
            localVarFormParams = localVarFormParams.append('BrokerContactId', <any>brokerContactId) as any || localVarFormParams;
        }
        if (referenceNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('ReferenceNumber', <any>referenceNumber) as any || localVarFormParams;
        }
        if (generalCommodity !== undefined) {
            localVarFormParams = localVarFormParams.append('GeneralCommodity', <any>generalCommodity) as any || localVarFormParams;
        }
        if (weight !== undefined) {
            localVarFormParams = localVarFormParams.append('Weight', <any>weight) as any || localVarFormParams;
        }
        if (loadRequirementsId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Id', <any>loadRequirementsId) as any || localVarFormParams;
        }
        if (loadRequirementsTruckTypeId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.TruckTypeId', <any>loadRequirementsTruckTypeId) as any || localVarFormParams;
        }
        if (loadRequirementsTrailerTypeId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.TrailerTypeId', <any>loadRequirementsTrailerTypeId) as any || localVarFormParams;
        }
        if (loadRequirementsDoorType !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.DoorType', <any>loadRequirementsDoorType) as any || localVarFormParams;
        }
        if (loadRequirementsSuspension !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Suspension', <any>loadRequirementsSuspension) as any || localVarFormParams;
        }
        if (loadRequirementsTrailerLengthId !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.TrailerLengthId', <any>loadRequirementsTrailerLengthId) as any || localVarFormParams;
        }
        if (loadRequirementsYear !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Year', <any>loadRequirementsYear) as any || localVarFormParams;
        }
        if (loadRequirementsLiftgate !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.Liftgate', <any>loadRequirementsLiftgate) as any || localVarFormParams;
        }
        if (loadRequirementsDriverMessage !== undefined) {
            localVarFormParams = localVarFormParams.append('LoadRequirements.DriverMessage', <any>loadRequirementsDriverMessage) as any || localVarFormParams;
        }
        if (note !== undefined) {
            localVarFormParams = localVarFormParams.append('Note', <any>note) as any || localVarFormParams;
        }
        if (baseRate !== undefined) {
            localVarFormParams = localVarFormParams.append('BaseRate', <any>baseRate) as any || localVarFormParams;
        }
        if (adjustedRate !== undefined) {
            localVarFormParams = localVarFormParams.append('AdjustedRate', <any>adjustedRate) as any || localVarFormParams;
        }
        if (driverRate !== undefined) {
            localVarFormParams = localVarFormParams.append('DriverRate', <any>driverRate) as any || localVarFormParams;
        }
        if (advancePay !== undefined) {
            localVarFormParams = localVarFormParams.append('AdvancePay', <any>advancePay) as any || localVarFormParams;
        }
        if (emptyMiles !== undefined) {
            localVarFormParams = localVarFormParams.append('EmptyMiles', <any>emptyMiles) as any || localVarFormParams;
        }
        if (totalMiles !== undefined) {
            localVarFormParams = localVarFormParams.append('TotalMiles', <any>totalMiles) as any || localVarFormParams;
        }
        if (totalHours !== undefined) {
            localVarFormParams = localVarFormParams.append('TotalHours', <any>totalHours) as any || localVarFormParams;
        }
        if (totalMinutes !== undefined) {
            localVarFormParams = localVarFormParams.append('TotalMinutes', <any>totalMinutes) as any || localVarFormParams;
        }
        if (additionalBillingRates) {
            additionalBillingRates.forEach((element) => {
                localVarFormParams = localVarFormParams.append('AdditionalBillingRates', <any>element) as any || localVarFormParams;
            })
        }
        if (stops) {
            stops.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Stops', <any>element) as any || localVarFormParams;
            })
        }
        if (pays) {
            pays.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Pays', <any>element) as any || localVarFormParams;
            })
        }
        if (files) {
            files.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Files', <any>element) as any || localVarFormParams;
            })
        }
        if (tags) {
            tags.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Tags', <any>element) as any || localVarFormParams;
            })
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/saveasclosed`;
        return this.httpClient.request<CreateWithUploadsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param loadStatusType 
     * @param sort 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadStatusFilterGet(loadStatusType?: LoadStatusType, sort?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<Array<DispatcherFilterResponse>>;
    public apiLoadStatusFilterGet(loadStatusType?: LoadStatusType, sort?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<DispatcherFilterResponse>>>;
    public apiLoadStatusFilterGet(loadStatusType?: LoadStatusType, sort?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<DispatcherFilterResponse>>>;
    public apiLoadStatusFilterGet(loadStatusType?: LoadStatusType, sort?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (loadStatusType !== undefined && loadStatusType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>loadStatusType, 'LoadStatusType');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/status/filter`;
        return this.httpClient.request<Array<DispatcherFilterResponse>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param updateLoadStatusCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadStatusPut(updateLoadStatusCommand?: UpdateLoadStatusCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiLoadStatusPut(updateLoadStatusCommand?: UpdateLoadStatusCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiLoadStatusPut(updateLoadStatusCommand?: UpdateLoadStatusCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiLoadStatusPut(updateLoadStatusCommand?: UpdateLoadStatusCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/status`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: updateLoadStatusCommand,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param revertLoadStatusCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadStatusRevertPut(revertLoadStatusCommand?: RevertLoadStatusCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiLoadStatusRevertPut(revertLoadStatusCommand?: RevertLoadStatusCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiLoadStatusRevertPut(revertLoadStatusCommand?: RevertLoadStatusCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiLoadStatusRevertPut(revertLoadStatusCommand?: RevertLoadStatusCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/status/revert`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: revertLoadStatusCommand,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param description 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadStopsAutocompleteDescriptionDescriptionGet(description: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<LoadStopItemAutocompleteDescriptionResponse>;
    public apiLoadStopsAutocompleteDescriptionDescriptionGet(description: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<LoadStopItemAutocompleteDescriptionResponse>>;
    public apiLoadStopsAutocompleteDescriptionDescriptionGet(description: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<LoadStopItemAutocompleteDescriptionResponse>>;
    public apiLoadStopsAutocompleteDescriptionDescriptionGet(description: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (description === null || description === undefined) {
            throw new Error('Required parameter description was null or undefined when calling apiLoadStopsAutocompleteDescriptionDescriptionGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/stops/autocomplete/description/${this.configuration.encodeParam({name: "description", value: description, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        return this.httpClient.request<LoadStopItemAutocompleteDescriptionResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadTemplateIdDelete(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiLoadTemplateIdDelete(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiLoadTemplateIdDelete(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiLoadTemplateIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiLoadTemplateIdDelete.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/template/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadTemplateIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<LoadTemplateResponse>;
    public apiLoadTemplateIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<LoadTemplateResponse>>;
    public apiLoadTemplateIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<LoadTemplateResponse>>;
    public apiLoadTemplateIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiLoadTemplateIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/template/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<LoadTemplateResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ids 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadTemplateListDelete(ids?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiLoadTemplateListDelete(ids?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiLoadTemplateListDelete(ids?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiLoadTemplateListDelete(ids?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ids) {
            ids.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'Ids');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/template/list`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param loadType 
     * @param revenueFrom 
     * @param revenueTo 
     * @param loadId 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadTemplateListGet(loadType?: number, revenueFrom?: number, revenueTo?: number, loadId?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<LoadTemplateListResponse>;
    public apiLoadTemplateListGet(loadType?: number, revenueFrom?: number, revenueTo?: number, loadId?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<LoadTemplateListResponse>>;
    public apiLoadTemplateListGet(loadType?: number, revenueFrom?: number, revenueTo?: number, loadId?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<LoadTemplateListResponse>>;
    public apiLoadTemplateListGet(loadType?: number, revenueFrom?: number, revenueTo?: number, loadId?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (loadType !== undefined && loadType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>loadType, 'LoadType');
        }
        if (revenueFrom !== undefined && revenueFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>revenueFrom, 'RevenueFrom');
        }
        if (revenueTo !== undefined && revenueTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>revenueTo, 'RevenueTo');
        }
        if (loadId !== undefined && loadId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>loadId, 'LoadId');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search2, 'Search2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/template/list`;
        return this.httpClient.request<LoadTemplateListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param createLoadTemplateCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadTemplatePost(createLoadTemplateCommand?: CreateLoadTemplateCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<CreateResponse>;
    public apiLoadTemplatePost(createLoadTemplateCommand?: CreateLoadTemplateCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<CreateResponse>>;
    public apiLoadTemplatePost(createLoadTemplateCommand?: CreateLoadTemplateCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<CreateResponse>>;
    public apiLoadTemplatePost(createLoadTemplateCommand?: CreateLoadTemplateCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/template`;
        return this.httpClient.request<CreateResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: createLoadTemplateCommand,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param updateLoadTemplateCommand 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiLoadTemplatePut(updateLoadTemplateCommand?: UpdateLoadTemplateCommand, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiLoadTemplatePut(updateLoadTemplateCommand?: UpdateLoadTemplateCommand, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiLoadTemplatePut(updateLoadTemplateCommand?: UpdateLoadTemplateCommand, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiLoadTemplatePut(updateLoadTemplateCommand?: UpdateLoadTemplateCommand, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (ApiKeyInQueryParams) required
        localVarCredential = this.configuration.lookupCredential('ApiKeyInQueryParams');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('ApiKey', localVarCredential);
        }

        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/load/template`;
        return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: updateLoadTemplateCommand,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
