/**
 * Truckassist API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { AccidentListResponse } from '../model/models';
import { AccidentMinimalListResponse } from '../model/models';
import { AccidentModalResponse } from '../model/models';
import { AccidentResponse } from '../model/models';
import { ClusterResponse } from '../model/models';
import { CreateWithUploadsResponse } from '../model/models';
import { FileResponse } from '../model/models';

import { ProblemDetails } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { InsuranceTypeCommand } from '../model/insuranceTypeCommand';

@Injectable({
  providedIn: 'root',
})
export class AccidentService {
  protected basePath = 'http://localhost';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string
  ): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string
  ): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10)
          );
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k
            ))
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * @param northEastLatitude
   * @param northEastLongitude
   * @param southWestLatitude
   * @param southWestLongitude
   * @param zoomLevel
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentClustersGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    zoomLevel?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<Array<ClusterResponse>>;
  public apiAccidentClustersGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    zoomLevel?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<Array<ClusterResponse>>>;
  public apiAccidentClustersGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    zoomLevel?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<Array<ClusterResponse>>>;
  public apiAccidentClustersGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    zoomLevel?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (northEastLatitude !== undefined && northEastLatitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>northEastLatitude,
        'NorthEastLatitude'
      );
    }
    if (northEastLongitude !== undefined && northEastLongitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>northEastLongitude,
        'NorthEastLongitude'
      );
    }
    if (southWestLatitude !== undefined && southWestLatitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>southWestLatitude,
        'SouthWestLatitude'
      );
    }
    if (southWestLongitude !== undefined && southWestLongitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>southWestLongitude,
        'SouthWestLongitude'
      );
    }
    if (zoomLevel !== undefined && zoomLevel !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>zoomLevel,
        'ZoomLevel'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<Array<ClusterResponse>>(
      `${this.configuration.basePath}/api/accident/clusters`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentFilesIdGet(
    id: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<Array<FileResponse>>;
  public apiAccidentFilesIdGet(
    id: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<Array<FileResponse>>>;
  public apiAccidentFilesIdGet(
    id: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<Array<FileResponse>>>;
  public apiAccidentFilesIdGet(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling apiAccidentFilesIdGet.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<Array<FileResponse>>(
      `${this.configuration.basePath}/api/accident/files/${encodeURIComponent(
        String(id)
      )}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentIdDelete(
    id: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any>;
  public apiAccidentIdDelete(
    id: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<any>>;
  public apiAccidentIdDelete(
    id: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<any>>;
  public apiAccidentIdDelete(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling apiAccidentIdDelete.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.delete<any>(
      `${this.configuration.basePath}/api/accident/${encodeURIComponent(
        String(id)
      )}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentIdGet(
    id: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<AccidentResponse>;
  public apiAccidentIdGet(
    id: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<AccidentResponse>>;
  public apiAccidentIdGet(
    id: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<AccidentResponse>>;
  public apiAccidentIdGet(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling apiAccidentIdGet.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<AccidentResponse>(
      `${this.configuration.basePath}/api/accident/${encodeURIComponent(
        String(id)
      )}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param ids
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentListDelete(
    ids?: Array<number>,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any>;
  public apiAccidentListDelete(
    ids?: Array<number>,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<any>>;
  public apiAccidentListDelete(
    ids?: Array<number>,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<any>>;
  public apiAccidentListDelete(
    ids?: Array<number>,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (ids) {
      ids.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'Ids'
        );
      });
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.delete<any>(
      `${this.configuration.basePath}/api/accident/list`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param active
   * @param reported
   * @param dateFrom
   * @param dateTo
   * @param _long
   * @param lat
   * @param distance
   * @param driverIds
   * @param truckIds
   * @param trailerIds
   * @param injury
   * @param fatality
   * @param towing
   * @param hazMat
   * @param pageIndex
   * @param pageSize
   * @param companyId
   * @param sort
   * @param search
   * @param search1
   * @param search2
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentListGet(
    active?: boolean,
    reported?: boolean,
    dateFrom?: string,
    dateTo?: string,
    _long?: number,
    lat?: number,
    distance?: number,
    driverIds?: Array<number>,
    truckIds?: Array<number>,
    trailerIds?: Array<number>,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<AccidentListResponse>;
  public apiAccidentListGet(
    active?: boolean,
    reported?: boolean,
    dateFrom?: string,
    dateTo?: string,
    _long?: number,
    lat?: number,
    distance?: number,
    driverIds?: Array<number>,
    truckIds?: Array<number>,
    trailerIds?: Array<number>,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<AccidentListResponse>>;
  public apiAccidentListGet(
    active?: boolean,
    reported?: boolean,
    dateFrom?: string,
    dateTo?: string,
    _long?: number,
    lat?: number,
    distance?: number,
    driverIds?: Array<number>,
    truckIds?: Array<number>,
    trailerIds?: Array<number>,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<AccidentListResponse>>;
  public apiAccidentListGet(
    active?: boolean,
    reported?: boolean,
    dateFrom?: string,
    dateTo?: string,
    _long?: number,
    lat?: number,
    distance?: number,
    driverIds?: Array<number>,
    truckIds?: Array<number>,
    trailerIds?: Array<number>,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (active !== undefined && active !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>active,
        'Active'
      );
    }
    if (reported !== undefined && reported !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>reported,
        'Reported'
      );
    }
    if (dateFrom !== undefined && dateFrom !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>dateFrom,
        'DateFrom'
      );
    }
    if (dateTo !== undefined && dateTo !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>dateTo,
        'DateTo'
      );
    }
    if (_long !== undefined && _long !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>_long,
        'Long'
      );
    }
    if (lat !== undefined && lat !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>lat, 'Lat');
    }
    if (distance !== undefined && distance !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>distance,
        'Distance'
      );
    }
    if (driverIds) {
      driverIds.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'DriverIds'
        );
      });
    }
    if (truckIds) {
      truckIds.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'TruckIds'
        );
      });
    }
    if (trailerIds) {
      trailerIds.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'TrailerIds'
        );
      });
    }
    if (injury !== undefined && injury !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>injury,
        'Injury'
      );
    }
    if (fatality !== undefined && fatality !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>fatality,
        'Fatality'
      );
    }
    if (towing !== undefined && towing !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>towing,
        'Towing'
      );
    }
    if (hazMat !== undefined && hazMat !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>hazMat,
        'HazMat'
      );
    }
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageIndex,
        'PageIndex'
      );
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageSize,
        'PageSize'
      );
    }
    if (companyId !== undefined && companyId !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>companyId,
        'CompanyId'
      );
    }
    if (sort !== undefined && sort !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>sort,
        'Sort'
      );
    }
    if (search !== undefined && search !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search,
        'Search'
      );
    }
    if (search1 !== undefined && search1 !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search1,
        'Search1'
      );
    }
    if (search2 !== undefined && search2 !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search2,
        'Search2'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<AccidentListResponse>(
      `${this.configuration.basePath}/api/accident/list`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param pageIndex
   * @param pageSize
   * @param companyId
   * @param search
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentListMinimalGet(
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    search?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<AccidentMinimalListResponse>;
  public apiAccidentListMinimalGet(
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    search?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<AccidentMinimalListResponse>>;
  public apiAccidentListMinimalGet(
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    search?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<AccidentMinimalListResponse>>;
  public apiAccidentListMinimalGet(
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    search?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageIndex,
        'PageIndex'
      );
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageSize,
        'PageSize'
      );
    }
    if (companyId !== undefined && companyId !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>companyId,
        'CompanyId'
      );
    }
    if (search !== undefined && search !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search,
        'Search'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<AccidentMinimalListResponse>(
      `${this.configuration.basePath}/api/accident/list/minimal`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param northEastLatitude
   * @param northEastLongitude
   * @param southWestLatitude
   * @param southWestLongitude
   * @param pageIndex
   * @param pageSize
   * @param companyId
   * @param sort
   * @param search
   * @param search1
   * @param search2
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentListmapGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<AccidentListResponse>;
  public apiAccidentListmapGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<AccidentListResponse>>;
  public apiAccidentListmapGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<AccidentListResponse>>;
  public apiAccidentListmapGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (northEastLatitude !== undefined && northEastLatitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>northEastLatitude,
        'NorthEastLatitude'
      );
    }
    if (northEastLongitude !== undefined && northEastLongitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>northEastLongitude,
        'NorthEastLongitude'
      );
    }
    if (southWestLatitude !== undefined && southWestLatitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>southWestLatitude,
        'SouthWestLatitude'
      );
    }
    if (southWestLongitude !== undefined && southWestLongitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>southWestLongitude,
        'SouthWestLongitude'
      );
    }
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageIndex,
        'PageIndex'
      );
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageSize,
        'PageSize'
      );
    }
    if (companyId !== undefined && companyId !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>companyId,
        'CompanyId'
      );
    }
    if (sort !== undefined && sort !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>sort,
        'Sort'
      );
    }
    if (search !== undefined && search !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search,
        'Search'
      );
    }
    if (search1 !== undefined && search1 !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search1,
        'Search1'
      );
    }
    if (search2 !== undefined && search2 !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search2,
        'Search2'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<AccidentListResponse>(
      `${this.configuration.basePath}/api/accident/listmap`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentModalGet(
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<AccidentModalResponse>;
  public apiAccidentModalGet(
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<AccidentModalResponse>>;
  public apiAccidentModalGet(
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<AccidentModalResponse>>;
  public apiAccidentModalGet(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<AccidentModalResponse>(
      `${this.configuration.basePath}/api/accident/modal`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param report
   * @param injury
   * @param fatality
   * @param towing
   * @param hazMat
   * @param vehicloNo
   * @param addressAccidentCity
   * @param addressAccidentState
   * @param addressAccidentCounty
   * @param addressAccidentAddress
   * @param addressAccidentStreet
   * @param addressAccidentStreetNumber
   * @param addressAccidentCountry
   * @param addressAccidentZipCode
   * @param addressAccidentStateShortName
   * @param addressAccidentAddressUnit
   * @param longitude
   * @param latitude
   * @param date
   * @param time
   * @param driverId
   * @param truckId
   * @param trailerChecked
   * @param trailerId
   * @param insuranceType
   * @param roadwayTrafficway
   * @param weatherCondition
   * @param roadAccessControl
   * @param roadSurfaceCondition
   * @param lightCondition
   * @param reportingAgency
   * @param policeOfficer
   * @param bagdeNo
   * @param addressAuthorityCity
   * @param addressAuthorityState
   * @param addressAuthorityCounty
   * @param addressAuthorityAddress
   * @param addressAuthorityStreet
   * @param addressAuthorityStreetNumber
   * @param addressAuthorityCountry
   * @param addressAuthorityZipCode
   * @param addressAuthorityStateShortName
   * @param addressAuthorityAddressUnit
   * @param phoneOfficer
   * @param fax
   * @param originCity
   * @param originState
   * @param originCounty
   * @param originAddress
   * @param originStreet
   * @param originStreetNumber
   * @param originCountry
   * @param originZipCode
   * @param originStateShortName
   * @param originAddressUnit
   * @param destinationCity
   * @param destinationState
   * @param destinationCounty
   * @param destinationAddress
   * @param destinationStreet
   * @param destinationStreetNumber
   * @param destinationCountry
   * @param destinationZipCode
   * @param destinationStateShortName
   * @param destinationAddressUnit
   * @param brokerId
   * @param boL
   * @param cargo
   * @param files
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentPost(
    report?: string,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    vehicloNo?: number,
    addressAccidentCity?: string,
    addressAccidentState?: string,
    addressAccidentCounty?: string,
    addressAccidentAddress?: string,
    addressAccidentStreet?: string,
    addressAccidentStreetNumber?: string,
    addressAccidentCountry?: string,
    addressAccidentZipCode?: string,
    addressAccidentStateShortName?: string,
    addressAccidentAddressUnit?: string,
    longitude?: number,
    latitude?: number,
    date?: string,
    time?: string,
    driverId?: number,
    truckId?: number,
    trailerChecked?: boolean,
    trailerId?: number,
    insuranceType?: Array<InsuranceTypeCommand>,
    roadwayTrafficway?: string,
    weatherCondition?: string,
    roadAccessControl?: string,
    roadSurfaceCondition?: string,
    lightCondition?: string,
    reportingAgency?: string,
    policeOfficer?: string,
    bagdeNo?: string,
    addressAuthorityCity?: string,
    addressAuthorityState?: string,
    addressAuthorityCounty?: string,
    addressAuthorityAddress?: string,
    addressAuthorityStreet?: string,
    addressAuthorityStreetNumber?: string,
    addressAuthorityCountry?: string,
    addressAuthorityZipCode?: string,
    addressAuthorityStateShortName?: string,
    addressAuthorityAddressUnit?: string,
    phoneOfficer?: string,
    fax?: string,
    originCity?: string,
    originState?: string,
    originCounty?: string,
    originAddress?: string,
    originStreet?: string,
    originStreetNumber?: string,
    originCountry?: string,
    originZipCode?: string,
    originStateShortName?: string,
    originAddressUnit?: string,
    destinationCity?: string,
    destinationState?: string,
    destinationCounty?: string,
    destinationAddress?: string,
    destinationStreet?: string,
    destinationStreetNumber?: string,
    destinationCountry?: string,
    destinationZipCode?: string,
    destinationStateShortName?: string,
    destinationAddressUnit?: string,
    brokerId?: number,
    boL?: string,
    cargo?: string,
    files?: Array<Blob>,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<CreateWithUploadsResponse>;
  public apiAccidentPost(
    report?: string,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    vehicloNo?: number,
    addressAccidentCity?: string,
    addressAccidentState?: string,
    addressAccidentCounty?: string,
    addressAccidentAddress?: string,
    addressAccidentStreet?: string,
    addressAccidentStreetNumber?: string,
    addressAccidentCountry?: string,
    addressAccidentZipCode?: string,
    addressAccidentStateShortName?: string,
    addressAccidentAddressUnit?: string,
    longitude?: number,
    latitude?: number,
    date?: string,
    time?: string,
    driverId?: number,
    truckId?: number,
    trailerChecked?: boolean,
    trailerId?: number,
    insuranceType?: Array<InsuranceTypeCommand>,
    roadwayTrafficway?: string,
    weatherCondition?: string,
    roadAccessControl?: string,
    roadSurfaceCondition?: string,
    lightCondition?: string,
    reportingAgency?: string,
    policeOfficer?: string,
    bagdeNo?: string,
    addressAuthorityCity?: string,
    addressAuthorityState?: string,
    addressAuthorityCounty?: string,
    addressAuthorityAddress?: string,
    addressAuthorityStreet?: string,
    addressAuthorityStreetNumber?: string,
    addressAuthorityCountry?: string,
    addressAuthorityZipCode?: string,
    addressAuthorityStateShortName?: string,
    addressAuthorityAddressUnit?: string,
    phoneOfficer?: string,
    fax?: string,
    originCity?: string,
    originState?: string,
    originCounty?: string,
    originAddress?: string,
    originStreet?: string,
    originStreetNumber?: string,
    originCountry?: string,
    originZipCode?: string,
    originStateShortName?: string,
    originAddressUnit?: string,
    destinationCity?: string,
    destinationState?: string,
    destinationCounty?: string,
    destinationAddress?: string,
    destinationStreet?: string,
    destinationStreetNumber?: string,
    destinationCountry?: string,
    destinationZipCode?: string,
    destinationStateShortName?: string,
    destinationAddressUnit?: string,
    brokerId?: number,
    boL?: string,
    cargo?: string,
    files?: Array<Blob>,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<CreateWithUploadsResponse>>;
  public apiAccidentPost(
    report?: string,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    vehicloNo?: number,
    addressAccidentCity?: string,
    addressAccidentState?: string,
    addressAccidentCounty?: string,
    addressAccidentAddress?: string,
    addressAccidentStreet?: string,
    addressAccidentStreetNumber?: string,
    addressAccidentCountry?: string,
    addressAccidentZipCode?: string,
    addressAccidentStateShortName?: string,
    addressAccidentAddressUnit?: string,
    longitude?: number,
    latitude?: number,
    date?: string,
    time?: string,
    driverId?: number,
    truckId?: number,
    trailerChecked?: boolean,
    trailerId?: number,
    insuranceType?: Array<InsuranceTypeCommand>,
    roadwayTrafficway?: string,
    weatherCondition?: string,
    roadAccessControl?: string,
    roadSurfaceCondition?: string,
    lightCondition?: string,
    reportingAgency?: string,
    policeOfficer?: string,
    bagdeNo?: string,
    addressAuthorityCity?: string,
    addressAuthorityState?: string,
    addressAuthorityCounty?: string,
    addressAuthorityAddress?: string,
    addressAuthorityStreet?: string,
    addressAuthorityStreetNumber?: string,
    addressAuthorityCountry?: string,
    addressAuthorityZipCode?: string,
    addressAuthorityStateShortName?: string,
    addressAuthorityAddressUnit?: string,
    phoneOfficer?: string,
    fax?: string,
    originCity?: string,
    originState?: string,
    originCounty?: string,
    originAddress?: string,
    originStreet?: string,
    originStreetNumber?: string,
    originCountry?: string,
    originZipCode?: string,
    originStateShortName?: string,
    originAddressUnit?: string,
    destinationCity?: string,
    destinationState?: string,
    destinationCounty?: string,
    destinationAddress?: string,
    destinationStreet?: string,
    destinationStreetNumber?: string,
    destinationCountry?: string,
    destinationZipCode?: string,
    destinationStateShortName?: string,
    destinationAddressUnit?: string,
    brokerId?: number,
    boL?: string,
    cargo?: string,
    files?: Array<Blob>,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<CreateWithUploadsResponse>>;
  public apiAccidentPost(
    report?: string,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    vehicloNo?: number,
    addressAccidentCity?: string,
    addressAccidentState?: string,
    addressAccidentCounty?: string,
    addressAccidentAddress?: string,
    addressAccidentStreet?: string,
    addressAccidentStreetNumber?: string,
    addressAccidentCountry?: string,
    addressAccidentZipCode?: string,
    addressAccidentStateShortName?: string,
    addressAccidentAddressUnit?: string,
    longitude?: number,
    latitude?: number,
    date?: string,
    time?: string,
    driverId?: number,
    truckId?: number,
    trailerChecked?: boolean,
    trailerId?: number,
    insuranceType?: Array<InsuranceTypeCommand>,
    roadwayTrafficway?: string,
    weatherCondition?: string,
    roadAccessControl?: string,
    roadSurfaceCondition?: string,
    lightCondition?: string,
    reportingAgency?: string,
    policeOfficer?: string,
    bagdeNo?: string,
    addressAuthorityCity?: string,
    addressAuthorityState?: string,
    addressAuthorityCounty?: string,
    addressAuthorityAddress?: string,
    addressAuthorityStreet?: string,
    addressAuthorityStreetNumber?: string,
    addressAuthorityCountry?: string,
    addressAuthorityZipCode?: string,
    addressAuthorityStateShortName?: string,
    addressAuthorityAddressUnit?: string,
    phoneOfficer?: string,
    fax?: string,
    originCity?: string,
    originState?: string,
    originCounty?: string,
    originAddress?: string,
    originStreet?: string,
    originStreetNumber?: string,
    originCountry?: string,
    originZipCode?: string,
    originStateShortName?: string,
    originAddressUnit?: string,
    destinationCity?: string,
    destinationState?: string,
    destinationCounty?: string,
    destinationAddress?: string,
    destinationStreet?: string,
    destinationStreetNumber?: string,
    destinationCountry?: string,
    destinationZipCode?: string,
    destinationStateShortName?: string,
    destinationAddressUnit?: string,
    brokerId?: number,
    boL?: string,
    cargo?: string,
    files?: Array<Blob>,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['multipart/form-data'];

    const canConsumeForm = this.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    let convertFormParamsToString = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new HttpParams({ encoder: this.encoder });
    }

    if (report !== undefined) {
      formParams =
        (formParams.append('Report', <any>report) as any) || formParams;
    }
    if (injury !== undefined) {
      formParams =
        (formParams.append('Injury', <any>injury) as any) || formParams;
    }
    if (fatality !== undefined) {
      formParams =
        (formParams.append('Fatality', <any>fatality) as any) || formParams;
    }
    if (towing !== undefined) {
      formParams =
        (formParams.append('Towing', <any>towing) as any) || formParams;
    }
    if (hazMat !== undefined) {
      formParams =
        (formParams.append('HazMat', <any>hazMat) as any) || formParams;
    }
    if (vehicloNo !== undefined) {
      formParams =
        (formParams.append('VehicloNo', <any>vehicloNo) as any) || formParams;
    }
    if (addressAccidentCity !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.City',
          <any>addressAccidentCity
        ) as any) || formParams;
    }
    if (addressAccidentState !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.State',
          <any>addressAccidentState
        ) as any) || formParams;
    }
    if (addressAccidentCounty !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.County',
          <any>addressAccidentCounty
        ) as any) || formParams;
    }
    if (addressAccidentAddress !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.Address',
          <any>addressAccidentAddress
        ) as any) || formParams;
    }
    if (addressAccidentStreet !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.Street',
          <any>addressAccidentStreet
        ) as any) || formParams;
    }
    if (addressAccidentStreetNumber !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.StreetNumber',
          <any>addressAccidentStreetNumber
        ) as any) || formParams;
    }
    if (addressAccidentCountry !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.Country',
          <any>addressAccidentCountry
        ) as any) || formParams;
    }
    if (addressAccidentZipCode !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.ZipCode',
          <any>addressAccidentZipCode
        ) as any) || formParams;
    }
    if (addressAccidentStateShortName !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.StateShortName',
          <any>addressAccidentStateShortName
        ) as any) || formParams;
    }
    if (addressAccidentAddressUnit !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.AddressUnit',
          <any>addressAccidentAddressUnit
        ) as any) || formParams;
    }
    if (longitude !== undefined) {
      formParams =
        (formParams.append('Longitude', <any>longitude) as any) || formParams;
    }
    if (latitude !== undefined) {
      formParams =
        (formParams.append('Latitude', <any>latitude) as any) || formParams;
    }
    if (date !== undefined) {
      formParams = (formParams.append('Date', <any>date) as any) || formParams;
    }
    if (time !== undefined) {
      formParams = (formParams.append('Time', <any>time) as any) || formParams;
    }
    if (driverId !== undefined) {
      formParams =
        (formParams.append('DriverId', <any>driverId) as any) || formParams;
    }
    if (truckId !== undefined) {
      formParams =
        (formParams.append('TruckId', <any>truckId) as any) || formParams;
    }
    if (trailerChecked !== undefined) {
      formParams =
        (formParams.append('TrailerChecked', <any>trailerChecked) as any) ||
        formParams;
    }
    if (trailerId !== undefined) {
      formParams =
        (formParams.append('TrailerId', <any>trailerId) as any) || formParams;
    }
    if (insuranceType) {
      if (useForm) {
        insuranceType.forEach((element) => {
          formParams =
            (formParams.append('InsuranceType', <any>element) as any) ||
            formParams;
        });
      } else {
        formParams =
          (formParams.append(
            'InsuranceType',
            insuranceType.join(COLLECTION_FORMATS['csv'])
          ) as any) || formParams;
      }
    }
    if (roadwayTrafficway !== undefined) {
      formParams =
        (formParams.append(
          'RoadwayTrafficway',
          <any>roadwayTrafficway
        ) as any) || formParams;
    }
    if (weatherCondition !== undefined) {
      formParams =
        (formParams.append('WeatherCondition', <any>weatherCondition) as any) ||
        formParams;
    }
    if (roadAccessControl !== undefined) {
      formParams =
        (formParams.append(
          'RoadAccessControl',
          <any>roadAccessControl
        ) as any) || formParams;
    }
    if (roadSurfaceCondition !== undefined) {
      formParams =
        (formParams.append(
          'RoadSurfaceCondition',
          <any>roadSurfaceCondition
        ) as any) || formParams;
    }
    if (lightCondition !== undefined) {
      formParams =
        (formParams.append('LightCondition', <any>lightCondition) as any) ||
        formParams;
    }
    if (reportingAgency !== undefined) {
      formParams =
        (formParams.append('ReportingAgency', <any>reportingAgency) as any) ||
        formParams;
    }
    if (policeOfficer !== undefined) {
      formParams =
        (formParams.append('PoliceOfficer', <any>policeOfficer) as any) ||
        formParams;
    }
    if (bagdeNo !== undefined) {
      formParams =
        (formParams.append('BagdeNo', <any>bagdeNo) as any) || formParams;
    }
    if (addressAuthorityCity !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.City',
          <any>addressAuthorityCity
        ) as any) || formParams;
    }
    if (addressAuthorityState !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.State',
          <any>addressAuthorityState
        ) as any) || formParams;
    }
    if (addressAuthorityCounty !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.County',
          <any>addressAuthorityCounty
        ) as any) || formParams;
    }
    if (addressAuthorityAddress !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.Address',
          <any>addressAuthorityAddress
        ) as any) || formParams;
    }
    if (addressAuthorityStreet !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.Street',
          <any>addressAuthorityStreet
        ) as any) || formParams;
    }
    if (addressAuthorityStreetNumber !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.StreetNumber',
          <any>addressAuthorityStreetNumber
        ) as any) || formParams;
    }
    if (addressAuthorityCountry !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.Country',
          <any>addressAuthorityCountry
        ) as any) || formParams;
    }
    if (addressAuthorityZipCode !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.ZipCode',
          <any>addressAuthorityZipCode
        ) as any) || formParams;
    }
    if (addressAuthorityStateShortName !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.StateShortName',
          <any>addressAuthorityStateShortName
        ) as any) || formParams;
    }
    if (addressAuthorityAddressUnit !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.AddressUnit',
          <any>addressAuthorityAddressUnit
        ) as any) || formParams;
    }
    if (phoneOfficer !== undefined) {
      formParams =
        (formParams.append('PhoneOfficer', <any>phoneOfficer) as any) ||
        formParams;
    }
    if (fax !== undefined) {
      formParams = (formParams.append('Fax', <any>fax) as any) || formParams;
    }
    if (originCity !== undefined) {
      formParams =
        (formParams.append('Origin.City', <any>originCity) as any) ||
        formParams;
    }
    if (originState !== undefined) {
      formParams =
        (formParams.append('Origin.State', <any>originState) as any) ||
        formParams;
    }
    if (originCounty !== undefined) {
      formParams =
        (formParams.append('Origin.County', <any>originCounty) as any) ||
        formParams;
    }
    if (originAddress !== undefined) {
      formParams =
        (formParams.append('Origin.Address', <any>originAddress) as any) ||
        formParams;
    }
    if (originStreet !== undefined) {
      formParams =
        (formParams.append('Origin.Street', <any>originStreet) as any) ||
        formParams;
    }
    if (originStreetNumber !== undefined) {
      formParams =
        (formParams.append(
          'Origin.StreetNumber',
          <any>originStreetNumber
        ) as any) || formParams;
    }
    if (originCountry !== undefined) {
      formParams =
        (formParams.append('Origin.Country', <any>originCountry) as any) ||
        formParams;
    }
    if (originZipCode !== undefined) {
      formParams =
        (formParams.append('Origin.ZipCode', <any>originZipCode) as any) ||
        formParams;
    }
    if (originStateShortName !== undefined) {
      formParams =
        (formParams.append(
          'Origin.StateShortName',
          <any>originStateShortName
        ) as any) || formParams;
    }
    if (originAddressUnit !== undefined) {
      formParams =
        (formParams.append(
          'Origin.AddressUnit',
          <any>originAddressUnit
        ) as any) || formParams;
    }
    if (destinationCity !== undefined) {
      formParams =
        (formParams.append('Destination.City', <any>destinationCity) as any) ||
        formParams;
    }
    if (destinationState !== undefined) {
      formParams =
        (formParams.append(
          'Destination.State',
          <any>destinationState
        ) as any) || formParams;
    }
    if (destinationCounty !== undefined) {
      formParams =
        (formParams.append(
          'Destination.County',
          <any>destinationCounty
        ) as any) || formParams;
    }
    if (destinationAddress !== undefined) {
      formParams =
        (formParams.append(
          'Destination.Address',
          <any>destinationAddress
        ) as any) || formParams;
    }
    if (destinationStreet !== undefined) {
      formParams =
        (formParams.append(
          'Destination.Street',
          <any>destinationStreet
        ) as any) || formParams;
    }
    if (destinationStreetNumber !== undefined) {
      formParams =
        (formParams.append(
          'Destination.StreetNumber',
          <any>destinationStreetNumber
        ) as any) || formParams;
    }
    if (destinationCountry !== undefined) {
      formParams =
        (formParams.append(
          'Destination.Country',
          <any>destinationCountry
        ) as any) || formParams;
    }
    if (destinationZipCode !== undefined) {
      formParams =
        (formParams.append(
          'Destination.ZipCode',
          <any>destinationZipCode
        ) as any) || formParams;
    }
    if (destinationStateShortName !== undefined) {
      formParams =
        (formParams.append(
          'Destination.StateShortName',
          <any>destinationStateShortName
        ) as any) || formParams;
    }
    if (destinationAddressUnit !== undefined) {
      formParams =
        (formParams.append(
          'Destination.AddressUnit',
          <any>destinationAddressUnit
        ) as any) || formParams;
    }
    if (brokerId !== undefined) {
      formParams =
        (formParams.append('BrokerId', <any>brokerId) as any) || formParams;
    }
    if (boL !== undefined) {
      formParams = (formParams.append('BoL', <any>boL) as any) || formParams;
    }
    if (cargo !== undefined) {
      formParams =
        (formParams.append('Cargo', <any>cargo) as any) || formParams;
    }
    if (files) {
      if (useForm) {
        files.forEach((element) => {
          formParams =
            (formParams.append('Files', <any>element) as any) || formParams;
        });
      } else {
        formParams =
          (formParams.append(
            'Files',
            files.join(COLLECTION_FORMATS['csv'])
          ) as any) || formParams;
      }
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.post<CreateWithUploadsResponse>(
      `${this.configuration.basePath}/api/accident`,
      convertFormParamsToString ? formParams.toString() : formParams,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param id
   * @param report
   * @param injury
   * @param fatality
   * @param towing
   * @param hazMat
   * @param vehicloNo
   * @param addressAccidentCity
   * @param addressAccidentState
   * @param addressAccidentCounty
   * @param addressAccidentAddress
   * @param addressAccidentStreet
   * @param addressAccidentStreetNumber
   * @param addressAccidentCountry
   * @param addressAccidentZipCode
   * @param addressAccidentStateShortName
   * @param addressAccidentAddressUnit
   * @param longitude
   * @param latitude
   * @param date
   * @param time
   * @param driverId
   * @param truckId
   * @param trailerChecked
   * @param trailerId
   * @param insuranceType
   * @param roadwayTrafficway
   * @param weatherCondition
   * @param roadAccessControl
   * @param roadSurfaceCondition
   * @param lightCondition
   * @param reportingAgency
   * @param policeOfficer
   * @param bagdeNo
   * @param addressAuthorityCity
   * @param addressAuthorityState
   * @param addressAuthorityCounty
   * @param addressAuthorityAddress
   * @param addressAuthorityStreet
   * @param addressAuthorityStreetNumber
   * @param addressAuthorityCountry
   * @param addressAuthorityZipCode
   * @param addressAuthorityStateShortName
   * @param addressAuthorityAddressUnit
   * @param phoneOfficer
   * @param fax
   * @param originCity
   * @param originState
   * @param originCounty
   * @param originAddress
   * @param originStreet
   * @param originStreetNumber
   * @param originCountry
   * @param originZipCode
   * @param originStateShortName
   * @param originAddressUnit
   * @param destinationCity
   * @param destinationState
   * @param destinationCounty
   * @param destinationAddress
   * @param destinationStreet
   * @param destinationStreetNumber
   * @param destinationCountry
   * @param destinationZipCode
   * @param destinationStateShortName
   * @param destinationAddressUnit
   * @param brokerId
   * @param boL
   * @param cargo
   * @param files
   * @param filesForDeleteIds
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentPut(
    id?: number,
    report?: string,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    vehicloNo?: number,
    addressAccidentCity?: string,
    addressAccidentState?: string,
    addressAccidentCounty?: string,
    addressAccidentAddress?: string,
    addressAccidentStreet?: string,
    addressAccidentStreetNumber?: string,
    addressAccidentCountry?: string,
    addressAccidentZipCode?: string,
    addressAccidentStateShortName?: string,
    addressAccidentAddressUnit?: string,
    longitude?: number,
    latitude?: number,
    date?: string,
    time?: string,
    driverId?: number,
    truckId?: number,
    trailerChecked?: boolean,
    trailerId?: number,
    insuranceType?: Array<InsuranceTypeCommand>,
    roadwayTrafficway?: string,
    weatherCondition?: string,
    roadAccessControl?: string,
    roadSurfaceCondition?: string,
    lightCondition?: string,
    reportingAgency?: string,
    policeOfficer?: string,
    bagdeNo?: string,
    addressAuthorityCity?: string,
    addressAuthorityState?: string,
    addressAuthorityCounty?: string,
    addressAuthorityAddress?: string,
    addressAuthorityStreet?: string,
    addressAuthorityStreetNumber?: string,
    addressAuthorityCountry?: string,
    addressAuthorityZipCode?: string,
    addressAuthorityStateShortName?: string,
    addressAuthorityAddressUnit?: string,
    phoneOfficer?: string,
    fax?: string,
    originCity?: string,
    originState?: string,
    originCounty?: string,
    originAddress?: string,
    originStreet?: string,
    originStreetNumber?: string,
    originCountry?: string,
    originZipCode?: string,
    originStateShortName?: string,
    originAddressUnit?: string,
    destinationCity?: string,
    destinationState?: string,
    destinationCounty?: string,
    destinationAddress?: string,
    destinationStreet?: string,
    destinationStreetNumber?: string,
    destinationCountry?: string,
    destinationZipCode?: string,
    destinationStateShortName?: string,
    destinationAddressUnit?: string,
    brokerId?: number,
    boL?: string,
    cargo?: string,
    files?: Array<Blob>,
    filesForDeleteIds?: Array<number>,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<CreateWithUploadsResponse>;
  public apiAccidentPut(
    id?: number,
    report?: string,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    vehicloNo?: number,
    addressAccidentCity?: string,
    addressAccidentState?: string,
    addressAccidentCounty?: string,
    addressAccidentAddress?: string,
    addressAccidentStreet?: string,
    addressAccidentStreetNumber?: string,
    addressAccidentCountry?: string,
    addressAccidentZipCode?: string,
    addressAccidentStateShortName?: string,
    addressAccidentAddressUnit?: string,
    longitude?: number,
    latitude?: number,
    date?: string,
    time?: string,
    driverId?: number,
    truckId?: number,
    trailerChecked?: boolean,
    trailerId?: number,
    insuranceType?: Array<InsuranceTypeCommand>,
    roadwayTrafficway?: string,
    weatherCondition?: string,
    roadAccessControl?: string,
    roadSurfaceCondition?: string,
    lightCondition?: string,
    reportingAgency?: string,
    policeOfficer?: string,
    bagdeNo?: string,
    addressAuthorityCity?: string,
    addressAuthorityState?: string,
    addressAuthorityCounty?: string,
    addressAuthorityAddress?: string,
    addressAuthorityStreet?: string,
    addressAuthorityStreetNumber?: string,
    addressAuthorityCountry?: string,
    addressAuthorityZipCode?: string,
    addressAuthorityStateShortName?: string,
    addressAuthorityAddressUnit?: string,
    phoneOfficer?: string,
    fax?: string,
    originCity?: string,
    originState?: string,
    originCounty?: string,
    originAddress?: string,
    originStreet?: string,
    originStreetNumber?: string,
    originCountry?: string,
    originZipCode?: string,
    originStateShortName?: string,
    originAddressUnit?: string,
    destinationCity?: string,
    destinationState?: string,
    destinationCounty?: string,
    destinationAddress?: string,
    destinationStreet?: string,
    destinationStreetNumber?: string,
    destinationCountry?: string,
    destinationZipCode?: string,
    destinationStateShortName?: string,
    destinationAddressUnit?: string,
    brokerId?: number,
    boL?: string,
    cargo?: string,
    files?: Array<Blob>,
    filesForDeleteIds?: Array<number>,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<CreateWithUploadsResponse>>;
  public apiAccidentPut(
    id?: number,
    report?: string,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    vehicloNo?: number,
    addressAccidentCity?: string,
    addressAccidentState?: string,
    addressAccidentCounty?: string,
    addressAccidentAddress?: string,
    addressAccidentStreet?: string,
    addressAccidentStreetNumber?: string,
    addressAccidentCountry?: string,
    addressAccidentZipCode?: string,
    addressAccidentStateShortName?: string,
    addressAccidentAddressUnit?: string,
    longitude?: number,
    latitude?: number,
    date?: string,
    time?: string,
    driverId?: number,
    truckId?: number,
    trailerChecked?: boolean,
    trailerId?: number,
    insuranceType?: Array<InsuranceTypeCommand>,
    roadwayTrafficway?: string,
    weatherCondition?: string,
    roadAccessControl?: string,
    roadSurfaceCondition?: string,
    lightCondition?: string,
    reportingAgency?: string,
    policeOfficer?: string,
    bagdeNo?: string,
    addressAuthorityCity?: string,
    addressAuthorityState?: string,
    addressAuthorityCounty?: string,
    addressAuthorityAddress?: string,
    addressAuthorityStreet?: string,
    addressAuthorityStreetNumber?: string,
    addressAuthorityCountry?: string,
    addressAuthorityZipCode?: string,
    addressAuthorityStateShortName?: string,
    addressAuthorityAddressUnit?: string,
    phoneOfficer?: string,
    fax?: string,
    originCity?: string,
    originState?: string,
    originCounty?: string,
    originAddress?: string,
    originStreet?: string,
    originStreetNumber?: string,
    originCountry?: string,
    originZipCode?: string,
    originStateShortName?: string,
    originAddressUnit?: string,
    destinationCity?: string,
    destinationState?: string,
    destinationCounty?: string,
    destinationAddress?: string,
    destinationStreet?: string,
    destinationStreetNumber?: string,
    destinationCountry?: string,
    destinationZipCode?: string,
    destinationStateShortName?: string,
    destinationAddressUnit?: string,
    brokerId?: number,
    boL?: string,
    cargo?: string,
    files?: Array<Blob>,
    filesForDeleteIds?: Array<number>,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<CreateWithUploadsResponse>>;
  public apiAccidentPut(
    id?: number,
    report?: string,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    vehicloNo?: number,
    addressAccidentCity?: string,
    addressAccidentState?: string,
    addressAccidentCounty?: string,
    addressAccidentAddress?: string,
    addressAccidentStreet?: string,
    addressAccidentStreetNumber?: string,
    addressAccidentCountry?: string,
    addressAccidentZipCode?: string,
    addressAccidentStateShortName?: string,
    addressAccidentAddressUnit?: string,
    longitude?: number,
    latitude?: number,
    date?: string,
    time?: string,
    driverId?: number,
    truckId?: number,
    trailerChecked?: boolean,
    trailerId?: number,
    insuranceType?: Array<InsuranceTypeCommand>,
    roadwayTrafficway?: string,
    weatherCondition?: string,
    roadAccessControl?: string,
    roadSurfaceCondition?: string,
    lightCondition?: string,
    reportingAgency?: string,
    policeOfficer?: string,
    bagdeNo?: string,
    addressAuthorityCity?: string,
    addressAuthorityState?: string,
    addressAuthorityCounty?: string,
    addressAuthorityAddress?: string,
    addressAuthorityStreet?: string,
    addressAuthorityStreetNumber?: string,
    addressAuthorityCountry?: string,
    addressAuthorityZipCode?: string,
    addressAuthorityStateShortName?: string,
    addressAuthorityAddressUnit?: string,
    phoneOfficer?: string,
    fax?: string,
    originCity?: string,
    originState?: string,
    originCounty?: string,
    originAddress?: string,
    originStreet?: string,
    originStreetNumber?: string,
    originCountry?: string,
    originZipCode?: string,
    originStateShortName?: string,
    originAddressUnit?: string,
    destinationCity?: string,
    destinationState?: string,
    destinationCounty?: string,
    destinationAddress?: string,
    destinationStreet?: string,
    destinationStreetNumber?: string,
    destinationCountry?: string,
    destinationZipCode?: string,
    destinationStateShortName?: string,
    destinationAddressUnit?: string,
    brokerId?: number,
    boL?: string,
    cargo?: string,
    files?: Array<Blob>,
    filesForDeleteIds?: Array<number>,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['multipart/form-data'];

    const canConsumeForm = this.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    let convertFormParamsToString = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new HttpParams({ encoder: this.encoder });
    }

    if (id !== undefined) {
      formParams = (formParams.append('Id', <any>id) as any) || formParams;
    }
    if (report !== undefined) {
      formParams =
        (formParams.append('Report', <any>report) as any) || formParams;
    }
    if (injury !== undefined) {
      formParams =
        (formParams.append('Injury', <any>injury) as any) || formParams;
    }
    if (fatality !== undefined) {
      formParams =
        (formParams.append('Fatality', <any>fatality) as any) || formParams;
    }
    if (towing !== undefined) {
      formParams =
        (formParams.append('Towing', <any>towing) as any) || formParams;
    }
    if (hazMat !== undefined) {
      formParams =
        (formParams.append('HazMat', <any>hazMat) as any) || formParams;
    }
    if (vehicloNo !== undefined) {
      formParams =
        (formParams.append('VehicloNo', <any>vehicloNo) as any) || formParams;
    }
    if (addressAccidentCity !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.City',
          <any>addressAccidentCity
        ) as any) || formParams;
    }
    if (addressAccidentState !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.State',
          <any>addressAccidentState
        ) as any) || formParams;
    }
    if (addressAccidentCounty !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.County',
          <any>addressAccidentCounty
        ) as any) || formParams;
    }
    if (addressAccidentAddress !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.Address',
          <any>addressAccidentAddress
        ) as any) || formParams;
    }
    if (addressAccidentStreet !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.Street',
          <any>addressAccidentStreet
        ) as any) || formParams;
    }
    if (addressAccidentStreetNumber !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.StreetNumber',
          <any>addressAccidentStreetNumber
        ) as any) || formParams;
    }
    if (addressAccidentCountry !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.Country',
          <any>addressAccidentCountry
        ) as any) || formParams;
    }
    if (addressAccidentZipCode !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.ZipCode',
          <any>addressAccidentZipCode
        ) as any) || formParams;
    }
    if (addressAccidentStateShortName !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.StateShortName',
          <any>addressAccidentStateShortName
        ) as any) || formParams;
    }
    if (addressAccidentAddressUnit !== undefined) {
      formParams =
        (formParams.append(
          'AddressAccident.AddressUnit',
          <any>addressAccidentAddressUnit
        ) as any) || formParams;
    }
    if (longitude !== undefined) {
      formParams =
        (formParams.append('Longitude', <any>longitude) as any) || formParams;
    }
    if (latitude !== undefined) {
      formParams =
        (formParams.append('Latitude', <any>latitude) as any) || formParams;
    }
    if (date !== undefined) {
      formParams = (formParams.append('Date', <any>date) as any) || formParams;
    }
    if (time !== undefined) {
      formParams = (formParams.append('Time', <any>time) as any) || formParams;
    }
    if (driverId !== undefined) {
      formParams =
        (formParams.append('DriverId', <any>driverId) as any) || formParams;
    }
    if (truckId !== undefined) {
      formParams =
        (formParams.append('TruckId', <any>truckId) as any) || formParams;
    }
    if (trailerChecked !== undefined) {
      formParams =
        (formParams.append('TrailerChecked', <any>trailerChecked) as any) ||
        formParams;
    }
    if (trailerId !== undefined) {
      formParams =
        (formParams.append('TrailerId', <any>trailerId) as any) || formParams;
    }
    if (insuranceType) {
      if (useForm) {
        insuranceType.forEach((element) => {
          formParams =
            (formParams.append('InsuranceType', <any>element) as any) ||
            formParams;
        });
      } else {
        formParams =
          (formParams.append(
            'InsuranceType',
            insuranceType.join(COLLECTION_FORMATS['csv'])
          ) as any) || formParams;
      }
    }
    if (roadwayTrafficway !== undefined) {
      formParams =
        (formParams.append(
          'RoadwayTrafficway',
          <any>roadwayTrafficway
        ) as any) || formParams;
    }
    if (weatherCondition !== undefined) {
      formParams =
        (formParams.append('WeatherCondition', <any>weatherCondition) as any) ||
        formParams;
    }
    if (roadAccessControl !== undefined) {
      formParams =
        (formParams.append(
          'RoadAccessControl',
          <any>roadAccessControl
        ) as any) || formParams;
    }
    if (roadSurfaceCondition !== undefined) {
      formParams =
        (formParams.append(
          'RoadSurfaceCondition',
          <any>roadSurfaceCondition
        ) as any) || formParams;
    }
    if (lightCondition !== undefined) {
      formParams =
        (formParams.append('LightCondition', <any>lightCondition) as any) ||
        formParams;
    }
    if (reportingAgency !== undefined) {
      formParams =
        (formParams.append('ReportingAgency', <any>reportingAgency) as any) ||
        formParams;
    }
    if (policeOfficer !== undefined) {
      formParams =
        (formParams.append('PoliceOfficer', <any>policeOfficer) as any) ||
        formParams;
    }
    if (bagdeNo !== undefined) {
      formParams =
        (formParams.append('BagdeNo', <any>bagdeNo) as any) || formParams;
    }
    if (addressAuthorityCity !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.City',
          <any>addressAuthorityCity
        ) as any) || formParams;
    }
    if (addressAuthorityState !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.State',
          <any>addressAuthorityState
        ) as any) || formParams;
    }
    if (addressAuthorityCounty !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.County',
          <any>addressAuthorityCounty
        ) as any) || formParams;
    }
    if (addressAuthorityAddress !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.Address',
          <any>addressAuthorityAddress
        ) as any) || formParams;
    }
    if (addressAuthorityStreet !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.Street',
          <any>addressAuthorityStreet
        ) as any) || formParams;
    }
    if (addressAuthorityStreetNumber !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.StreetNumber',
          <any>addressAuthorityStreetNumber
        ) as any) || formParams;
    }
    if (addressAuthorityCountry !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.Country',
          <any>addressAuthorityCountry
        ) as any) || formParams;
    }
    if (addressAuthorityZipCode !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.ZipCode',
          <any>addressAuthorityZipCode
        ) as any) || formParams;
    }
    if (addressAuthorityStateShortName !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.StateShortName',
          <any>addressAuthorityStateShortName
        ) as any) || formParams;
    }
    if (addressAuthorityAddressUnit !== undefined) {
      formParams =
        (formParams.append(
          'AddressAuthority.AddressUnit',
          <any>addressAuthorityAddressUnit
        ) as any) || formParams;
    }
    if (phoneOfficer !== undefined) {
      formParams =
        (formParams.append('PhoneOfficer', <any>phoneOfficer) as any) ||
        formParams;
    }
    if (fax !== undefined) {
      formParams = (formParams.append('Fax', <any>fax) as any) || formParams;
    }
    if (originCity !== undefined) {
      formParams =
        (formParams.append('Origin.City', <any>originCity) as any) ||
        formParams;
    }
    if (originState !== undefined) {
      formParams =
        (formParams.append('Origin.State', <any>originState) as any) ||
        formParams;
    }
    if (originCounty !== undefined) {
      formParams =
        (formParams.append('Origin.County', <any>originCounty) as any) ||
        formParams;
    }
    if (originAddress !== undefined) {
      formParams =
        (formParams.append('Origin.Address', <any>originAddress) as any) ||
        formParams;
    }
    if (originStreet !== undefined) {
      formParams =
        (formParams.append('Origin.Street', <any>originStreet) as any) ||
        formParams;
    }
    if (originStreetNumber !== undefined) {
      formParams =
        (formParams.append(
          'Origin.StreetNumber',
          <any>originStreetNumber
        ) as any) || formParams;
    }
    if (originCountry !== undefined) {
      formParams =
        (formParams.append('Origin.Country', <any>originCountry) as any) ||
        formParams;
    }
    if (originZipCode !== undefined) {
      formParams =
        (formParams.append('Origin.ZipCode', <any>originZipCode) as any) ||
        formParams;
    }
    if (originStateShortName !== undefined) {
      formParams =
        (formParams.append(
          'Origin.StateShortName',
          <any>originStateShortName
        ) as any) || formParams;
    }
    if (originAddressUnit !== undefined) {
      formParams =
        (formParams.append(
          'Origin.AddressUnit',
          <any>originAddressUnit
        ) as any) || formParams;
    }
    if (destinationCity !== undefined) {
      formParams =
        (formParams.append('Destination.City', <any>destinationCity) as any) ||
        formParams;
    }
    if (destinationState !== undefined) {
      formParams =
        (formParams.append(
          'Destination.State',
          <any>destinationState
        ) as any) || formParams;
    }
    if (destinationCounty !== undefined) {
      formParams =
        (formParams.append(
          'Destination.County',
          <any>destinationCounty
        ) as any) || formParams;
    }
    if (destinationAddress !== undefined) {
      formParams =
        (formParams.append(
          'Destination.Address',
          <any>destinationAddress
        ) as any) || formParams;
    }
    if (destinationStreet !== undefined) {
      formParams =
        (formParams.append(
          'Destination.Street',
          <any>destinationStreet
        ) as any) || formParams;
    }
    if (destinationStreetNumber !== undefined) {
      formParams =
        (formParams.append(
          'Destination.StreetNumber',
          <any>destinationStreetNumber
        ) as any) || formParams;
    }
    if (destinationCountry !== undefined) {
      formParams =
        (formParams.append(
          'Destination.Country',
          <any>destinationCountry
        ) as any) || formParams;
    }
    if (destinationZipCode !== undefined) {
      formParams =
        (formParams.append(
          'Destination.ZipCode',
          <any>destinationZipCode
        ) as any) || formParams;
    }
    if (destinationStateShortName !== undefined) {
      formParams =
        (formParams.append(
          'Destination.StateShortName',
          <any>destinationStateShortName
        ) as any) || formParams;
    }
    if (destinationAddressUnit !== undefined) {
      formParams =
        (formParams.append(
          'Destination.AddressUnit',
          <any>destinationAddressUnit
        ) as any) || formParams;
    }
    if (brokerId !== undefined) {
      formParams =
        (formParams.append('BrokerId', <any>brokerId) as any) || formParams;
    }
    if (boL !== undefined) {
      formParams = (formParams.append('BoL', <any>boL) as any) || formParams;
    }
    if (cargo !== undefined) {
      formParams =
        (formParams.append('Cargo', <any>cargo) as any) || formParams;
    }
    if (files) {
      if (useForm) {
        files.forEach((element) => {
          formParams =
            (formParams.append('Files', <any>element) as any) || formParams;
        });
      } else {
        formParams =
          (formParams.append(
            'Files',
            files.join(COLLECTION_FORMATS['csv'])
          ) as any) || formParams;
      }
    }
    if (filesForDeleteIds) {
      if (useForm) {
        filesForDeleteIds.forEach((element) => {
          formParams =
            (formParams.append('FilesForDeleteIds', <any>element) as any) ||
            formParams;
        });
      } else {
        formParams =
          (formParams.append(
            'FilesForDeleteIds',
            filesForDeleteIds.join(COLLECTION_FORMATS['csv'])
          ) as any) || formParams;
      }
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.put<CreateWithUploadsResponse>(
      `${this.configuration.basePath}/api/accident`,
      convertFormParamsToString ? formParams.toString() : formParams,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
