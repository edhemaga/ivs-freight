/**
 * Truckassist API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
} from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { Observable } from 'rxjs';

import { AccidentListResponse } from '../model/models';
import { AccidentMinimalListResponse } from '../model/models';
import { AccidentModalResponse } from '../model/models';
import { AccidentResponse } from '../model/models';
import { ClusterResponse } from '../model/models';
import { CreateAccidentCommand } from '../model/models';
import { CreateResponse } from '../model/models';
import { ProblemDetails } from '../model/models';
import { UpdateAccidentCommand } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class AccidentService {
  protected basePath = 'http://localhost';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== 'string') {
      if (typeof basePath !== 'string') {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
  }

  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string
  ): HttpParams {
    if (typeof value === 'object' && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string
  ): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === 'object') {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10)
          );
        } else {
          throw Error('key may not be null if value is Date');
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k
            ))
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error('key may not be null if value is not object or array');
    }
    return httpParams;
  }

  /**
   * @param northEastLatitude
   * @param northEastLongitude
   * @param southWestLatitude
   * @param southWestLongitude
   * @param zoomLevel
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentClustersGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    zoomLevel?: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<Array<ClusterResponse>>;
  public apiAccidentClustersGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    zoomLevel?: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<Array<ClusterResponse>>>;
  public apiAccidentClustersGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    zoomLevel?: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<Array<ClusterResponse>>>;
  public apiAccidentClustersGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    zoomLevel?: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (northEastLatitude !== undefined && northEastLatitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>northEastLatitude,
        'NorthEastLatitude'
      );
    }
    if (northEastLongitude !== undefined && northEastLongitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>northEastLongitude,
        'NorthEastLongitude'
      );
    }
    if (southWestLatitude !== undefined && southWestLatitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>southWestLatitude,
        'SouthWestLatitude'
      );
    }
    if (southWestLongitude !== undefined && southWestLongitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>southWestLongitude,
        'SouthWestLongitude'
      );
    }
    if (zoomLevel !== undefined && zoomLevel !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>zoomLevel,
        'ZoomLevel'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<Array<ClusterResponse>>(
      `${this.configuration.basePath}/api/accident/clusters`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentIdDelete(
    id: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any>;
  public apiAccidentIdDelete(
    id: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<any>>;
  public apiAccidentIdDelete(
    id: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<any>>;
  public apiAccidentIdDelete(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling apiAccidentIdDelete.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.delete<any>(
      `${this.configuration.basePath}/api/accident/${encodeURIComponent(
        String(id)
      )}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentIdGet(
    id: number,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<AccidentResponse>;
  public apiAccidentIdGet(
    id: number,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<AccidentResponse>>;
  public apiAccidentIdGet(
    id: number,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<AccidentResponse>>;
  public apiAccidentIdGet(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling apiAccidentIdGet.'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<AccidentResponse>(
      `${this.configuration.basePath}/api/accident/${encodeURIComponent(
        String(id)
      )}`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param ids
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentListDelete(
    ids?: Array<number>,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any>;
  public apiAccidentListDelete(
    ids?: Array<number>,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<any>>;
  public apiAccidentListDelete(
    ids?: Array<number>,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<any>>;
  public apiAccidentListDelete(
    ids?: Array<number>,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (ids) {
      ids.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'Ids'
        );
      });
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.delete<any>(
      `${this.configuration.basePath}/api/accident/list`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param active
   * @param reported
   * @param dateFrom
   * @param dateTo
   * @param _long
   * @param lat
   * @param distance
   * @param driverIds
   * @param truckIds
   * @param trailerIds
   * @param injury
   * @param fatality
   * @param towing
   * @param hazMat
   * @param pageIndex
   * @param pageSize
   * @param companyId
   * @param sort
   * @param search
   * @param search1
   * @param search2
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentListGet(
    active?: boolean,
    reported?: boolean,
    dateFrom?: string,
    dateTo?: string,
    _long?: number,
    lat?: number,
    distance?: number,
    driverIds?: Array<number>,
    truckIds?: Array<number>,
    trailerIds?: Array<number>,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<AccidentListResponse>;
  public apiAccidentListGet(
    active?: boolean,
    reported?: boolean,
    dateFrom?: string,
    dateTo?: string,
    _long?: number,
    lat?: number,
    distance?: number,
    driverIds?: Array<number>,
    truckIds?: Array<number>,
    trailerIds?: Array<number>,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<AccidentListResponse>>;
  public apiAccidentListGet(
    active?: boolean,
    reported?: boolean,
    dateFrom?: string,
    dateTo?: string,
    _long?: number,
    lat?: number,
    distance?: number,
    driverIds?: Array<number>,
    truckIds?: Array<number>,
    trailerIds?: Array<number>,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<AccidentListResponse>>;
  public apiAccidentListGet(
    active?: boolean,
    reported?: boolean,
    dateFrom?: string,
    dateTo?: string,
    _long?: number,
    lat?: number,
    distance?: number,
    driverIds?: Array<number>,
    truckIds?: Array<number>,
    trailerIds?: Array<number>,
    injury?: number,
    fatality?: number,
    towing?: boolean,
    hazMat?: boolean,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (active !== undefined && active !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>active,
        'Active'
      );
    }
    if (reported !== undefined && reported !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>reported,
        'Reported'
      );
    }
    if (dateFrom !== undefined && dateFrom !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>dateFrom,
        'DateFrom'
      );
    }
    if (dateTo !== undefined && dateTo !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>dateTo,
        'DateTo'
      );
    }
    if (_long !== undefined && _long !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>_long,
        'Long'
      );
    }
    if (lat !== undefined && lat !== null) {
      queryParameters = this.addToHttpParams(queryParameters, <any>lat, 'Lat');
    }
    if (distance !== undefined && distance !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>distance,
        'Distance'
      );
    }
    if (driverIds) {
      driverIds.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'DriverIds'
        );
      });
    }
    if (truckIds) {
      truckIds.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'TruckIds'
        );
      });
    }
    if (trailerIds) {
      trailerIds.forEach((element) => {
        queryParameters = this.addToHttpParams(
          queryParameters,
          <any>element,
          'TrailerIds'
        );
      });
    }
    if (injury !== undefined && injury !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>injury,
        'Injury'
      );
    }
    if (fatality !== undefined && fatality !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>fatality,
        'Fatality'
      );
    }
    if (towing !== undefined && towing !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>towing,
        'Towing'
      );
    }
    if (hazMat !== undefined && hazMat !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>hazMat,
        'HazMat'
      );
    }
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageIndex,
        'PageIndex'
      );
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageSize,
        'PageSize'
      );
    }
    if (companyId !== undefined && companyId !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>companyId,
        'CompanyId'
      );
    }
    if (sort !== undefined && sort !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>sort,
        'Sort'
      );
    }
    if (search !== undefined && search !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search,
        'Search'
      );
    }
    if (search1 !== undefined && search1 !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search1,
        'Search1'
      );
    }
    if (search2 !== undefined && search2 !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search2,
        'Search2'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<AccidentListResponse>(
      `${this.configuration.basePath}/api/accident/list`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param pageIndex
   * @param pageSize
   * @param companyId
   * @param search
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentListMinimalGet(
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    search?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<AccidentMinimalListResponse>;
  public apiAccidentListMinimalGet(
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    search?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<AccidentMinimalListResponse>>;
  public apiAccidentListMinimalGet(
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    search?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<AccidentMinimalListResponse>>;
  public apiAccidentListMinimalGet(
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    search?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageIndex,
        'PageIndex'
      );
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageSize,
        'PageSize'
      );
    }
    if (companyId !== undefined && companyId !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>companyId,
        'CompanyId'
      );
    }
    if (search !== undefined && search !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search,
        'Search'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<AccidentMinimalListResponse>(
      `${this.configuration.basePath}/api/accident/list/minimal`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param northEastLatitude
   * @param northEastLongitude
   * @param southWestLatitude
   * @param southWestLongitude
   * @param pageIndex
   * @param pageSize
   * @param companyId
   * @param sort
   * @param search
   * @param search1
   * @param search2
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentListmapGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<AccidentListResponse>;
  public apiAccidentListmapGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<AccidentListResponse>>;
  public apiAccidentListmapGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<AccidentListResponse>>;
  public apiAccidentListmapGet(
    northEastLatitude?: number,
    northEastLongitude?: number,
    southWestLatitude?: number,
    southWestLongitude?: number,
    pageIndex?: number,
    pageSize?: number,
    companyId?: number,
    sort?: string,
    search?: string,
    search1?: string,
    search2?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let queryParameters = new HttpParams({ encoder: this.encoder });
    if (northEastLatitude !== undefined && northEastLatitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>northEastLatitude,
        'NorthEastLatitude'
      );
    }
    if (northEastLongitude !== undefined && northEastLongitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>northEastLongitude,
        'NorthEastLongitude'
      );
    }
    if (southWestLatitude !== undefined && southWestLatitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>southWestLatitude,
        'SouthWestLatitude'
      );
    }
    if (southWestLongitude !== undefined && southWestLongitude !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>southWestLongitude,
        'SouthWestLongitude'
      );
    }
    if (pageIndex !== undefined && pageIndex !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageIndex,
        'PageIndex'
      );
    }
    if (pageSize !== undefined && pageSize !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>pageSize,
        'PageSize'
      );
    }
    if (companyId !== undefined && companyId !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>companyId,
        'CompanyId'
      );
    }
    if (sort !== undefined && sort !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>sort,
        'Sort'
      );
    }
    if (search !== undefined && search !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search,
        'Search'
      );
    }
    if (search1 !== undefined && search1 !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search1,
        'Search1'
      );
    }
    if (search2 !== undefined && search2 !== null) {
      queryParameters = this.addToHttpParams(
        queryParameters,
        <any>search2,
        'Search2'
      );
    }

    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<AccidentListResponse>(
      `${this.configuration.basePath}/api/accident/listmap`,
      {
        params: queryParameters,
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentModalGet(
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<AccidentModalResponse>;
  public apiAccidentModalGet(
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<AccidentModalResponse>>;
  public apiAccidentModalGet(
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<AccidentModalResponse>>;
  public apiAccidentModalGet(
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.get<AccidentModalResponse>(
      `${this.configuration.basePath}/api/accident/modal`,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param createAccidentCommand
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentPost(
    createAccidentCommand?: CreateAccidentCommand,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<CreateResponse>;
  public apiAccidentPost(
    createAccidentCommand?: CreateAccidentCommand,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<CreateResponse>>;
  public apiAccidentPost(
    createAccidentCommand?: CreateAccidentCommand,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<CreateResponse>>;
  public apiAccidentPost(
    createAccidentCommand?: CreateAccidentCommand,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/_*+json',
    ];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.post<CreateResponse>(
      `${this.configuration.basePath}/api/accident`,
      createAccidentCommand,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * @param updateAccidentCommand
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public apiAccidentPut(
    updateAccidentCommand?: UpdateAccidentCommand,
    observe?: 'body',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any>;
  public apiAccidentPut(
    updateAccidentCommand?: UpdateAccidentCommand,
    observe?: 'response',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpResponse<any>>;
  public apiAccidentPut(
    updateAccidentCommand?: UpdateAccidentCommand,
    observe?: 'events',
    reportProgress?: boolean,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<HttpEvent<any>>;
  public apiAccidentPut(
    updateAccidentCommand?: UpdateAccidentCommand,
    observe: any = 'body',
    reportProgress: boolean = false,
    options?: {
      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';
    }
  ): Observable<any> {
    let headers = this.defaultHeaders;

    let credential: string | undefined;
    // authentication (bearer) required
    credential = this.configuration.lookupCredential('bearer');
    if (credential) {
      headers = headers.set('Authorization', 'Bearer ' + credential);
    }

    let httpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (httpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
        'text/plain',
        'application/json',
        'text/json',
      ];
      httpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json',
      'text/json',
      'application/_*+json',
    ];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    let responseType: 'text' | 'json' = 'json';
    if (
      httpHeaderAcceptSelected &&
      httpHeaderAcceptSelected.startsWith('text')
    ) {
      responseType = 'text';
    }

    return this.httpClient.put<any>(
      `${this.configuration.basePath}/api/accident`,
      updateAccidentCommand,
      {
        responseType: <any>responseType,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
