/**
 * Truckassist API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AccidentListResponse } from '../model/accidentListResponse';
// @ts-ignore
import { AccidentMinimalListResponse } from '../model/accidentMinimalListResponse';
// @ts-ignore
import { AccidentModalResponse } from '../model/accidentModalResponse';
// @ts-ignore
import { AccidentResponse } from '../model/accidentResponse';
// @ts-ignore
import { CitationCommand } from '../model/citationCommand';
// @ts-ignore
import { ClusterResponse } from '../model/clusterResponse';
// @ts-ignore
import { CreateWithUploadsResponse } from '../model/createWithUploadsResponse';
// @ts-ignore
import { FileResponse } from '../model/fileResponse';
// @ts-ignore
import { InsuranceTypeCommand } from '../model/insuranceTypeCommand';
// @ts-ignore
import { ProblemDetails } from '../model/problemDetails';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class AccidentService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param northEastLatitude 
     * @param northEastLongitude 
     * @param southWestLatitude 
     * @param southWestLongitude 
     * @param zoomLevel 
     * @param addedNew 
     * @param shipperLong 
     * @param shipperLat 
     * @param shipperDistance 
     * @param shipperStates 
     * @param categoryIds 
     * @param _long 
     * @param lat 
     * @param distance 
     * @param costFrom 
     * @param costTo 
     * @param lastFrom 
     * @param lastTo 
     * @param ppgFrom 
     * @param ppgTo 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentClustersGet(northEastLatitude?: number, northEastLongitude?: number, southWestLatitude?: number, southWestLongitude?: number, zoomLevel?: number, addedNew?: boolean, shipperLong?: number, shipperLat?: number, shipperDistance?: number, shipperStates?: Array<string>, categoryIds?: Array<number>, _long?: number, lat?: number, distance?: number, costFrom?: number, costTo?: number, lastFrom?: number, lastTo?: number, ppgFrom?: number, ppgTo?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<Array<ClusterResponse>>;
    public apiAccidentClustersGet(northEastLatitude?: number, northEastLongitude?: number, southWestLatitude?: number, southWestLongitude?: number, zoomLevel?: number, addedNew?: boolean, shipperLong?: number, shipperLat?: number, shipperDistance?: number, shipperStates?: Array<string>, categoryIds?: Array<number>, _long?: number, lat?: number, distance?: number, costFrom?: number, costTo?: number, lastFrom?: number, lastTo?: number, ppgFrom?: number, ppgTo?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<ClusterResponse>>>;
    public apiAccidentClustersGet(northEastLatitude?: number, northEastLongitude?: number, southWestLatitude?: number, southWestLongitude?: number, zoomLevel?: number, addedNew?: boolean, shipperLong?: number, shipperLat?: number, shipperDistance?: number, shipperStates?: Array<string>, categoryIds?: Array<number>, _long?: number, lat?: number, distance?: number, costFrom?: number, costTo?: number, lastFrom?: number, lastTo?: number, ppgFrom?: number, ppgTo?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<ClusterResponse>>>;
    public apiAccidentClustersGet(northEastLatitude?: number, northEastLongitude?: number, southWestLatitude?: number, southWestLongitude?: number, zoomLevel?: number, addedNew?: boolean, shipperLong?: number, shipperLat?: number, shipperDistance?: number, shipperStates?: Array<string>, categoryIds?: Array<number>, _long?: number, lat?: number, distance?: number, costFrom?: number, costTo?: number, lastFrom?: number, lastTo?: number, ppgFrom?: number, ppgTo?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (northEastLatitude !== undefined && northEastLatitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>northEastLatitude, 'NorthEastLatitude');
        }
        if (northEastLongitude !== undefined && northEastLongitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>northEastLongitude, 'NorthEastLongitude');
        }
        if (southWestLatitude !== undefined && southWestLatitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>southWestLatitude, 'SouthWestLatitude');
        }
        if (southWestLongitude !== undefined && southWestLongitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>southWestLongitude, 'SouthWestLongitude');
        }
        if (zoomLevel !== undefined && zoomLevel !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>zoomLevel, 'ZoomLevel');
        }
        if (addedNew !== undefined && addedNew !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addedNew, 'AddedNew');
        }
        if (shipperLong !== undefined && shipperLong !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>shipperLong, 'ShipperLong');
        }
        if (shipperLat !== undefined && shipperLat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>shipperLat, 'ShipperLat');
        }
        if (shipperDistance !== undefined && shipperDistance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>shipperDistance, 'ShipperDistance');
        }
        if (shipperStates) {
            shipperStates.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'ShipperStates');
            })
        }
        if (categoryIds) {
            categoryIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'CategoryIds');
            })
        }
        if (_long !== undefined && _long !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>_long, 'Long');
        }
        if (lat !== undefined && lat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lat, 'Lat');
        }
        if (distance !== undefined && distance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>distance, 'Distance');
        }
        if (costFrom !== undefined && costFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>costFrom, 'CostFrom');
        }
        if (costTo !== undefined && costTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>costTo, 'CostTo');
        }
        if (lastFrom !== undefined && lastFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastFrom, 'LastFrom');
        }
        if (lastTo !== undefined && lastTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lastTo, 'LastTo');
        }
        if (ppgFrom !== undefined && ppgFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ppgFrom, 'PpgFrom');
        }
        if (ppgTo !== undefined && ppgTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ppgTo, 'PpgTo');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search2, 'Search2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident/clusters`;
        return this.httpClient.request<Array<ClusterResponse>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentFilesIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<Array<FileResponse>>;
    public apiAccidentFilesIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<FileResponse>>>;
    public apiAccidentFilesIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<FileResponse>>>;
    public apiAccidentFilesIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiAccidentFilesIdGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident/files/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<Array<FileResponse>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentIdDelete(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiAccidentIdDelete(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiAccidentIdDelete(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiAccidentIdDelete(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiAccidentIdDelete.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<AccidentResponse>;
    public apiAccidentIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<AccidentResponse>>;
    public apiAccidentIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<AccidentResponse>>;
    public apiAccidentIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiAccidentIdGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<AccidentResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ids 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentListDelete(ids?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiAccidentListDelete(ids?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiAccidentListDelete(ids?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiAccidentListDelete(ids?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ids) {
            ids.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'Ids');
            })
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident/list`;
        return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param active 
     * @param reported 
     * @param dateFrom 
     * @param dateTo 
     * @param _long 
     * @param lat 
     * @param distance 
     * @param driverIds 
     * @param truckIds 
     * @param trailerIds 
     * @param injury 
     * @param fatality 
     * @param towing 
     * @param hazMat 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentListGet(active?: boolean, reported?: boolean, dateFrom?: string, dateTo?: string, _long?: number, lat?: number, distance?: number, driverIds?: Array<number>, truckIds?: Array<number>, trailerIds?: Array<number>, injury?: number, fatality?: number, towing?: boolean, hazMat?: boolean, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<AccidentListResponse>;
    public apiAccidentListGet(active?: boolean, reported?: boolean, dateFrom?: string, dateTo?: string, _long?: number, lat?: number, distance?: number, driverIds?: Array<number>, truckIds?: Array<number>, trailerIds?: Array<number>, injury?: number, fatality?: number, towing?: boolean, hazMat?: boolean, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<AccidentListResponse>>;
    public apiAccidentListGet(active?: boolean, reported?: boolean, dateFrom?: string, dateTo?: string, _long?: number, lat?: number, distance?: number, driverIds?: Array<number>, truckIds?: Array<number>, trailerIds?: Array<number>, injury?: number, fatality?: number, towing?: boolean, hazMat?: boolean, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<AccidentListResponse>>;
    public apiAccidentListGet(active?: boolean, reported?: boolean, dateFrom?: string, dateTo?: string, _long?: number, lat?: number, distance?: number, driverIds?: Array<number>, truckIds?: Array<number>, trailerIds?: Array<number>, injury?: number, fatality?: number, towing?: boolean, hazMat?: boolean, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (active !== undefined && active !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>active, 'Active');
        }
        if (reported !== undefined && reported !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reported, 'Reported');
        }
        if (dateFrom !== undefined && dateFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateFrom, 'DateFrom');
        }
        if (dateTo !== undefined && dateTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateTo, 'DateTo');
        }
        if (_long !== undefined && _long !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>_long, 'Long');
        }
        if (lat !== undefined && lat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lat, 'Lat');
        }
        if (distance !== undefined && distance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>distance, 'Distance');
        }
        if (driverIds) {
            driverIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'DriverIds');
            })
        }
        if (truckIds) {
            truckIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'TruckIds');
            })
        }
        if (trailerIds) {
            trailerIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'TrailerIds');
            })
        }
        if (injury !== undefined && injury !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>injury, 'Injury');
        }
        if (fatality !== undefined && fatality !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fatality, 'Fatality');
        }
        if (towing !== undefined && towing !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>towing, 'Towing');
        }
        if (hazMat !== undefined && hazMat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hazMat, 'HazMat');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search2, 'Search2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident/list`;
        return this.httpClient.request<AccidentListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param search 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<AccidentMinimalListResponse>;
    public apiAccidentListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<AccidentMinimalListResponse>>;
    public apiAccidentListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<AccidentMinimalListResponse>>;
    public apiAccidentListMinimalGet(pageIndex?: number, pageSize?: number, companyId?: number, search?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident/list/minimal`;
        return this.httpClient.request<AccidentMinimalListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param northEastLatitude 
     * @param northEastLongitude 
     * @param southWestLatitude 
     * @param southWestLongitude 
     * @param pageIndex 
     * @param pageSize 
     * @param companyId 
     * @param sort 
     * @param search 
     * @param search1 
     * @param search2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentListmapGet(northEastLatitude?: number, northEastLongitude?: number, southWestLatitude?: number, southWestLongitude?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<AccidentListResponse>;
    public apiAccidentListmapGet(northEastLatitude?: number, northEastLongitude?: number, southWestLatitude?: number, southWestLongitude?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<AccidentListResponse>>;
    public apiAccidentListmapGet(northEastLatitude?: number, northEastLongitude?: number, southWestLatitude?: number, southWestLongitude?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<AccidentListResponse>>;
    public apiAccidentListmapGet(northEastLatitude?: number, northEastLongitude?: number, southWestLatitude?: number, southWestLongitude?: number, pageIndex?: number, pageSize?: number, companyId?: number, sort?: string, search?: string, search1?: string, search2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (northEastLatitude !== undefined && northEastLatitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>northEastLatitude, 'NorthEastLatitude');
        }
        if (northEastLongitude !== undefined && northEastLongitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>northEastLongitude, 'NorthEastLongitude');
        }
        if (southWestLatitude !== undefined && southWestLatitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>southWestLatitude, 'SouthWestLatitude');
        }
        if (southWestLongitude !== undefined && southWestLongitude !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>southWestLongitude, 'SouthWestLongitude');
        }
        if (pageIndex !== undefined && pageIndex !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageIndex, 'PageIndex');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'PageSize');
        }
        if (companyId !== undefined && companyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>companyId, 'CompanyId');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'Sort');
        }
        if (search !== undefined && search !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search, 'Search');
        }
        if (search1 !== undefined && search1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search1, 'Search1');
        }
        if (search2 !== undefined && search2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>search2, 'Search2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident/listmap`;
        return this.httpClient.request<AccidentListResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentMediesIdGet(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<Array<FileResponse>>;
    public apiAccidentMediesIdGet(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<Array<FileResponse>>>;
    public apiAccidentMediesIdGet(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<Array<FileResponse>>>;
    public apiAccidentMediesIdGet(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling apiAccidentMediesIdGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident/medies/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int32"})}`;
        return this.httpClient.request<Array<FileResponse>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentModalGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<AccidentModalResponse>;
    public apiAccidentModalGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<AccidentModalResponse>>;
    public apiAccidentModalGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<AccidentModalResponse>>;
    public apiAccidentModalGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident/modal`;
        return this.httpClient.request<AccidentModalResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param report 
     * @param addressAccidentCity 
     * @param addressAccidentState 
     * @param addressAccidentCounty 
     * @param addressAccidentAddress 
     * @param addressAccidentStreet 
     * @param addressAccidentStreetNumber 
     * @param addressAccidentCountry 
     * @param addressAccidentZipCode 
     * @param addressAccidentStateShortName 
     * @param addressAccidentAddressUnit 
     * @param longitude 
     * @param latitude 
     * @param date 
     * @param time 
     * @param vehicloNo 
     * @param towing 
     * @param driverId 
     * @param truckId 
     * @param trailerId 
     * @param citations 
     * @param insuranceType 
     * @param roadwayTrafficway 
     * @param weatherCondition 
     * @param roadAccessControl 
     * @param roadSurfaceCondition 
     * @param lightCondition 
     * @param originCity 
     * @param originState 
     * @param originCounty 
     * @param originAddress 
     * @param originStreet 
     * @param originStreetNumber 
     * @param originCountry 
     * @param originZipCode 
     * @param originStateShortName 
     * @param originAddressUnit 
     * @param destinationCity 
     * @param destinationState 
     * @param destinationCounty 
     * @param destinationAddress 
     * @param destinationStreet 
     * @param destinationStreetNumber 
     * @param destinationCountry 
     * @param destinationZipCode 
     * @param destinationStateShortName 
     * @param destinationAddressUnit 
     * @param brokerId 
     * @param boL 
     * @param cargo 
     * @param files 
     * @param medies 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentPost(report?: string, addressAccidentCity?: string, addressAccidentState?: string, addressAccidentCounty?: string, addressAccidentAddress?: string, addressAccidentStreet?: string, addressAccidentStreetNumber?: string, addressAccidentCountry?: string, addressAccidentZipCode?: string, addressAccidentStateShortName?: string, addressAccidentAddressUnit?: string, longitude?: number, latitude?: number, date?: string, time?: string, vehicloNo?: number, towing?: boolean, driverId?: number, truckId?: number, trailerId?: number, citations?: Array<CitationCommand>, insuranceType?: Array<InsuranceTypeCommand>, roadwayTrafficway?: string, weatherCondition?: string, roadAccessControl?: string, roadSurfaceCondition?: string, lightCondition?: string, originCity?: string, originState?: string, originCounty?: string, originAddress?: string, originStreet?: string, originStreetNumber?: string, originCountry?: string, originZipCode?: string, originStateShortName?: string, originAddressUnit?: string, destinationCity?: string, destinationState?: string, destinationCounty?: string, destinationAddress?: string, destinationStreet?: string, destinationStreetNumber?: string, destinationCountry?: string, destinationZipCode?: string, destinationStateShortName?: string, destinationAddressUnit?: string, brokerId?: number, boL?: string, cargo?: string, files?: Array<Blob>, medies?: Array<Blob>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<CreateWithUploadsResponse>;
    public apiAccidentPost(report?: string, addressAccidentCity?: string, addressAccidentState?: string, addressAccidentCounty?: string, addressAccidentAddress?: string, addressAccidentStreet?: string, addressAccidentStreetNumber?: string, addressAccidentCountry?: string, addressAccidentZipCode?: string, addressAccidentStateShortName?: string, addressAccidentAddressUnit?: string, longitude?: number, latitude?: number, date?: string, time?: string, vehicloNo?: number, towing?: boolean, driverId?: number, truckId?: number, trailerId?: number, citations?: Array<CitationCommand>, insuranceType?: Array<InsuranceTypeCommand>, roadwayTrafficway?: string, weatherCondition?: string, roadAccessControl?: string, roadSurfaceCondition?: string, lightCondition?: string, originCity?: string, originState?: string, originCounty?: string, originAddress?: string, originStreet?: string, originStreetNumber?: string, originCountry?: string, originZipCode?: string, originStateShortName?: string, originAddressUnit?: string, destinationCity?: string, destinationState?: string, destinationCounty?: string, destinationAddress?: string, destinationStreet?: string, destinationStreetNumber?: string, destinationCountry?: string, destinationZipCode?: string, destinationStateShortName?: string, destinationAddressUnit?: string, brokerId?: number, boL?: string, cargo?: string, files?: Array<Blob>, medies?: Array<Blob>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<CreateWithUploadsResponse>>;
    public apiAccidentPost(report?: string, addressAccidentCity?: string, addressAccidentState?: string, addressAccidentCounty?: string, addressAccidentAddress?: string, addressAccidentStreet?: string, addressAccidentStreetNumber?: string, addressAccidentCountry?: string, addressAccidentZipCode?: string, addressAccidentStateShortName?: string, addressAccidentAddressUnit?: string, longitude?: number, latitude?: number, date?: string, time?: string, vehicloNo?: number, towing?: boolean, driverId?: number, truckId?: number, trailerId?: number, citations?: Array<CitationCommand>, insuranceType?: Array<InsuranceTypeCommand>, roadwayTrafficway?: string, weatherCondition?: string, roadAccessControl?: string, roadSurfaceCondition?: string, lightCondition?: string, originCity?: string, originState?: string, originCounty?: string, originAddress?: string, originStreet?: string, originStreetNumber?: string, originCountry?: string, originZipCode?: string, originStateShortName?: string, originAddressUnit?: string, destinationCity?: string, destinationState?: string, destinationCounty?: string, destinationAddress?: string, destinationStreet?: string, destinationStreetNumber?: string, destinationCountry?: string, destinationZipCode?: string, destinationStateShortName?: string, destinationAddressUnit?: string, brokerId?: number, boL?: string, cargo?: string, files?: Array<Blob>, medies?: Array<Blob>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<CreateWithUploadsResponse>>;
    public apiAccidentPost(report?: string, addressAccidentCity?: string, addressAccidentState?: string, addressAccidentCounty?: string, addressAccidentAddress?: string, addressAccidentStreet?: string, addressAccidentStreetNumber?: string, addressAccidentCountry?: string, addressAccidentZipCode?: string, addressAccidentStateShortName?: string, addressAccidentAddressUnit?: string, longitude?: number, latitude?: number, date?: string, time?: string, vehicloNo?: number, towing?: boolean, driverId?: number, truckId?: number, trailerId?: number, citations?: Array<CitationCommand>, insuranceType?: Array<InsuranceTypeCommand>, roadwayTrafficway?: string, weatherCondition?: string, roadAccessControl?: string, roadSurfaceCondition?: string, lightCondition?: string, originCity?: string, originState?: string, originCounty?: string, originAddress?: string, originStreet?: string, originStreetNumber?: string, originCountry?: string, originZipCode?: string, originStateShortName?: string, originAddressUnit?: string, destinationCity?: string, destinationState?: string, destinationCounty?: string, destinationAddress?: string, destinationStreet?: string, destinationStreetNumber?: string, destinationCountry?: string, destinationZipCode?: string, destinationStateShortName?: string, destinationAddressUnit?: string, brokerId?: number, boL?: string, cargo?: string, files?: Array<Blob>, medies?: Array<Blob>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (report !== undefined) {
            localVarFormParams = localVarFormParams.append('Report', <any>report) as any || localVarFormParams;
        }
        if (addressAccidentCity !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.City', <any>addressAccidentCity) as any || localVarFormParams;
        }
        if (addressAccidentState !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.State', <any>addressAccidentState) as any || localVarFormParams;
        }
        if (addressAccidentCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.County', <any>addressAccidentCounty) as any || localVarFormParams;
        }
        if (addressAccidentAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.Address', <any>addressAccidentAddress) as any || localVarFormParams;
        }
        if (addressAccidentStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.Street', <any>addressAccidentStreet) as any || localVarFormParams;
        }
        if (addressAccidentStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.StreetNumber', <any>addressAccidentStreetNumber) as any || localVarFormParams;
        }
        if (addressAccidentCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.Country', <any>addressAccidentCountry) as any || localVarFormParams;
        }
        if (addressAccidentZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.ZipCode', <any>addressAccidentZipCode) as any || localVarFormParams;
        }
        if (addressAccidentStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.StateShortName', <any>addressAccidentStateShortName) as any || localVarFormParams;
        }
        if (addressAccidentAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.AddressUnit', <any>addressAccidentAddressUnit) as any || localVarFormParams;
        }
        if (longitude !== undefined) {
            localVarFormParams = localVarFormParams.append('Longitude', <any>longitude) as any || localVarFormParams;
        }
        if (latitude !== undefined) {
            localVarFormParams = localVarFormParams.append('Latitude', <any>latitude) as any || localVarFormParams;
        }
        if (date !== undefined) {
            localVarFormParams = localVarFormParams.append('Date', <any>date) as any || localVarFormParams;
        }
        if (time !== undefined) {
            localVarFormParams = localVarFormParams.append('Time', <any>time) as any || localVarFormParams;
        }
        if (vehicloNo !== undefined) {
            localVarFormParams = localVarFormParams.append('VehicloNo', <any>vehicloNo) as any || localVarFormParams;
        }
        if (towing !== undefined) {
            localVarFormParams = localVarFormParams.append('Towing', <any>towing) as any || localVarFormParams;
        }
        if (driverId !== undefined) {
            localVarFormParams = localVarFormParams.append('DriverId', <any>driverId) as any || localVarFormParams;
        }
        if (truckId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckId', <any>truckId) as any || localVarFormParams;
        }
        if (trailerId !== undefined) {
            localVarFormParams = localVarFormParams.append('TrailerId', <any>trailerId) as any || localVarFormParams;
        }
        if (citations) {
            citations.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Citations', <any>element) as any || localVarFormParams;
            })
        }
        if (insuranceType) {
            insuranceType.forEach((element) => {
                localVarFormParams = localVarFormParams.append('InsuranceType', <any>element) as any || localVarFormParams;
            })
        }
        if (roadwayTrafficway !== undefined) {
            localVarFormParams = localVarFormParams.append('RoadwayTrafficway', <any>roadwayTrafficway) as any || localVarFormParams;
        }
        if (weatherCondition !== undefined) {
            localVarFormParams = localVarFormParams.append('WeatherCondition', <any>weatherCondition) as any || localVarFormParams;
        }
        if (roadAccessControl !== undefined) {
            localVarFormParams = localVarFormParams.append('RoadAccessControl', <any>roadAccessControl) as any || localVarFormParams;
        }
        if (roadSurfaceCondition !== undefined) {
            localVarFormParams = localVarFormParams.append('RoadSurfaceCondition', <any>roadSurfaceCondition) as any || localVarFormParams;
        }
        if (lightCondition !== undefined) {
            localVarFormParams = localVarFormParams.append('LightCondition', <any>lightCondition) as any || localVarFormParams;
        }
        if (originCity !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.City', <any>originCity) as any || localVarFormParams;
        }
        if (originState !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.State', <any>originState) as any || localVarFormParams;
        }
        if (originCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.County', <any>originCounty) as any || localVarFormParams;
        }
        if (originAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.Address', <any>originAddress) as any || localVarFormParams;
        }
        if (originStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.Street', <any>originStreet) as any || localVarFormParams;
        }
        if (originStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.StreetNumber', <any>originStreetNumber) as any || localVarFormParams;
        }
        if (originCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.Country', <any>originCountry) as any || localVarFormParams;
        }
        if (originZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.ZipCode', <any>originZipCode) as any || localVarFormParams;
        }
        if (originStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.StateShortName', <any>originStateShortName) as any || localVarFormParams;
        }
        if (originAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.AddressUnit', <any>originAddressUnit) as any || localVarFormParams;
        }
        if (destinationCity !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.City', <any>destinationCity) as any || localVarFormParams;
        }
        if (destinationState !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.State', <any>destinationState) as any || localVarFormParams;
        }
        if (destinationCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.County', <any>destinationCounty) as any || localVarFormParams;
        }
        if (destinationAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.Address', <any>destinationAddress) as any || localVarFormParams;
        }
        if (destinationStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.Street', <any>destinationStreet) as any || localVarFormParams;
        }
        if (destinationStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.StreetNumber', <any>destinationStreetNumber) as any || localVarFormParams;
        }
        if (destinationCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.Country', <any>destinationCountry) as any || localVarFormParams;
        }
        if (destinationZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.ZipCode', <any>destinationZipCode) as any || localVarFormParams;
        }
        if (destinationStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.StateShortName', <any>destinationStateShortName) as any || localVarFormParams;
        }
        if (destinationAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.AddressUnit', <any>destinationAddressUnit) as any || localVarFormParams;
        }
        if (brokerId !== undefined) {
            localVarFormParams = localVarFormParams.append('BrokerId', <any>brokerId) as any || localVarFormParams;
        }
        if (boL !== undefined) {
            localVarFormParams = localVarFormParams.append('BoL', <any>boL) as any || localVarFormParams;
        }
        if (cargo !== undefined) {
            localVarFormParams = localVarFormParams.append('Cargo', <any>cargo) as any || localVarFormParams;
        }
        if (files) {
            files.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Files', <any>element) as any || localVarFormParams;
            })
        }
        if (medies) {
            medies.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Medies', <any>element) as any || localVarFormParams;
            })
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident`;
        return this.httpClient.request<CreateWithUploadsResponse>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param id 
     * @param report 
     * @param reported 
     * @param towing 
     * @param vehicloNo 
     * @param addressAccidentCity 
     * @param addressAccidentState 
     * @param addressAccidentCounty 
     * @param addressAccidentAddress 
     * @param addressAccidentStreet 
     * @param addressAccidentStreetNumber 
     * @param addressAccidentCountry 
     * @param addressAccidentZipCode 
     * @param addressAccidentStateShortName 
     * @param addressAccidentAddressUnit 
     * @param longitude 
     * @param latitude 
     * @param date 
     * @param time 
     * @param driverId 
     * @param truckId 
     * @param trailerId 
     * @param citations 
     * @param insuranceType 
     * @param roadwayTrafficway 
     * @param weatherCondition 
     * @param roadAccessControl 
     * @param roadSurfaceCondition 
     * @param lightCondition 
     * @param reportingAgency 
     * @param policeOfficer 
     * @param bagdeNo 
     * @param addressAuthorityCity 
     * @param addressAuthorityState 
     * @param addressAuthorityCounty 
     * @param addressAuthorityAddress 
     * @param addressAuthorityStreet 
     * @param addressAuthorityStreetNumber 
     * @param addressAuthorityCountry 
     * @param addressAuthorityZipCode 
     * @param addressAuthorityStateShortName 
     * @param addressAuthorityAddressUnit 
     * @param phoneOfficer 
     * @param fax 
     * @param originCity 
     * @param originState 
     * @param originCounty 
     * @param originAddress 
     * @param originStreet 
     * @param originStreetNumber 
     * @param originCountry 
     * @param originZipCode 
     * @param originStateShortName 
     * @param originAddressUnit 
     * @param destinationCity 
     * @param destinationState 
     * @param destinationCounty 
     * @param destinationAddress 
     * @param destinationStreet 
     * @param destinationStreetNumber 
     * @param destinationCountry 
     * @param destinationZipCode 
     * @param destinationStateShortName 
     * @param destinationAddressUnit 
     * @param brokerId 
     * @param boL 
     * @param cargo 
     * @param files 
     * @param filesForDeleteIds 
     * @param medies 
     * @param mediesForDeleteIds 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentPut(id?: number, report?: string, reported?: boolean, towing?: boolean, vehicloNo?: number, addressAccidentCity?: string, addressAccidentState?: string, addressAccidentCounty?: string, addressAccidentAddress?: string, addressAccidentStreet?: string, addressAccidentStreetNumber?: string, addressAccidentCountry?: string, addressAccidentZipCode?: string, addressAccidentStateShortName?: string, addressAccidentAddressUnit?: string, longitude?: number, latitude?: number, date?: string, time?: string, driverId?: number, truckId?: number, trailerId?: number, citations?: Array<CitationCommand>, insuranceType?: Array<InsuranceTypeCommand>, roadwayTrafficway?: string, weatherCondition?: string, roadAccessControl?: string, roadSurfaceCondition?: string, lightCondition?: string, reportingAgency?: string, policeOfficer?: string, bagdeNo?: string, addressAuthorityCity?: string, addressAuthorityState?: string, addressAuthorityCounty?: string, addressAuthorityAddress?: string, addressAuthorityStreet?: string, addressAuthorityStreetNumber?: string, addressAuthorityCountry?: string, addressAuthorityZipCode?: string, addressAuthorityStateShortName?: string, addressAuthorityAddressUnit?: string, phoneOfficer?: string, fax?: string, originCity?: string, originState?: string, originCounty?: string, originAddress?: string, originStreet?: string, originStreetNumber?: string, originCountry?: string, originZipCode?: string, originStateShortName?: string, originAddressUnit?: string, destinationCity?: string, destinationState?: string, destinationCounty?: string, destinationAddress?: string, destinationStreet?: string, destinationStreetNumber?: string, destinationCountry?: string, destinationZipCode?: string, destinationStateShortName?: string, destinationAddressUnit?: string, brokerId?: number, boL?: string, cargo?: string, files?: Array<Blob>, filesForDeleteIds?: Array<number>, medies?: Array<Blob>, mediesForDeleteIds?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<CreateWithUploadsResponse>;
    public apiAccidentPut(id?: number, report?: string, reported?: boolean, towing?: boolean, vehicloNo?: number, addressAccidentCity?: string, addressAccidentState?: string, addressAccidentCounty?: string, addressAccidentAddress?: string, addressAccidentStreet?: string, addressAccidentStreetNumber?: string, addressAccidentCountry?: string, addressAccidentZipCode?: string, addressAccidentStateShortName?: string, addressAccidentAddressUnit?: string, longitude?: number, latitude?: number, date?: string, time?: string, driverId?: number, truckId?: number, trailerId?: number, citations?: Array<CitationCommand>, insuranceType?: Array<InsuranceTypeCommand>, roadwayTrafficway?: string, weatherCondition?: string, roadAccessControl?: string, roadSurfaceCondition?: string, lightCondition?: string, reportingAgency?: string, policeOfficer?: string, bagdeNo?: string, addressAuthorityCity?: string, addressAuthorityState?: string, addressAuthorityCounty?: string, addressAuthorityAddress?: string, addressAuthorityStreet?: string, addressAuthorityStreetNumber?: string, addressAuthorityCountry?: string, addressAuthorityZipCode?: string, addressAuthorityStateShortName?: string, addressAuthorityAddressUnit?: string, phoneOfficer?: string, fax?: string, originCity?: string, originState?: string, originCounty?: string, originAddress?: string, originStreet?: string, originStreetNumber?: string, originCountry?: string, originZipCode?: string, originStateShortName?: string, originAddressUnit?: string, destinationCity?: string, destinationState?: string, destinationCounty?: string, destinationAddress?: string, destinationStreet?: string, destinationStreetNumber?: string, destinationCountry?: string, destinationZipCode?: string, destinationStateShortName?: string, destinationAddressUnit?: string, brokerId?: number, boL?: string, cargo?: string, files?: Array<Blob>, filesForDeleteIds?: Array<number>, medies?: Array<Blob>, mediesForDeleteIds?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<CreateWithUploadsResponse>>;
    public apiAccidentPut(id?: number, report?: string, reported?: boolean, towing?: boolean, vehicloNo?: number, addressAccidentCity?: string, addressAccidentState?: string, addressAccidentCounty?: string, addressAccidentAddress?: string, addressAccidentStreet?: string, addressAccidentStreetNumber?: string, addressAccidentCountry?: string, addressAccidentZipCode?: string, addressAccidentStateShortName?: string, addressAccidentAddressUnit?: string, longitude?: number, latitude?: number, date?: string, time?: string, driverId?: number, truckId?: number, trailerId?: number, citations?: Array<CitationCommand>, insuranceType?: Array<InsuranceTypeCommand>, roadwayTrafficway?: string, weatherCondition?: string, roadAccessControl?: string, roadSurfaceCondition?: string, lightCondition?: string, reportingAgency?: string, policeOfficer?: string, bagdeNo?: string, addressAuthorityCity?: string, addressAuthorityState?: string, addressAuthorityCounty?: string, addressAuthorityAddress?: string, addressAuthorityStreet?: string, addressAuthorityStreetNumber?: string, addressAuthorityCountry?: string, addressAuthorityZipCode?: string, addressAuthorityStateShortName?: string, addressAuthorityAddressUnit?: string, phoneOfficer?: string, fax?: string, originCity?: string, originState?: string, originCounty?: string, originAddress?: string, originStreet?: string, originStreetNumber?: string, originCountry?: string, originZipCode?: string, originStateShortName?: string, originAddressUnit?: string, destinationCity?: string, destinationState?: string, destinationCounty?: string, destinationAddress?: string, destinationStreet?: string, destinationStreetNumber?: string, destinationCountry?: string, destinationZipCode?: string, destinationStateShortName?: string, destinationAddressUnit?: string, brokerId?: number, boL?: string, cargo?: string, files?: Array<Blob>, filesForDeleteIds?: Array<number>, medies?: Array<Blob>, mediesForDeleteIds?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<CreateWithUploadsResponse>>;
    public apiAccidentPut(id?: number, report?: string, reported?: boolean, towing?: boolean, vehicloNo?: number, addressAccidentCity?: string, addressAccidentState?: string, addressAccidentCounty?: string, addressAccidentAddress?: string, addressAccidentStreet?: string, addressAccidentStreetNumber?: string, addressAccidentCountry?: string, addressAccidentZipCode?: string, addressAccidentStateShortName?: string, addressAccidentAddressUnit?: string, longitude?: number, latitude?: number, date?: string, time?: string, driverId?: number, truckId?: number, trailerId?: number, citations?: Array<CitationCommand>, insuranceType?: Array<InsuranceTypeCommand>, roadwayTrafficway?: string, weatherCondition?: string, roadAccessControl?: string, roadSurfaceCondition?: string, lightCondition?: string, reportingAgency?: string, policeOfficer?: string, bagdeNo?: string, addressAuthorityCity?: string, addressAuthorityState?: string, addressAuthorityCounty?: string, addressAuthorityAddress?: string, addressAuthorityStreet?: string, addressAuthorityStreetNumber?: string, addressAuthorityCountry?: string, addressAuthorityZipCode?: string, addressAuthorityStateShortName?: string, addressAuthorityAddressUnit?: string, phoneOfficer?: string, fax?: string, originCity?: string, originState?: string, originCounty?: string, originAddress?: string, originStreet?: string, originStreetNumber?: string, originCountry?: string, originZipCode?: string, originStateShortName?: string, originAddressUnit?: string, destinationCity?: string, destinationState?: string, destinationCounty?: string, destinationAddress?: string, destinationStreet?: string, destinationStreetNumber?: string, destinationCountry?: string, destinationZipCode?: string, destinationStateShortName?: string, destinationAddressUnit?: string, brokerId?: number, boL?: string, cargo?: string, files?: Array<Blob>, filesForDeleteIds?: Array<number>, medies?: Array<Blob>, mediesForDeleteIds?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (id !== undefined) {
            localVarFormParams = localVarFormParams.append('Id', <any>id) as any || localVarFormParams;
        }
        if (report !== undefined) {
            localVarFormParams = localVarFormParams.append('Report', <any>report) as any || localVarFormParams;
        }
        if (reported !== undefined) {
            localVarFormParams = localVarFormParams.append('Reported', <any>reported) as any || localVarFormParams;
        }
        if (towing !== undefined) {
            localVarFormParams = localVarFormParams.append('Towing', <any>towing) as any || localVarFormParams;
        }
        if (vehicloNo !== undefined) {
            localVarFormParams = localVarFormParams.append('VehicloNo', <any>vehicloNo) as any || localVarFormParams;
        }
        if (addressAccidentCity !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.City', <any>addressAccidentCity) as any || localVarFormParams;
        }
        if (addressAccidentState !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.State', <any>addressAccidentState) as any || localVarFormParams;
        }
        if (addressAccidentCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.County', <any>addressAccidentCounty) as any || localVarFormParams;
        }
        if (addressAccidentAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.Address', <any>addressAccidentAddress) as any || localVarFormParams;
        }
        if (addressAccidentStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.Street', <any>addressAccidentStreet) as any || localVarFormParams;
        }
        if (addressAccidentStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.StreetNumber', <any>addressAccidentStreetNumber) as any || localVarFormParams;
        }
        if (addressAccidentCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.Country', <any>addressAccidentCountry) as any || localVarFormParams;
        }
        if (addressAccidentZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.ZipCode', <any>addressAccidentZipCode) as any || localVarFormParams;
        }
        if (addressAccidentStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.StateShortName', <any>addressAccidentStateShortName) as any || localVarFormParams;
        }
        if (addressAccidentAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAccident.AddressUnit', <any>addressAccidentAddressUnit) as any || localVarFormParams;
        }
        if (longitude !== undefined) {
            localVarFormParams = localVarFormParams.append('Longitude', <any>longitude) as any || localVarFormParams;
        }
        if (latitude !== undefined) {
            localVarFormParams = localVarFormParams.append('Latitude', <any>latitude) as any || localVarFormParams;
        }
        if (date !== undefined) {
            localVarFormParams = localVarFormParams.append('Date', <any>date) as any || localVarFormParams;
        }
        if (time !== undefined) {
            localVarFormParams = localVarFormParams.append('Time', <any>time) as any || localVarFormParams;
        }
        if (driverId !== undefined) {
            localVarFormParams = localVarFormParams.append('DriverId', <any>driverId) as any || localVarFormParams;
        }
        if (truckId !== undefined) {
            localVarFormParams = localVarFormParams.append('TruckId', <any>truckId) as any || localVarFormParams;
        }
        if (trailerId !== undefined) {
            localVarFormParams = localVarFormParams.append('TrailerId', <any>trailerId) as any || localVarFormParams;
        }
        if (citations) {
            citations.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Citations', <any>element) as any || localVarFormParams;
            })
        }
        if (insuranceType) {
            insuranceType.forEach((element) => {
                localVarFormParams = localVarFormParams.append('InsuranceType', <any>element) as any || localVarFormParams;
            })
        }
        if (roadwayTrafficway !== undefined) {
            localVarFormParams = localVarFormParams.append('RoadwayTrafficway', <any>roadwayTrafficway) as any || localVarFormParams;
        }
        if (weatherCondition !== undefined) {
            localVarFormParams = localVarFormParams.append('WeatherCondition', <any>weatherCondition) as any || localVarFormParams;
        }
        if (roadAccessControl !== undefined) {
            localVarFormParams = localVarFormParams.append('RoadAccessControl', <any>roadAccessControl) as any || localVarFormParams;
        }
        if (roadSurfaceCondition !== undefined) {
            localVarFormParams = localVarFormParams.append('RoadSurfaceCondition', <any>roadSurfaceCondition) as any || localVarFormParams;
        }
        if (lightCondition !== undefined) {
            localVarFormParams = localVarFormParams.append('LightCondition', <any>lightCondition) as any || localVarFormParams;
        }
        if (reportingAgency !== undefined) {
            localVarFormParams = localVarFormParams.append('ReportingAgency', <any>reportingAgency) as any || localVarFormParams;
        }
        if (policeOfficer !== undefined) {
            localVarFormParams = localVarFormParams.append('PoliceOfficer', <any>policeOfficer) as any || localVarFormParams;
        }
        if (bagdeNo !== undefined) {
            localVarFormParams = localVarFormParams.append('BagdeNo', <any>bagdeNo) as any || localVarFormParams;
        }
        if (addressAuthorityCity !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAuthority.City', <any>addressAuthorityCity) as any || localVarFormParams;
        }
        if (addressAuthorityState !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAuthority.State', <any>addressAuthorityState) as any || localVarFormParams;
        }
        if (addressAuthorityCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAuthority.County', <any>addressAuthorityCounty) as any || localVarFormParams;
        }
        if (addressAuthorityAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAuthority.Address', <any>addressAuthorityAddress) as any || localVarFormParams;
        }
        if (addressAuthorityStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAuthority.Street', <any>addressAuthorityStreet) as any || localVarFormParams;
        }
        if (addressAuthorityStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAuthority.StreetNumber', <any>addressAuthorityStreetNumber) as any || localVarFormParams;
        }
        if (addressAuthorityCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAuthority.Country', <any>addressAuthorityCountry) as any || localVarFormParams;
        }
        if (addressAuthorityZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAuthority.ZipCode', <any>addressAuthorityZipCode) as any || localVarFormParams;
        }
        if (addressAuthorityStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAuthority.StateShortName', <any>addressAuthorityStateShortName) as any || localVarFormParams;
        }
        if (addressAuthorityAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('AddressAuthority.AddressUnit', <any>addressAuthorityAddressUnit) as any || localVarFormParams;
        }
        if (phoneOfficer !== undefined) {
            localVarFormParams = localVarFormParams.append('PhoneOfficer', <any>phoneOfficer) as any || localVarFormParams;
        }
        if (fax !== undefined) {
            localVarFormParams = localVarFormParams.append('Fax', <any>fax) as any || localVarFormParams;
        }
        if (originCity !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.City', <any>originCity) as any || localVarFormParams;
        }
        if (originState !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.State', <any>originState) as any || localVarFormParams;
        }
        if (originCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.County', <any>originCounty) as any || localVarFormParams;
        }
        if (originAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.Address', <any>originAddress) as any || localVarFormParams;
        }
        if (originStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.Street', <any>originStreet) as any || localVarFormParams;
        }
        if (originStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.StreetNumber', <any>originStreetNumber) as any || localVarFormParams;
        }
        if (originCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.Country', <any>originCountry) as any || localVarFormParams;
        }
        if (originZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.ZipCode', <any>originZipCode) as any || localVarFormParams;
        }
        if (originStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.StateShortName', <any>originStateShortName) as any || localVarFormParams;
        }
        if (originAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('Origin.AddressUnit', <any>originAddressUnit) as any || localVarFormParams;
        }
        if (destinationCity !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.City', <any>destinationCity) as any || localVarFormParams;
        }
        if (destinationState !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.State', <any>destinationState) as any || localVarFormParams;
        }
        if (destinationCounty !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.County', <any>destinationCounty) as any || localVarFormParams;
        }
        if (destinationAddress !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.Address', <any>destinationAddress) as any || localVarFormParams;
        }
        if (destinationStreet !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.Street', <any>destinationStreet) as any || localVarFormParams;
        }
        if (destinationStreetNumber !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.StreetNumber', <any>destinationStreetNumber) as any || localVarFormParams;
        }
        if (destinationCountry !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.Country', <any>destinationCountry) as any || localVarFormParams;
        }
        if (destinationZipCode !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.ZipCode', <any>destinationZipCode) as any || localVarFormParams;
        }
        if (destinationStateShortName !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.StateShortName', <any>destinationStateShortName) as any || localVarFormParams;
        }
        if (destinationAddressUnit !== undefined) {
            localVarFormParams = localVarFormParams.append('Destination.AddressUnit', <any>destinationAddressUnit) as any || localVarFormParams;
        }
        if (brokerId !== undefined) {
            localVarFormParams = localVarFormParams.append('BrokerId', <any>brokerId) as any || localVarFormParams;
        }
        if (boL !== undefined) {
            localVarFormParams = localVarFormParams.append('BoL', <any>boL) as any || localVarFormParams;
        }
        if (cargo !== undefined) {
            localVarFormParams = localVarFormParams.append('Cargo', <any>cargo) as any || localVarFormParams;
        }
        if (files) {
            files.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Files', <any>element) as any || localVarFormParams;
            })
        }
        if (filesForDeleteIds) {
            filesForDeleteIds.forEach((element) => {
                localVarFormParams = localVarFormParams.append('FilesForDeleteIds', <any>element) as any || localVarFormParams;
            })
        }
        if (medies) {
            medies.forEach((element) => {
                localVarFormParams = localVarFormParams.append('Medies', <any>element) as any || localVarFormParams;
            })
        }
        if (mediesForDeleteIds) {
            mediesForDeleteIds.forEach((element) => {
                localVarFormParams = localVarFormParams.append('MediesForDeleteIds', <any>element) as any || localVarFormParams;
            })
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident`;
        return this.httpClient.request<CreateWithUploadsResponse>('put', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiAccidentStartPost(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any>;
    public apiAccidentStartPost(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public apiAccidentStartPost(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public apiAccidentStartPost(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (bearer) required
        localVarCredential = this.configuration.lookupCredential('bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/accident/start`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
